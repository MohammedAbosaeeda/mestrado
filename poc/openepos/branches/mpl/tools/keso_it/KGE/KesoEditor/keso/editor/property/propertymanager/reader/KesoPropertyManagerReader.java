/* Generated By:JavaCC: Do not edit this line. KesoPropertyManagerReader.java */
package keso.editor.property.propertymanager.reader;

import java.io.*;
import java.util.Vector;
import keso.editor.property.*;
import keso.editor.property.propertymanager.*;

/**
 * @author  Wilhelm Haas
 */
public class KesoPropertyManagerReader implements KesoPropertyManagerReaderConstants {
        public static void parseFile(String filename) throws Exception {
                KesoPropertyManagerReader parser = null;
                try {
                        parser = new KesoPropertyManagerReader(new FileInputStream(filename));
                } 
                catch (FileNotFoundException ex) {
                	throw new Exception(ex.toString());
                }
                catch (Exception ex) {
                        ex.printStackTrace();
                        throw new Exception(ex.toString());
                }

                try {
                        parser.start();
                } catch (Exception ex) {
                        throw new Exception(ex.toString());
                }
        }

  final public void start() throws ParseException {
        Token name;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINECOMMENT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINECOMMENT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(LINECOMMENT);
      }
      name = jj_consume_token(IDENTIFIER);
                        KesoPropertyManagerEntry entry = new KesoPropertyManagerEntry(name.image);
                        entry.setDefault(true);
                        KesoPropertyManager.addEntry(entry);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        parseProperties(entry);
      }
    }
  }

  final public void parseProperties(KesoPropertyManagerEntry parententry) throws ParseException {
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
      case LINECOMMENT:
      case DEFAULTPROPERTY:
      case INTEGER:
      case STRING:
      case COMPLEXBOOLEAN:
      case COMPLEXUNQUOTEDSTRING:
      case INTEGERARRAY:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      parseProperty(parententry);
      jj_consume_token(SEMICOLON);
    }
    jj_consume_token(RBRACE);
  }

  final public void parseProperty(KesoPropertyManagerEntry parententry) throws ParseException {
        Token propertytype;
        Token propertydefault = null;
        Token propertyname;
        Token propertydescription;
        Token value;
        Token flag;
        StringBuffer description = null;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
      case LINECOMMENT:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
        propertydescription = jj_consume_token(DESCRIPTION);
                                if (description == null) {
                                        description = new StringBuffer();
                                } else {
                                        if (description.length() != 0) {
                                                description.append(" ");
                                        }
                                }
                                propertydescription.image = propertydescription.image.trim();
                                propertydescription.image = propertydescription.image.substring(1);
                                if (propertydescription.image.length() != 0) {
                                        description.append(propertydescription.image);
                                }
        break;
      case LINECOMMENT:
        jj_consume_token(LINECOMMENT);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULTPROPERTY:
      propertydefault = jj_consume_token(DEFAULTPROPERTY);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      propertytype = jj_consume_token(INTEGER);
      break;
    case STRING:
      propertytype = jj_consume_token(STRING);
      break;
    case COMPLEXBOOLEAN:
      propertytype = jj_consume_token(COMPLEXBOOLEAN);
      break;
    case COMPLEXUNQUOTEDSTRING:
      propertytype = jj_consume_token(COMPLEXUNQUOTEDSTRING);
      break;
    case INTEGERARRAY:
      propertytype = jj_consume_token(INTEGERARRAY);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    propertyname = jj_consume_token(IDENTIFIER);
                KesoPropertyManagerEntry entry = new KesoPropertyManagerEntry(propertyname.image);
                parententry.addEntry(entry);
                if (propertydefault != null) {
                        entry.setDefault(true);
                }
                entry.setPropertyType(propertytype.image);
                if (description != null) {
                        entry.setDescription(description.toString());
                }
    parseLimit(entry);
                if (!propertytype.image.equals("ComplexBoolean")) {
                        parsePossibleValues(entry);
                }

                if (    propertytype.image.equals("ComplexBoolean") ||
                                propertytype.image.equals("ComplexUnquotedString")) {
                        parseProperties(entry);
                }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALUE:
      jj_consume_token(VALUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        value = jj_consume_token(IDENTIFIER);
        break;
      case NUMBER:
        value = jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        entry.setDefaultValue(value.image);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOTNULL:
      case MUSTEXIST:
      case LOCALYUNIQUE:
      case GLOBALYUNIQUE:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOTNULL:
        flag = jj_consume_token(NOTNULL);
                                if (flag.image.equals("NOT NULL")) {
                                        entry.setNotNull();
                                }
        break;
      case MUSTEXIST:
        flag = jj_consume_token(MUSTEXIST);
                                if (flag.image.equals("MUST EXIST")) {
                                        entry.setMustExist();
                                }
        break;
      case LOCALYUNIQUE:
        flag = jj_consume_token(LOCALYUNIQUE);
                                if (flag.image.equals("LOCALY UNIQUE")) {
                                        entry.setLocalyUnique();
                                }
        break;
      case GLOBALYUNIQUE:
        flag = jj_consume_token(GLOBALYUNIQUE);
                                if (flag.image.equals("GLOBALY UNIQUE")) {
                                        entry.setGlobalyUnique();
                                }
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void parseLimit(KesoPropertyManagerEntry entry) throws ParseException {
        Token min;
        Token max;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      min = jj_consume_token(NUMBER);
                        entry.setMin(Integer.parseInt(min.image));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        max = jj_consume_token(NUMBER);
                                entry.setMax(Integer.parseInt(max.image));
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  final public void parsePossibleValues(KesoPropertyManagerEntry entry) throws ParseException {
        Token value;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNMENT:
      jj_consume_token(ASSIGNMENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
                                                Vector possiblevalues = new Vector();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          value = jj_consume_token(IDENTIFIER);
          break;
        case NUMBER:
          value = jj_consume_token(NUMBER);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                possiblevalues.add(value.image);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            value = jj_consume_token(IDENTIFIER);
            break;
          case NUMBER:
            value = jj_consume_token(NUMBER);
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                                                possiblevalues.add(value.image);
        }
        jj_consume_token(RBRACE);
                                        entry.setPossibleValues(possiblevalues);
        break;
      case IDENTIFIER:
        value = jj_consume_token(IDENTIFIER);
                                        entry.setFilter(value.image);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  public KesoPropertyManagerReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token;
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x40040,0x40,0x400000,0x3e0e0,0x60,0x60,0x80,0x3e000,0xc0000,0x1000,0xf00,0xf00,0x10000000,0x2000000,0xc0000,0x10000000,0xc0000,0x440000,0x20000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  public KesoPropertyManagerReader(java.io.InputStream stream) {
     this(stream, null);
  }
  public KesoPropertyManagerReader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KesoPropertyManagerReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public KesoPropertyManagerReader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KesoPropertyManagerReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public KesoPropertyManagerReader(KesoPropertyManagerReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public void ReInit(KesoPropertyManagerReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[33];
    for (int i = 0; i < 33; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
