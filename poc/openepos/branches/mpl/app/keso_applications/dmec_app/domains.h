/* THIS FILE IS AUTO GENERATED BY KESO! DON'T EDIT */

/* Class: domains */

#ifndef __domains_H__
#define __domains_H__ 1
#include <keso_types.h>
#include "global.h"
#include "irr.h"

typedef struct {
	union {
		struct {
			unsigned long freeslots;
			unsigned char slotSize;
			unsigned int heap_size;
			volatile irr_listel_t* freemem;
			unsigned long sasls;
			irr_listel_t* heap_top;
			unsigned char colorbit;
		} irr;
	} heap;
} domain_t;
#define INVALID_DOMAIN 1
extern volatile object_t* static_ref[KESO_NUM_STATIC_REFS];
#define DOMAINDESC(id) domain_desc
#define STATICREF(did) static_ref
#define KESO_CURRENT_DOMAIN 0
extern domain_t domain_desc;
#include "irr.h"

#define KESO_ALLOC(_cls_,_size_,_roff_) keso_irr_alloc(_cls_,_size_,_roff_)
obj_size_t keso_objSize(obj_size_t slot_size, object_t *obj);
#ifndef KESO_OMIT_WRITEBARRIERS
#if KESO_WRBR_INLINE_LEVEL==1
#define KESO_WRBR(_field_,_value_) { object_t** ref=&(_field_); if(KESO_CURRENT_DOMAIN==irr_gc_active_domain) keso_irr_pushObject(*ref); *ref =  _value_; }
#elif KESO_WRBR_INLINE_LEVEL==0
#define KESO_WRBR(_field_,_value_) keso_irr_writebarrier(&(_field_), _value_)
#endif
#else
#define KESO_WRBR(_field_,_value_) (_field_ =  _value_)
#endif

#endif

