\documentclass[conference]{IEEEtran}

\hyphenation{in-ter-op-er-a-bil-i-ty phe-nom-e-non trans-duc-er po-ten-tial-ly trans-duc-er fig-ure con-di-tion-ing con-ver-sion com-mu-ni-ca-tion}

\usepackage[latin1]{inputenc}	% for Latin languages
\usepackage[T1]{fontenc}	% for ISO and UTF characters
\usepackage[english]{babel}	% for multilingual support
\usepackage{graphicx}
\usepackage{multicol}
\usepackage{blindtext}
\usepackage{textcomp}

\newcommand{\fig}[4][htbp]{
  \begin{figure}[#1] {\centering\scalebox{#2}{\includegraphics{fig/#3}}\par}
    \caption{#4\label{#3}}
  \end{figure}
}

\newcommand{\figR}[5][htbp]{
  \begin{figure}[#1]{\centering\scalebox{#2}{\includegraphics[angle=#5]{fig/#3}}\par}
    \caption{#4\label{#3}}
  \end{figure}
}

\newcommand{\figTC}[4][htbp]{
  \begin{figure*}[#1] {\centering\scalebox{#2}{\includegraphics{fig/#3}}\par}
    \caption{#4\label{#3}}
  \end{figure*}
}

\input{commands}

\begin{document}

\title{Improvements in Wireless Communication and Support for Wireless Multimedia Sensor Networks in IEEE 1451}

\author{\IEEEauthorblockN{Leonardo Maccari Rufino, Rodrigo Vieira Steiner, Rodrigo Valceli Raimundo, Ant\^onio Augusto Fr\"ohlich}
\IEEEauthorblockA{Laboratory for Software and Hardware Integration\\
Federal University of Santa Catarina\\
P.O.Box 476, 88040900 - Florian\'opolis - SC - Brazil\\
Email: \{leonardo,rodrigo,rodrigovr,guto\}@lisha.ufsc.br}}

\maketitle


\begin{abstract}
The IEEE 1451 smart transducer interface standard aims at establishing a common interface to promote interoperability among the myriad of transducers currently in the market.
Nonetheless, the acceptance of the standard in the realm of Wireless Sensor Networks (WSN) seems to be constrained by apparently incompatible operational semantics: while ordinary transducers deployed in control networks usually operate at fixed periods, or even as slaves of master controllers, wireless sensors mostly avoid such regimens due to its inherent energy and bandwidth utilization inefficiency.
In the first part of this paper, we propose a reconciling strategy based on Transducer Interface Module Initiated Message (TIM-IM) that enables Wireless Transducer Interface Modules (WTIM) to communicate efficiently with a Network Capable Application Processor (NCAP).
The proposed solution has been validated through a prototype implementation with expressive efficiency gains, increasing the sensor's battery lifetime, compared with the polling method.
The second part of this work is related to the new and emerging technology called Wireless Multimedia Sensor Network (WMSN), which is not addressed in IEEE 1451.
Thus, we also propose an adjustment to the IEEE 1451 project in order to enable its use in WMSN.
\end{abstract}

\begin{IEEEkeywords}
IEEE 1451, Wireless Sensor Network, Wireless Multimedia Sensor Network, TIM Initiated Message
\end{IEEEkeywords}


\section{Introduction}
\label{sec:introduction}

Wireless sensor networks (WSN) are formed by devices called sensor nodes capable of monitoring some phenomena around them and communicate via radio frequency.
Factors such as mobility among nodes, heterogeneity in communication, and diversity of sensors make WSN vulnerable to failure.
Aiming to solve these problems, the IEEE 1451 family was created.

Past efforts to bring IEEE 1451 to the realm of WSN focused mainly on interoperability, without major concerns about efficiency and conformance to the traditional semantics of such networks~\cite{Oostdyk:2006}~\cite{Song:2008}.
The reconciling strategy proposed in this paper is built around the fact that Network Capable Application Processor (NCAP) can potentially close the gap between Wireless Transducer Interface Modules (WTIM) and control applications by deploying the concept of information freshness.
Instead of polling WTIMs for fresh information about sensed data, NCAPs can rely on the Transducer Interface Module Initiated Messages (TIM-IM) feature of IEEE 1451 and let WTIMs report new information whenever there are new data to be reported, as shown in Figure~\ref{TIM-IM}.

\fig{.48}{TIM-IM}{Overview of proposed IEEE 1451 WSN strategy.}

%In this context, WTIMs associate Transducer Electronic Data Sheet (TEDS) to Operational Range Tables (ORT) that are used to decide whether an observed variation in sensed data is to be reported to NCAP via a TIM-IM, or simply ignored.

In this context, WTIMs can decide whether an observed variation in sensed data is to be reported to NCAP via a TIM-IM, or simply ignored.
In the worst-case, that is, in a constantly changing environment, this strategy spares NCAP request messages, thus improving on network bandwidth and also on mote's energy, since the sensor no longer needs to listen constantly the channel for NCAP request messages.
In case of relatively stable environments, efficiency can be largely improved.

While WSNs are composed of sensors which monitor some scalar physical phenomena, such as temperature, pressure, and humidity, a new technology called Wireless Multimedia Sensor Network (WMSN) appeared during the last few years.
It was leveraged due to the production of cheap CMOS (Complementary Metal Oxide Semiconductor) cameras and microphones, which can acquire rich media content from the environment.
WMSN can be defined as networks of wirelessly interconnected sensor nodes equipped with multimedia devices that are capable of retrieving video and audio streams, images, and scalar sensor data~\cite{AlNuaimi:2011}.

Although WMSNs have the potential to enable many new applications, for instance, multimedia surveillance sensor networks, traffic avoidance and control systems, advanced health care delivery, automated parking advice, smart homes, environmental monitoring, and so on~\cite{Akyildiz:2007}, IEEE 1451 standard does not deal with this type of sensors.
This paper proposes an adaptation to the IEEE 1451 project in order to enable its utilization in wireless multimedia sensor networks.
To achieve this, we have included information in TEDS (Transducer Electronic Data Sheet), such as the description of data stream (audio or video).
We have also added two new commands to the set of messages described by the standard, in order to notify the receiving side that a multimedia stream is starting/ending.

The rest of this paper is organized as follows: Section~\ref{sec:ieee1451family} presents the IEEE 1451 family.
Section~\ref{sec:relatedwork} shows the related work.
The proposed TIM-IM is described in Section~\ref{sec:timim}, and the adjustment in the standard to support WMSN is presented in Section ~\ref{sec:wmsn}.
Section~\ref{sec:results} shows the results.
Finally, Section~\ref{sec:conclusion} concludes the paper.


\section{IEEE 1451 Family}
\label{sec:ieee1451family}

The Instrumentation and Measurement Society's Sensor Technology Technical Committee TC-9 in the Institute of Electrical and Electronics Engineers (IEEE) has been working to establish a set of smart sensor interface standards called IEEE 1451.
The goal of the standards family is to define a set of common communication interfaces for connecting transducers to microprocessor-based systems, instruments, and field networks in a network-independent environment~\cite{Lee:XXX}~\cite{Lee:2000}.

The specifications developed place no restrictions on the use of signal conditioning and processing schemes, analog-to-digital converters, microprocessors, network protocols, and network communication media.
Therefore, the IEEE 1451 project's aim is to reduce the industry's effort to develop and migrate to networked smart transducers.
%The ultimate goals of this family of standards are to provide the means for achieving transducers-to-network interchangeability and transducer-to-networks interoperability~\cite{Lee:2000}.

%A transducer is a device that converts energy from one form into another and it may either be a sensor or an actuator.
%A sensor is a device that generates an electrical signal proportional to a physical, biological, or chemical parameter and an actuator is a transducer that accepts an electrical signal and takes a physical action.

A smart transducer is the integration of an analog or digital sensor or actuator element, a processing unit, a communication interface, and the associated software from signal conditioning, calibration, diagnostics, and communication~\cite{Song:2008}.
Based on this premise, a smart transducer model is shown in Figure~\ref{SmartTransducerModel} (a).
Figure~\ref{SmartTransducerModel} (b) shows the IEEE 1451 smart transducer architecture, which is quite similar to the previous.
The main differences are the division of the system into two major components, called TIM and NCAP, and the introduction of the TEDS.

\fig{0.48}{SmartTransducerModel}{(a) A smart transducer model; (b) The IEEE 1451 smart transducer model.}


\subsection{TIM and NCAP}

To achieve transducers-to-network interchangeability and transducer-to-networks interoperability, the IEEE 1451 standards family divides the parts of a system into two general categories of devices, Transducer Interface Module (TIM) and Network Capable Application Processor (NCAP):

\begin{itemize}
 \item \textbf{TIM} is a module that contains the communication interface, signal conditioning, analog-to-digital and/or digital-to-analog conversion and, in many cases, the transducer. A TIM may range in complexity from a single sensor or actuator to units containing many transducers (sensors and actuators).
 \item \textbf{NCAP} is the hardware and software that provides the gateway function between TIMs and user network or host processor.
\end{itemize}

Some members of the standards family provide the communication interfaces between an NCAP and one or more TIMs.


\subsection{TEDS}

A key feature of an IEEE 1451 smart transducer is the specification of the standardized Transducer Electronic Data Sheet (TEDS) and their formats.
TEDS contains manufacturer-related information about the sensor, such as manufacturer name, sensor types, serial number, measurement range, accuracy, and calibration data. %and there are standardized data formats for the TEDS.

TEDS provides many benefits, for instance, it enables self-identification of sensors or actuators and provides long-term self-documentation.
TEDS reduces human error and eases field installation, upgrade, and maintenance of sensors.
And it also provides plug-and-play capability.

There are four mandatory TEDS required for TIMs, all others are optional.
The mandatory TEDS are: \textit{Meta-TEDS}, \textit{TransducerChannel TEDS}, \textit{User's Transducer Name TEDS}, and \textit{PHY TEDS}.
TEDS can be stored in some form of electrically erasable programmable ROM, if the contents never change, and the changeable portions can be in TIM's RAM~\cite{Song:2008}.


\subsection{Family Members}

Currently the family consists of six active standards and one in development.
This work is related to two of them: IEEE 1451.0 and IEEE 1451.5:

\begin{itemize}
 \item \textbf{IEEE 1451.0} introduces the concept of TIM and NCAP connected by a media specified by another member of the family. It also develops a set of common functionality for the whole family, which is independent of physical communication media and includes the basic functions required to control and manage smart transducers, common communication protocols, and media-independent TEDS formats~\cite{IEEE1451.0:2007}.

 \item \textbf{IEEE 1451.5} introduces the concept of Wireless Transducer Interface Module (WTIM), connected wirelessly over an approved radio communication module to a NCAP. The IEEE 1451.5 approved radios (Dot5AR) are IEEE 802.11, IEEE 802.15.4, IEEE Bluetooth, and IEEE ZigBee technologies. A WTIM is a TIM which contains a Dot5AR for wireless communication~\cite{IEEE1451.5:2007}. %A WTIM is a module that contains a Dot5ApprovedRadio, signal conditioning, analog-to-digital and/or digital-to-analog conversion and in many cases the transducers (sensors and actuators). A WTIM may range in complexity from a single sensor or actuator plus radio to units containing many transducers plus radio. Since the WTIM contains a Dot5AR for wireless communication, the NCAP in-turn contains a similar radio to complete the wireless communication link between NCAP and WTIM~\cite{IEEE1451.5:2007}. %The specification for this standard focuses on the communication modules that connect the WTIM and NCAP using the Dot5AR protocols~\cite{IEEE1451.5:2007}.
\end{itemize}

%The reference model presented in Figure~\ref{IEEE1451ReferenceModel} shows the relationships among the various IEEE 1451 standards family members.

%\figTC{0.75}{IEEE1451ReferenceModel}{IEEE 1451 reference model~\cite{IEEE1451.0:2007}.}


\subsection{TransducerChannel}

TransducerChannel is the name given by the standard to the combination of transducer and the components of signal conditioning and conversion associated with it, such as ADC (Analog-to-Digital Converter).
Each TransducerChannel is associated with an identification number of 16 bits, which works as destination address of commands sent by NCAP, beyond distinguishing the TransducerChannels in TIM.
TIM receives the identification number 0, and any command to this address is intended for the TIM itself and not for an individual TransducerChannel.

When NCAP wants to send a request to a specific TransducerChannel, it must send the message to the TIM's physical address, such as an IP (Internet Protocol) address, and the IEEE 1451 command must contain the TransducerChannel ID in a specific field.


\subsection{Operation Modes}
\label{sec:operationmodes}

Each TransducerChannel can support different sampling and transmission modes, both described in IEEE 1451.0.
The combination of them form the operating mode of a TransducerChannel which describes, in general, how is the operation of the sensor or actuator.
The first, sampling mode, describes how the TransducerChannel should proceed to perform data retrieval, if it is a sensor, or how the incoming data should be used, when the transducer is an actuator.
The sampling mode can also set the interval in which data should be retrieved/used.
The second, transmission mode, determines how the information is transferred between NCAP and TIM.
The mode or modes of operation that can operate a TransducerChannel are indicated in \textit{TrasducerChannel TEDS}'s attributes in each transducer.

%The standard specifies five possible sampling modes for the operation of transducers. They are: \textit{trigger-initiated}, \textit{free-running without pre-trigger}, \textit{free-running with pre-trigger} (with or without buffers enabled), \textit{continuous sampling}, and \textit{immediate operation}. While the three possible transmission modes are: \textit{only when commanded}, \textit{streaming when a buffer is full}, and \textit{streaming at a fixed interval}.

The standard specifies some operating modes for the operation of transducers.
The choice of the sampling mode \textit{continuous sampling} in combination with either the transmission mode \textit{streaming when a buffer is full} or \textit{streaming at a fixed interval} forms an operating mode known as \textit{streaming operation}.
A sensor operating in this mode must acquire data and transmit them to NCAP when the reading set is completed, without the need to receive additional commands from NCAP.
Thus, the readings taken by a sensor can be sent autonomously and automatically.


\section{Related Work}
\label{sec:relatedwork}

Song and Lee~\cite{Song:2006}~\cite{Lee:2007} describe an implementation of the proposed IEEE 1451.0 and 1451.5 standards using the Java programming language.
This system consists of two wireless nodes, NCAP and WTIM, which communicate with each other using the standard interfaces through 802.11 wireless communication modules.
Three examples are discussed in these papers.
The first example focuses on wireless node announcement and discovery using the publisher-subscriber model.
The second example focuses on request-response of sensor data using the client-server model.
Finally, the third example focuses on request-response of sensor TEDS using the client-server model.
In these works, when NCAP needs to collect data from WTIM, it must take the initiative by sending a request, causing the mote to send a response back to it.
Our work differentiates from these because WTIM is able to start the transmission of information without a previous request sent by NCAP, saving the network bandwidth.

Gilsinn and Lee~\cite{Gilsinn:2001} discuss the IEEE 1451 interface for smart sensors, and possible solutions for creating a wireless interface for the standard.
Most sensors require an energy source, such as an electric power supply or battery, to power the sensing element and associated electronics.
Thus, the authors comment that low-power wireless sensors would be useful in locations where maintenance is performed regularly and batteries could be changed as part of that maintenance.
In addition, another way to energize the sensors would be getting energy from their surrounding, thus a power conversion device would be designed to take energy from heat, light, sound, vibration, or any other source of energy available from the environment.
Our TIM-IM method aims to minimize energy consumption, keeping the sensor in a sleep state most of its time.

Mangharam~\cite{Mangharam:2006} describes a real-time voice stream-capability in wireless sensor networks.
The paper presents FireFly, a time-synchronized multimedia sensor network platform using Nano-RK real-time sensor operating system~\cite{Eswaran:2005}.
In order to achieve high end-to-end throughput, bounded latency, and predictable lifetime, hardware-based time synchronization was employed.
The author also proposed to use RT-Link~\cite{Rowe:2006}, a TDMA-based (Time Division Multiple Access) link layer protocol for message exchange on well-defined time slots and pipelining along multiple hops.
%Finally, an experimental deployment of 42 nodes in a coal mine is described, presenting performance measurements related to the end-to-end throughput, jitter, packet loss, and voice quality.

Efficient use of bandwidth in WSNs is of interest due to the constraints imposed by their size and power.
In applications where an audio signal must be transmitted from sensors to a base station through a wireless medium, it is interesting to stop transmission when speech is not present.
As a pre-processor to such a system, a voice activity detector (VAD) is required to make a decision as to whether or not the current frame should be transmitted.
Berisha~\cite{Berisha:2006} proposes a low-complexity VAD and a simple gender classifier for use in a distributed acoustic sensing system.
A local decision is made by the sensor, based on the measurements, and then, the data can be transmitted to the base station.
At the base station, a data fusion algorithm is implemented that combines the sensor's individual decisions located in the network to form a final one.

Data compression is also an important aspect in WMSN due to its limited amount of bandwidth available for communication between wireless sensors.
Gosztolya~\cite{Gosztolya:2010} proposes to use Huffman coding, a well-known lossless compression method for any kind of data, pre-calculating the Huffman codes of each possible sample offline.
Therefore, the encoder must only read the appropriate code from a pre-calculated table for each sample value.
By using Huffman combined with other audio compression methods, they obtained a significant reduction in the required bandwidth, such as 30\% using \textmu{}-law codec, with practically no information loss, and 50\%, with a small information loss, using Truncate method.


\section{Transducer Interface Module \\Initiated Message}
\label{sec:timim}

Due to problems in WSN like the amount of energy available, some applications choose to keep the sensor nodes asleep during most of its operation.
Nodes can be awakened from time to time, in order to make the proper measurements, process data, and communicate with other nodes.
Among the operation modes available on IEEE 1451.0, the one that best fits this scenario is called \textit{streaming operation}, as discussed in Section~\ref{sec:operationmodes}.

The IEEE 1451.0 standard also describes a structure called ``TIM Initiated Message''.
However, it only demonstrates its use to send the status from TIMs to NCAP, such as to indicate that some TEDS have changed or if a command was rejected.
The standard does not describe how we should proceed to send data collected by the sensor to NCAP.
We propose a way for this transfer to be made, enabling a TIM to take the initiative and send collected data by its TransducerChannels to the NCAP on which it is registered.

We adopt the ``TIM Initiated Message'' structure, filling the existing fields with the values as instructed by the ``read TransducerChannel data-set segment'' command, described by the standard.
This way, the application must wait for samples obtained by the TransducerChannel, which is working on \textit{streaming operation} mode.

The message's structure is shown in Figure~\ref{MessageStructure}.
The first two octets are formed by the TransducerChannel address which is sending the message.
The next two octets specify the message's command type, where the most significant byte indicates the command class to be used and the least significant represents the command function.
This work proposes to fill these fields with the values 3 and 1, indicating a ``transducer operating state'' command and ``read TransducerChannel data-set segment'' function, respectively.
The third part also consists of two bytes and indicates the number of octets transmitted in the message, in other words, how many octets are expected in the data field.
Finally, there are octets containing the reading set obtained by the sensor.

\fig{.28}{MessageStructure}{TIM Initiated Message format.}

The various TEDS contain information related to the TIM and they represent the best place to describe wheth\-er a sensor is working on polling or TIM-IM mode.
An important TEDS is the \textit{TransducerChannel TEDS}, which contains information such as the physical unit used to define the information being measured (such as meter, kilogram, second, kelvin, etc.), the number of data samples transmitted by the sensor, the sampling and transmission modes supported by the TransducerChannel, and so on.

In order to allow the use of messages initiated by TIM correctly, we propose to extend the table 58 of IEEE 1451.0~\cite{IEEE1451.0:2007}, which describes the data transmission modes supported by a TransducerChannel.
This information is contained in \textit{TransducerChannel TEDS} and the three new entries to the table are shown in Table~\ref{tab:DataTransmissionAttribute}.
According to the amendments, a sensor can describe that its TransducerChannel works exclusively in TIM Initiated Message mode, allowing the sensor to save energy, keeping it in a sleep state most of its time.
Then, the value 1 of the original table represents a TransducerChannel working on polling mode, values 2, 3, and 4, running on polling and TIM-IM modes, and the new values 5, 6, and 7, only TIM-IM mode.
%, which represents a copy of the table presented in the standard, except for the additions proposed in this paper.

\begin{table}[htb] % [htb]-> here, top, bottom
   \centering   % tabela centralizada
   \small       % tamanho da fonte 
   %\setlength{\arrayrulewidth}{2\arrayrulewidth}  % espessura da linha
   %\setlength{\belowcaptionskip}{10pt}  % espa\c{c}o entre caption e tabela
   \caption{\it Data transmission attribute.}
   \begin{tabular}{|c|l|} % c=center, l=left, r=right 
      \hline
      \multicolumn{1}{|c|}{\textbf{Value}} & \multicolumn{1}{|c|}{\textbf{Description}} \\
      \hline \hline
%      0 & Reserved. \\
%      \hline
%      1 & This TransducerChannel is only capable of being \\
%	& operated in the only when commanded mode (see \\
%	& 5.10.2.1). \\
%      \hline
%      2 & This TransducerChannel is capable of being operated \\
%	& in the Streaming when a buffer is full (see 5.10.2.2) \\
%	& or only when commanded modes. \\
%      \hline
%      3 & This TransducerChannel is capable of being operated \\
%	& in the Streaming at a fixed interval (see 5.10.2.3) \\
%	& or only when commanded modes. \\
%      \hline
%      4 & This TransducerChannel is capable of being operated \\
%	& in the only when commanded, Streaming when a \\
%	& buffer is full or Streaming at a fixed interval modes. \\
%      \hline
      5 & This TransducerChannel is capable of being operated \\
	& in the Streaming when a buffer is full mode. \\
      \hline
      6 & This TransducerChannel is capable of being operated \\
	& in the Streaming at a fixed interval mode. \\
      \hline
      7 & This TransducerChannel is capable of being operated \\
	& in the Streaming when a buffer is full or Streaming \\
	& at a fixed interval modes. \\
      \hline
%      8-255 & Reserved. \\
%      \hline
   \end{tabular}
   \label{tab:DataTransmissionAttribute}
\end{table}

Figure~\ref{SequenceDiagramPolling} presents the sequence diagram of IEEE 1451 working in polling mode, and Figure~\ref{SequenceDiagramTIM-IM} shows the diagram when using TIM Initiated Message method.
Briefly, once a WTIM has registered to NCAP and the NCAP has ordered WTIM's TEDS as needed, the following steps of TIM-IM are:
\begin{enumerate}
 \item NCAP sends an ``operate'' command to put the TIM's TransducerChannel in operation;
 \item TransducerChannel comes into operation mode, disconnecting from NCAP, if possible;
 \item TransducerChannel begins to make sensor readings at regular intervals until the data set is complete, putting the WTIM in sleep mode between these intervals;
 \item WTIM connects again, waits an ``operate'' command, and the data set is sent to NCAP using the structure of a message initiated by TIM and the fields filled according to a reading command format as described in this paper;
 \item WTIM disconnects again, resuming the operations from step 3.
\end{enumerate}

\fig{.7}{SequenceDiagramPolling}{Polling sequence diagram.}

\fig{.71}{SequenceDiagramTIM-IM}{TIM Initiated Message sequence diagram.}

As can be seen in Figure~\ref{SequenceDiagramTIM-IM}, some exchanges of messages between NCAP and TIM can be removed to optimize the operation, reducing energy and network bandwidth consumption.
Then, we propose an optimized TIM-IM approach, shown in Figure~\ref{SequenceDiagramTIM-IMOpt}.
Since NCAP knows that TIM works in TIM-IM mode, NCAP will not send any data request.
Thus, the messages connect, operate, and disconnect have been removed.

Although TIM will be asleep during the sensing time and will not be able to respond to messages from NCAP, this optimized approach can be used in situations where it is useful to save the network bandwidth.
Still, NCAP and TIM must agree in advance to use this mode.

\fig{.7}{SequenceDiagramTIM-IMOpt}{Optimized TIM Initiated Message sequence diagram.}


\section{Support for Wireless Multimedia Sensor Networks in IEEE 1451}
\label{sec:wmsn}

For the sake of the increasing use of multimedia sensors and their potential use in several areas, this paper proposes the support for WMSN in IEEE 1451 standard.
In order to allow the sending of multimedia information, first, we propose to extend the table 48 of IEEE 1451.0~\cite{IEEE1451.0:2007}, which describes the \textit{TransducerChannel TEDS} data block structure.
The new table will not change its information, except by adding two new entries, which are shown in Table~\ref{tab:TransducerChannelTEDS}.
According to the amendments, a sensor can describe that its TransducerChannel sends multimedia data (audio or video stream).
These new options behave as the already existing non-multimedia alternatives (radians, steradians, meters, kilograms, seconds, amperes, kelvins, moles, and candelas), representing two new entries to the field that describes the physical units.

\begin{table*}[htpb] % [htb]-> here, top, bottom
   \centering   % tabela centralizada
   %\large       % tamanho da fonte 
   \setlength{\arrayrulewidth}{2\arrayrulewidth}  % espessura da linha
   \setlength{\belowcaptionskip}{10pt}  % espa\c{c}o entre caption e tabela
   \caption{\it Structure of the TransducerChannel TEDS data block.}
   \begin{tabular}{|l|l|l|l|l|} % c=center, l=left, r=right 
      \hline
      \textbf{Field} & \textbf{Field Name} & \textbf{Description} & \textbf{Type} & \textbf{\# octets} \\
      \hline \hline
      61 & AudioStream & The exponent for Audio Stream & UInt8 & 1 \\
      \hline
      62 & VideoStream & The exponent for Video Stream & UInt8 & 1 \\
      \hline
   \end{tabular}
   \label{tab:TransducerChannelTEDS}
\end{table*}

There are cases where it is not possible to completely express the physical unit with only one field.
To solve this issue, an optional text-based TEDS, called \textit{Units Extension TEDS}, is provided by the standard to give a place to include a text that would extend the unit field~\cite{IEEE1451.0:2007}.
\textit{TransducerChannel TEDS} has a field which provides the TEDS access code for the extension TEDS.
We propose to use \textit{Units Extension TEDS} to report some additional information about the audio or video stream sensed.
For example, the text-based TEDS may indicate that the audio collected is sent using G.711 A-law codec.

In order to notify the opposite side that a data stream is starting or ending, we also propose to extend the table 31 of IEEE 1451.0~\cite{IEEE1451.0:2007}, which describes the commands used when the TransducerChannel is in operational state.
Table~\ref{tab:TransducerOperatingStateCommands} shows the two new transducer operating state commands, represented by the command lines with identification numbers 5 and 6.
They can be used in polling method, where NCAP requests sensed data to the sensors, and in TIM-IM mode, where the motes are responsible for taking the initiative to communicate with NCAP which they belong.
%-- copied from the standard, except for command lines with identification numbers 5 and 6, which were included in this paper --

\begin{table*}[htpb] % [htb]-> here, top, bottom
   \centering   % tabela centralizada
   %\large       % tamanho da fonte 
   \setlength{\arrayrulewidth}{2\arrayrulewidth}  % espessura da linha
   \setlength{\belowcaptionskip}{10pt}  % espa\c{c}o entre caption e tabela
   \caption{\it Transducer operating state commands.}
   \begin{tabular}{|l|l|l|l|l|l|l|} % c=center, l=left, r=right 
      \hline
      \textbf{cmdFunctionId} & \textbf{Command} & \multicolumn{3}{|l|}{\textbf{Address class}} & \textbf{Reply} & \textbf{Required/} \\
      \cline{3-5}
       &  & \textbf{TransducerChannel} & \textbf{Proxy} & \textbf{Group/} & \textbf{expected} & \textbf{optional} \\
       &  &                            &                & \textbf{global} &                   &                   \\
      \hline \hline
%      0 & Reserved & -- & -- & -- & -- & -- \\
%      \hline
%      1 & Read TransducerChannel & Yes & Yes & No & Yes & See \\
%        & data-set segment       &     &     &    &     & NOTE \\
%      \hline
%      2 & Write TransducerChannel & Yes & Yes & No & No & See \\
%        & data-set segment        &     &     &    &    & NOTE \\
%      \hline
%      3 & Trigger command & Yes & Yes & Yes & No & Required \\
%      \hline
%      4 & Abort Trigger & Yes & Yes & Yes & No & Optional \\
%      \hline
      5 & Start Read TransducerChannel & Yes & Yes & No & No & See \\
        & data-set segment             &     &     &    &    & NOTE \\
      \hline
      6 & Stop Read TransducerChannel & Yes & Yes & No & No & See \\
        & data-set segment            &     &     &    &    & NOTE \\
      \hline
%      7-127 & Reserved & -- & -- & -- & -- & -- \\
%      \hline
%      128-255 & Open for manufacturers & -- & -- & -- & -- & -- \\
%      \hline
      \multicolumn{7}{|l|}{NOTE--A Start Read TransducerChannel data-set segment and a Stop Read TransducerChannel data-set segment commands} \\
      \multicolumn{7}{|l|}{are required for multimedia sensors.} \\
%      \multicolumn{7}{|l|}{NOTE--A Read TransducerChannel data-set segment command is required for sensors. A Write TransducerChannel data-} \\
%      \multicolumn{7}{|l|}{set segment command is required for actuators. A Start Read TransducerChannel data-set segment and a Stop Read} \\
%      \multicolumn{7}{|l|}{TransducerChannel data-set segment commands are required for multimedia sensors.} \\
      \hline
   \end{tabular}
   \label{tab:TransducerOperatingStateCommands}
\end{table*}

Some sequence diagrams are shown below, presenting the exchange of messages between NCAP and TIM.
Figure~\ref{SequenceDiagramPollingMultimedia} presents the traditional approach when using polling mode, where NCAP need to send a request message for each response from TIM.
As multimedia sensors send a stream of data, with possibly a lot of packets, NCAP also has to send a huge number of requests.
In order to optimize this situation, Figure~\ref{SequenceDiagramPollingOptMultimedia} shows an alternative polling method, where NCAP must only send one command to start the stream (``Start Read TransducerChannel data-set segment'', Table~\ref{tab:TransducerOperatingStateCommands}) and another message to stop it (``Stop Read TransducerChannel data-set segment'', Table~\ref{tab:TransducerOperatingStateCommands}).
In the meantime, TIM is responsible for sending the multimedia data.
%In all cases, the beginning is the same, first WTIM registers to NCAP and the last one orders WTIM's TEDS as needed. Then, NCAP sends an ``operate'' command to put the TIM's TransducerChannel in operation.

\fig{.7}{SequenceDiagramPollingMultimedia}{Polling sequence diagram for WMSN.}

\fig{.7}{SequenceDiagramPollingOptMultimedia}{Optimized polling sequence diagram for WMSN.}

A sensor operating in TIM-IM mode must acquire data and transmit them to NCAP when desired, without the need to receive additional commands from NCAP.
Figure~\ref{SequenceDiagramTIM-IMMultimedia} presents the sequence diagram when using TIM Initiated Message method.
When the TransducerChannel is active and it needs to send multimedia information to NCAP, the sensor starts sending a command to prepare the other side (``Start Read TransducerChannel data-set segment''), then it sends the sensed data, ending with a stop message (``Stop Read TransducerChannel data-set segment'').
When working in TIM-IM mode, the start, read, and stop commands are sent using the ``TIM Initiated Message'' structure, as suggested in Section~\ref{sec:timim}.
Finally, the same optimization in TIM-IM presented in the previous Section can be performed here, resulting in Figure~\ref{SequenceDiagramTIM-IMOptMultimedia}.

\fig{.65}{SequenceDiagramTIM-IMMultimedia}{TIM Initiated Message sequence diagram for WMSN.}

\fig{.65}{SequenceDiagramTIM-IMOptMultimedia}{Optimized TIM Initiated Message sequence diagram for WMSN.}


\section{Results}
\label{sec:results}

In order to evaluate our proposals we have implemented and tested the strategies in real sensor nodes, EPOSMoteII.
The EPOSMoteII platform focus on modularization, and thus is composed by interchangeable modules for each function (processing/communication, sensing and power supply).
Figure~\ref{EPOSMote} shows the development kit which is slightly larger than a R\$1 coin.
The main module is responsible for processing, storage, and communication. The model used in this research features a 32-bit ARM7 processor, 128kB of flash, 96kB of RAM, and an IEEE 802.15.4-compliant radio transceiver.
The default sensoring module contains a temperature sensor and an accelerometer, leds, switches, and a micro USB (that can also be used as power supply).
In order to use a multimedia sensor, we have implemented an external audio board, which contains a microphone to capture surrounding audio.
%We validated the strategies proposed building a WSN following the IEEE 1451, deploying it in a mote platform called EPOSMoteII~\cite{Lisha:2010}.  Figure~\ref{EPOSMote} shows the development kit which is slightly larger than a R\$1 coin.  EPOSMoteII consists of a temperature sensor, making temperature measurements from -40$^o$C to 125$^o$C.  It was chosen because it focuses on modularization and have interchangeable modules for each function (processing/communication, sensing and power supply), facilitating the inclusion of IEEE 1451 standard.  In order to use a multimedia sensor, we implemented an external audio board, which contains a microphone to capture surrounding audio.

\fig{0.07}{EPOSMote}{EPOSMoteII SDK side-by-side with a R\$1 coin. On the left the expansion module. On the right the processing module.}

We used EPOS (Embedded Parallel Operating System)~\cite{Frohlich:2001} as our software platform, which is a component-based framework for generating dedicated runtime support environments, allowing programmers to develop platform-independent applications.
The EPOS Project aims at automating the development of embedded systems, allowing developers to concentrate on what really matters: their applications~\cite{Marcondes:2006}.

EPOS has a small memory footprint, a complete communication stack, and support for sensor networks.
The EPOS's runtime support environment for sensor network applications includes, besides the basic functions of an operating system running with limited resources, mechanisms for efficient power management, field reprogramming, uniform abstraction of heterogeneous sensor devices and configurable communication service through C-MAC (Configurable Media Access Control) protocol, thus fulfilling the specific requirements found in applications for WSN~\cite{Frohlich:2008}.
In addition, EPOS implements UDP/IP (User Datagram Protocol/Internet Protocol) and TCP/IP (Transmission Control Protocol/Internet Protocol), which are used in this work for communication between NCAP and TIM.
UDP/IP is used to transmit audio stream and TCP/IP to ensure the reliability of the other messages.
Finally, C-MAC can be configured to avoid idle listening through low power listening, where it periodically turns on the radio to check for channel activity, and if activity is detected, the radio is kept on to receive a packet, otherwise it is immediately turned off for some time~\cite{Steiner:2010}.
For all these reasons, EPOS was chosen for use in this work.

%The NCAP consists of a personal computer running the Linux operating system, and implemented using the C++ language. One of the characteristics required by the IEEE 1451.0 is that it must be possible to disconnect or connect a new TIM to the system, without any damage is suffered by the NCAP. This feature is referred to as Hot-Swap by the standard, and is implemented by this NCAP. Whenever a WTIM is turned on, it is automatically recognized and incorporated into the system and when it shutdown, no suffering is caused to the NCAP.

%Figure~\ref{MessageStructureFilled} shows the TIM-IM structure filled. As this test uses only one TransducerChannel, the value of the first field is equal to 1. Then there are two octets specifying the message's command type, filled with 3 and 1, indicating a ``transducer operating state'' command and ``read TransducerChannel data-set segment'' function. The data sets are composed of 10 temperature readings, each one containing a floating point number of 32 bits (4 bytes). Thus, for the length field is assigned the value 40. Finally, there are the 40 octets containing the readings sequence obtained by the temperature sensor.

%\fig{0.5}{MessageStructureFilled}{TIM Initiated Message format filled.}

The purpose of this evaluation is to determine the overhead of traditional operating mode (i.e. polling) versus TIM-IM, in accordance with the standard.
We have evaluated the strategies in terms of energy and memory consumption.
Figure~\ref{TestScenario1451} presents our test scenario.
%The test scenario is presented in Figure~\ref{TestScenario1451} and the energy evaluation results are shown in Figure~\ref{EnergyConsumption} and \ref{EnergyConsumptionMultimedia}.

\fig{0.7}{TestScenario1451}{IEEE 1451 test scenario.}

\fig{0.75}{EnergyConsumption}{Energy consumption for temperature sensor.}

In the first seconds, polling and TIM-IM have the same behavior, because of the time required for the sensor to self-identify and answer to the TEDS requests initiated by NCAP.
After that, the polling method, which implements low power listening with a timeout of 500 ms and a sleep period of 1000 ms (EPOS' default values), continues to consume a high amount of energy because it keeps the radio on during part of its time, waiting for messages.
In both TIM-IM method (optimized and not), the sensor can turn off the radio while collecting data, turning it on from time to time to send the information.
The optimized TIM-IM mode saves a little more energy because it does not send packets to connect and disconnect from TCP each time it will send the sensed data.

Figure~\ref{EnergyConsumption} shows the energy consumption for a temperature sensor.
In order not to favor any configuration, TransducerChannel collects a temperature sample every 10 seconds in all cases and, in TIM-IM mode, it sends autonomously when its buffer with 10 entries is full, i.e., every 100 seconds.
The polling method works similarly, but NCAP is responsible for sending a request every 100 seconds to TIM.
%The tests were performed having the same distance between NCAP and WTIM. %EPOSMoteII theoretical operating current is shown below:

%\begin{itemize}
% \item 29 mA: radio in TX mode
% \item 22 mA: radio in RX mode
% \item 3.3 mA: radio off, CPU running
% \item 0.85 mA: radio off, CPU idle
%\end{itemize}

The results show that after 1 hour running, TIM-IM method consumed less than half the amount of sensor's energy (129,83~J in optimized TIM-IM, 156,13~J in TIM-IM, and 316,96~J in polling).
This implies in a significant increase in the sensor battery lifetime.
Using more sophisticated techniques, such as sending data only when a temperature sample has changed compared to it previous value, easily done in software, would result in an even higher gain in situations where there is little variation in the sensed data.

Figure~\ref{EnergyConsumptionMultimedia} presents the energy consumption for a multimedia sensor.
In this experiment the sensor collects an audio sample every 127 microseconds, resulting in 7884 samples per second.
The node sends 27 packets per second, and each packet has 292 samples.
We used G.726 codec at 16 kbit/s, which represents an Adaptive Differential Pulse-Code Modulation (ADPCM) technique~\cite{G726:1990}.
Samples are sent for 5 seconds, following a pause of 5 seconds, forming a loop.
The four operation modes were implemented as proposed in this paper.
The consumption is higher here when compared to the temperature sensor due the amount of data being handled.
The audio sensor also performs a large number of ADC readings, and has to run the codec.
The difference between polling and TIM-IM modes is smaller here because the mote sends packets for 5 seconds at intervals of 5 seconds, while the temperature sensor sends only one packet at intervals of 100 seconds.
This way, the time the radio can stay off is smaller, which reduces the space for the optimization.

\fig{0.75}{EnergyConsumptionMultimedia}{Energy consumption for multimedia sensor.}

%Another problem related to wireless sensors is that they are usually resource-constrained embedded systems.
%Then, the programs must be small enough to fit them.
In order to analyze the memory footprint of our implementation, we have used the arm-size tool, from GNU Binutils version 2.20.
The results are shown in Table~\ref{tab:CodeSize}.
The first line, \textit{Temperature WTIM + EPOS}, shows the size of the EPOS operating system along with the temperature WTIM's implementation of IEEE 1451.
The second, \textit{Temperature WTIM}, presents the size of temperature WTIM only, without EPOS.
The next two lines show the results for audio WTIM, in a similar way.

\begin{table}[htpb] % [htb]-> here, top, bottom
  \centering   % tabela centralizada
  % tamanho da fonte \tiny \scriptsize \footnotesize \small \normalsize \large \Large \LARGE \huge \HUGE
  \setlength{\arrayrulewidth}{2\arrayrulewidth}  % espessura da linha
  %\setlength{\belowcaptionskip}{10pt}  % espa\c{c}o entre caption e tabela
  \caption{\it Memory footprint (in bytes).}
  \begin{tabular}{|c|c|c|c|c|} % c=center, l=left, r=right 
    \hline
    \multicolumn{1}{|c|}{\textbf{Section}} & \multicolumn{1}{|c|}{\textbf{.text}} & \multicolumn{1}{|c|}{\textbf{.data}} & \multicolumn{1}{|c|}{\textbf{.bss}} & \multicolumn{1}{|c|}{\textbf{TOTAL}} \\%& \multicolumn{1}{|c|}{\textbf{TCP/IP}}\\
    \hline \hline
    \textbf{Temperature WTIM + EPOS} & 56492 & 213 & 5280 & 61985 \\%& 18808 bytes \\
    \hline
    \textbf{Temperature WTIM} & 8320 & 0 & 4 & 8324 \\%& 108 bytes \\
    \hline
    \textbf{Audio WTIM + EPOS}  & 62812 & 213 & 5280 & 68305 \\%& 14 bytes \\
    \hline
    \textbf{Audio WTIM} & 9332 & 0 & 4 & 9336 \\%& 18930 bytes \\
    \hline
  \end{tabular}
  \label{tab:CodeSize}
\end{table}

%\begin{table*}[htpb] % [htb]-> here, top, bottom
%  \centering   % tabela centralizada
%  % tamanho da fonte \tiny \scriptsize \footnotesize \small \normalsize \large \Large \LARGE \huge \HUGE
%  \setlength{\arrayrulewidth}{2\arrayrulewidth}  % espessura da linha
%  %\setlength{\belowcaptionskip}{10pt}  % espa\c{c}o entre caption e tabela
%  \caption{\it Memory footprint.}
%  \begin{tabular}{|c|c|c|c|c|} % c=center, l=left, r=right 
%    \hline
%    \multicolumn{1}{|c|}{\textbf{Section}} & \multicolumn{1}{|c|}{\textbf{Temperature WTIM + EPOS}} & \multicolumn{1}{|c|}{\textbf{Temperature WTIM}} & \multicolumn{1}{|c|}{\textbf{Audio WTIM + EPOS}} & \multicolumn{1}{|c|}{\textbf{Audio WTIM}} \\%& \multicolumn{1}{|c|}{\textbf{TCP/IP}}\\
%    \hline \hline
%    .text & 56492 bytes & 8320 bytes & 62812 bytes & 9332 bytes \\%& 18808 bytes \\
%    \hline
%    .data & 213 bytes & 0 bytes & 213 bytes & 0 bytes \\%& 108 bytes \\
%    \hline
%    .bss  & 5280 bytes & 4 bytes & 5280 bytes & 4 bytes \\%& 14 bytes \\
%    \hline
%    TOTAL & 61985 bytes & 8324 bytes & 68305 bytes & 9336 bytes \\%& 18930 bytes \\
%    \hline
%  \end{tabular}
%  \label{tab:CodeSize}
%\end{table*}

\section{Conclusion}
\label{sec:conclusion}

%Wireless sensor networks usually have major restrictions when it comes to the amount of energy available, since they depend on limited energy sources and, additionally, must remain operational for a long period of time. Therefore, some applications choose to keep the sensor nodes in a state of dormancy, reconnecting them from time to time to perform the appropriate readings, process the data and communicate with other nodes~\cite{Mainwaring:2002}.

%This operation mode shows a trend where the motes are responsible for taking the initiative to communicate with the network gateway to which they belong, while this action is usually taken by NCAP in IEEE 1451~\cite{Lee:2007}. Therefore, this paper aims to develop a solution for using IEEE 1451 standard in WSNs where sensor nodes start the communication through the use of messages initiated by TIM, while maintaining the ability to add different types of motes due to the existence of standardization.
This paper presented a solution for using IEEE 1451 standard in WSNs where sensor nodes start the communication through the use of messages initiated by TIM, while maintaining the ability to add different types of motes due to the existence of standardization.

As a result, we adopted the structure ``TIM Initiated Message'' described by the standard (IEEE 1451.0~\cite{IEEE1451.0:2007}), filling the existing fields with the values as instructed by the command ``read TransducerChannel data-set segment''.
Con\-se\-quent\-ly, once placed the TransducerChannel into operation, the application must wait for samples obtained by the sensor and sent by WTIM to NCAP autonomously.

%The integration of low-power wireless networking technologies with inexpensive hardware, such as simple cameras and microphones, is now enabling the development of distributed, networked systems that we refer to as wireless multimedia sensor networks. WMSNs are wireless networks with interconnected smart devices that enable the retrieval of video and audio streams, still images, and scalar sensor data~\cite{Akyildiz:2007}. WMSNs are currently being used in several applications~\cite{AlNuaimi:2011} and then, they deserve special attention.

%IEEE 1451 does not handle multimedia sensors. Then, this paper also proposes an adaptation to IEEE 1451 aiming to allow its use in WMSN. It was achieved by some modifications. First, it was included some information in the \textit{TransducerChannel TEDS} data block structure, where a sensor can describe that its TransducerChannel sends multimedia data (audio or video stream). Second, the optional text-based \textit{Units Extension TEDS} was used to report some information about the audio or video stream sensed, such as the codec used by the sensor. Finally, in order to optimize the exchange of messages between NCAP and TIM, when using polling method, or aiming to notify NCAP when TIM will start/stop sending multimedia data, when using TIM-IM mode, the table with the commands used when the TransducerChannel is in operational state was extended.
We have also presented an adaptation to IEEE 1451 aiming to allow its use in WMSN.
First, we have included some information in the \textit{TransducerChannel TEDS} data block structure, where a sensor can describe that its TransducerChannel sends multimedia data (audio or video stream).
Second, the optional text-based \textit{Units Extension TEDS} was used to report some information about the audio or video stream sensed, such as the codec used by the sensor.
%Finally, in order to optimize the exchange of messages between NCAP and TIM, when using polling method, or aiming to notify NCAP when TIM will start/stop sending multimedia data, when using TIM-IM mode, the table with the commands used when the TransducerChannel is in operational state was extended.
Finally, in order to optimize the exchange of messages between NCAP and TIM, we have extended the table with the commands used when the TransducerChannel is in operational state.
%when using polling method, or aiming to notify NCAP when TIM will start/stop sending multimedia data, when using TIM-IM mode, the table with the commands used when the TransducerChannel is in operational state was extended.

We validated the proposed solutions by building a WSN and WMSN IEEE 1451-compliant, using the EPOSMoteII platform.
%Our mote contains a temperature sensor and in order to use as a multimedia sensor, we implemented an external audio board, which contains a microphone to capture surrounding audio.
We have measured the energy and memory consumption, comparing polling and TIM-IM modes.
The TIM-IM approach significantly increased the sensor battery's lifetime.
The results show that after 1 hour running, the TIM-IM method consumed less than half the amount of sensor's energy compared with the polling method for the temperature sensor.
The difference was smaller for the multimedia sensor, but still the TIM-IM mode presented better results.

\bibliographystyle{IEEEtran}
\bibliography{artigo_ieee1451}

\end{document}
