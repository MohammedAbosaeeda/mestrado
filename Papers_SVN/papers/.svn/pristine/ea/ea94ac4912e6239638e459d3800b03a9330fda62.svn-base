% ------------------------------------------------------------------------------
\section{Introduction} \label{intro}
% + Introduction
% Presents ME, remember it is widely used for video encoding, including H.264.
% Remember why it is important (consumes around 90% of the total encoding time).
% Therefore is necessary to optimize ME, and there are many strategies for that:
% algorithmic optimizations, parallelization of algorithms, and hardware implementations of algorithms.
%
% Say many works are worried about optimization but not with engineering.
% Present our work as an ME optimization strategy based on picture partitioning (parallel algorithms).
% Say we have modeled and implemented a component which realizes such optimization: DMEC.
% Say that using a careful design based on domain engineering we can produce a
% component which has the same interface for several implementations.
% Say we have implemented such component for CellBE, Multicore IA32, and, using
% High Level Synthesis, a dedicated hardware version of the component.
%
% 
% The very first letter is a 2 line initial drop letter followed
% by the rest of the first word in caps.
%
% form to use if the first word consists of a single letter:
% \IEEEPARstart{A}{demo} file is ....
%
% form to use if you need the single drop letter followed by
% normal text (unknown if ever used by IEEE):
% \IEEEPARstart{A}{}demo file is ....
%
% Some journals put the first two words in caps:
% \IEEEPARstart{T}{his demo} file is ....
%
% Here we have the typical use of a "T" for an initial drop letter
% and "HIS" in caps to complete the first word.
% \IEEEPARstart{T}{his} demo file is intended.

% + Presents ME, remember it is widely used for video encoding, including H.264.
\IEEEPARstart{M}{otion} Estimation (ME) is a technique used to explore temporal
redundancy in video sequences during compression.
Temporal redundancy arises from the fact that neighboring frames often
share similar regions of pixels.
Therefore, the goal of ME is to \emph{estimate} the shifting of
such similar regions across neighbor frames, thus allowing for a difference-based 
encoding.
%thus enabling them to be
%differentially encoded.
In block-based ME, the displacement of similar regions is represented by
\emph{motion vectors}, which are computed by
\emph{Block-Matching Algorithms}.
Standards like the ISO MPEG series and the ITU-T H26x are examples of encoders
that use ME to improve the compression ratio of video streams~\cite{citeulike:1269699}.
In fact, about 90\% of the total encoding time in a H.264 encoder is spent in the
ME stage \cite{XiangLi:2004}, \cite{Yang:2005}.
Consequently, ME optimization is a relevant issue for H.264 and
video encoding in general.

% + Remember why it is important (consumes around 90% of the total encoding time).
% Therefore is necessary to optimize ME, and there are many strategies for that:
% algorithmic optimizations, parallelization of algorithms, and hardware
% implementations of algorithms.

Many strategies have been proposed for ME optimization.
These strategies can be divided in three categories: 
algorithmic optimizations \cite{Ludwich:WebMedia:2011, SunNingning:TSS:2009, ShipingZhu:DS:2009};
parallelization of algorithms \cite{ChiaChunLin:PMRME:2007, HoyoungChang:HW:2009}; and
dedicated hardware implementations \cite{HaibingYin:HW:2010, HoyoungChang:HW:2009}.
The search for new methods to optimize the ME process is an important issue
to enable either the construction of real-time H.264 encoders or their implementation
in devices with limited computational resources, since these
optimizations aim to reduce ME complexity. 

The wide range of computer architectures available for the deployment of video encoders
also spans a myriad of optimized implementations of encoding algorithms
\cite{ChiaChunLin:PMRME:2007, HoyoungChang:HW:2009, HaibingYin:HW:2010}. In such scenario, keeping a
homogeneous interface for encoding and 
decoding components allows for the use new optimized versions of algorithms (e.g. ME) 
without the need of modifying the whole encoder/decoder design and also maintaining compatibility
with video coding standards.


% Present our work as a solution for keeping interfaces
% Present our work as an ME optimization strategy based on picture partitioning
%  (parallel algorithms).
%  ...
In this paper, we show how a careful domain engineering design process can be used 
to produce a ME component which has the same interface for different implementations.
Our \emph{Distributed Motion Estimation Component} (DMEC) uses an optimization strategy based on
picture partitioning, executing ME in parallel on distinct functional units.
In order to demonstrate the reusability provided by DMEC's interfaces, we provide implementations
for three distinct computer architectures: the Cell Broadband Engine (Cell BE), an Intel IA32 
Multicore Architecture, and a dedicated hardware generated using high-level synthesis (HLS).
All implementations of DMEC have the same interfaces and can be used
without modifications by an H.264 encoder. 
For each implementation of DMEC we have evaluated the
encoding time and
objective  quality, which is measured by the Peak Signal-to-noise Ratio (PSNR).

% + paper structure(chapters' description)
The remaining of this paper are organized as follows:
Section~\ref{sota} makes an overview of issues and strategies for
ME optimization; % ?[and reviews techniques about designing for interfaces]
Section~\ref{dmec} presents DMEC and how it was designed;
Section~\ref{impl} describes the implementations of DMEC for Cell BE,
Multicore IA32, and dedicated hardware;
Section~\ref{eval} evaluates DMEC in isolation and integrated to the standard
H.264 encoder - JM;
Section~\ref{concl} closes the paper with our final considerations.

% ------------------------------------------------------------------------------
