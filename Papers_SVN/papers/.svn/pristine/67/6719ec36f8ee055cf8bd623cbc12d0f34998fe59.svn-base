%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% OS  by Geovani Ricardo Wiedenhoft
% Email: grw at lisha.ufsc.br
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% Gregor Kiczales


@INPROCEEDINGS{Kiczales:1997,
  AUTHOR = {Gregor Kiczales and John Lamping and Anurag Mendhekar
                  and Chris Maeda and Cristina Videira Lopes and
                  Jean-Marc Loingtier and John Irwin},
  TITLE = {{Aspect-Oriented Programming}},
  BOOKTITLE = {Proceedings of the European Conference on
                  Object-oriented Programming'97},
  ADDRESS = {Jyväskylä, Finland},
  SERIES = {Lecture Notes in Computer Science},
  VOLUME = 1241,
  PAGES = {220--242},
  PUBLISHER = {Springer},
  MONTH = JUN,
  YEAR = 1997,
  URL = {http://www.parc.xerox.com/csl/groups/sda/publications/papers/Kiczales-ECOOP97/for-web.pdf},
  ABSTRACT = {We have found many programming problems for which
                  neither procedural nor object-oriented programming
                  techniques are sufficient to clearly capture some of
                  the important design decisions the program must
                  implement. This forces the implementation of those
                  design decisions to be scattered through-out the code,
                  resulting in 'tangled' code that is excessively
                  difficult to develop and maintain. We present an
                  analysis of why certain design decisions have been so
                  difficult to clearly capture in actual code. We call
                  the properties these decisions address aspects, and
                  show that the reason they have been hard to capture is
                  that they cross-cut the system's basic
                  functionality. We present the basis for a new
                  programming technique, called aspect-oriented
                  programming, that makes it possible to clearly express
                  programs involving such aspects, including appropriate
                  isolation, composition and re-use of the aspect
                  code. The discussion is rooted in systems we have
                  built using aspect-oriented programming.}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Daniel Lohmann


@INPROCEEDINGS{Lohmann:2005a,
  AUTHOR = {Daniel Lohmann and Wolfgang Schr\"{o}der-Preikschat and
                  Olaf Spinczyk},
  TITLE = {Functional and Non-Functional Properties in a Family
                  of Embedded Operating Systems},
  BOOKTITLE = {Proceedings of the Tenth IEEE International Workshop
                  on Object-oriented Real-time Dependable Systems},
  YEAR = {2005},
  ADDRESS = {Sedona, USA},
  MONTH = {Feb},
  PUBLISHER = {IEEEPress},
  PDF = {../cache/Operating_Systems/WORDS05_Lohmann.pdf}
}

