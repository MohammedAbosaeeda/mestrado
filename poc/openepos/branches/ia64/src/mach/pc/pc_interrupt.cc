// EPOS PC Interrupt Dispatcher

#include <mach/pc/ic.h>

__BEGIN_SYS

void PC_IC::int_dispatch()
{
    // id must be static because we don't have a stack frame
    static int id;
    static void* int_vector_ptr = _int_vector;

    ASM("	.align 16					\n"
	"	movq	$0, %0					\n"
	"	jmp	.L1							\n"
	"	.align 16						\n"
	"	movq	$1, %0					\n"
	"	jmp	.L1							\n"
	"	.align 16						\n"
	"	movq	$2, %0					\n"
	"	jmp	.L1							\n"
	"	.align 16						\n"
	"	movq	$3, %0					\n"
	"	jmp	.L1							\n"
	"	.align 16						\n"
	"	movq	$4, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$5, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$6, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$7, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$8, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$9, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$10, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$11, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$12, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$13, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$14, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$15, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$16, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$17, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$18, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$19, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$20, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$21, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$22, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$23, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$24, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$25, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$26, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$27, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$28, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$29, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$30, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$31, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$32, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$33, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$34, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$35, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$36, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$37, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$38, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$39, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$40, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$41, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$42, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$43, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$44, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$45, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$46, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$47, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$48, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$49, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$50, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$51, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$52, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$53, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$54, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$55, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$56, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$57, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$58, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$59, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$60, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$61, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$62, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$63, %0					\n"
	"	jmp	.L1					\n"
	"	.align 16					\n"
	"	movq	$64, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movq	$65, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movq	$66, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movq	$67, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$68, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$69, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$70, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$71, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$72, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$73, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$74, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$75, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$76, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$77, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$78, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$79, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$80, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$81, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$82, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$83, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$84, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$85, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$86, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$87, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$88, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$89, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$90, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$91, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$92, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$93, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$94, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$95, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$96, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$97, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$98, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$99, %0					\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$100, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$101, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$102, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$103, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$104, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$105, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$106, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$107, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$108, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$109, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$110, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$111, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$112, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$113, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$114, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$115, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$116, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$117, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$118, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$119, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$120, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$121, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$122, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$123, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$124, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$125, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$126, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$127, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$128, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$129, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$130, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$131, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$132, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$133, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$134, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$135, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$136, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$137, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$138, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$139, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$140, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$141, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$142, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$143, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$144, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$145, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$146, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$147, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$148, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$149, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$150, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$151, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$152, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$153, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$154, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$155, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$156, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$157, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$158, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$159, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$160, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$161, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$162, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$163, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$164, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$165, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$166, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$167, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$168, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$169, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$170, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$171, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$172, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$173, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$174, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$175, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$176, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$177, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$178, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$179, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$180, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$181, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$182, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$183, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$184, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$185, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$186, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$187, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$188, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$189, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$190, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$191, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$192, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$193, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$194, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$195, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$196, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$197, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$198, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$199, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$200, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$201, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$202, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$203, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$204, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$205, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$206, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$207, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$208, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$209, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$210, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$211, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$212, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$213, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$214, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$215, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$216, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$217, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$218, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$219, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$220, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$221, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$222, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$223, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$224, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$225, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$226, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$227, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$228, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$229, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$230, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$231, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$232, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$233, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$234, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$235, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$236, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$237, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$238, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$239, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$240, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$241, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$242, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$243, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$244, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$245, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$246, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$247, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$248, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$249, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$250, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$251, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$252, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$253, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$254, %0				\n"
// 	"	jmp	.L1					\n"
// 	"	.align 16					\n"
// 	"	movl	$255, %0				\n"
	".L1:								\n"
    // TODO: Review this solution. The problem is that there's no pusha in x64.
    //       Also, how to deal with that on both archs?
	"	pushq %%rax						\n"
	"	pushq %%rbx						\n"
	"	pushq %%rcx						\n"
	"	pushq %%rdx						\n"
	"	pushq %%rbp						\n"
	"	pushq %%rdi						\n"
	"	pushq %%rsi						\n"
	"	pushq %%r8						\n"
	"	pushq %%r9						\n"
	"	pushq %%r10						\n"
	"	pushq %%r11						\n"
	"	pushq %%r12						\n"
	"	pushq %%r13						\n"
	"	pushq %%r14						\n"
	"	pushq %%r15						\n"
 	: : "m"(id));

    ASMV(
	"	call   *%2					\n"

	// TODO: Warning: argument passing in x64 is partially done with registers.
	//       So this should be reviewed when merging with 32bit code. This one may
	//       be anoying. An idea is to move this to CPU mediator. Actually, this
	//       whole function should be implemented with CPU mediators!
	//    "	push   %%rdi				\n"
	"	movq    %0, %%rdi			\n"

	"   movq    %0, %%rax           \n" // rax = <id>
	"   movq    $8, %%r8            \n" // r8 = 8
	"   mulq    %%r8                \n" // rax *= r8
	"   addq    %1, %%rax           \n" // rax += <int_vect_ptr>
	"   movq    (%%rax), %%rax      \n" // rax = *rax

    "   call    *%%rax              \n"

	// TODO: Review this solution. The problem is that there's no popa in x64.
	//       Also, how to deal with that on both archs?
	"	popq    %%r15				\n"
	"	popq    %%r14				\n"
	"	popq    %%r13				\n"
	"	popq    %%r12				\n"
	"	popq    %%r11				\n"
	"	popq    %%r10				\n"
	"	popq    %%r9				\n"
	"	popq    %%r8				\n"
	"	popq    %%rsi				\n"
	"	popq    %%rdi				\n"
	"	popq    %%rbp				\n"
	"	popq    %%rdx				\n"
	"	popq    %%rcx				\n"
	"	popq    %%rbx				\n"
	"	popq    %%rax				\n"

    // TODO: There are three instructions for iret: iret, iretd and iretq.
    //       This is a mess, because if you use the wrong one here, bad things
    //       will happen. Seriously, this function REALLY NEEDS to be done with
    //       some kind of mediator!!
//	"	iret						\n"
	"	iretq						\n"

    // TODO: Review the second parameter. Originally, it used "r", and I
    //       changed to "m". Maybe we can use some other register, but I see no
    //       problem leaving this way. I think the problem is caused by all the
    //       new memory pushes, but I can't be certain yet.
    //       Need more investigation.
 	: : "m"(id), "m"(int_vector_ptr), "r"(PC_IC::eoi));
}

__END_SYS
