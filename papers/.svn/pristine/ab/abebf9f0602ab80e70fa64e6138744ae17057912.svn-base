\section{Introduction}


%- Gerência de energia é importante para sistemas embarcados

%Sistemas embarcados são plataformas computacionais dedicados a executar um determinado conjunto de tarefas com objetivos específicos, como monitorar e/ou controlar os ambientes nos quais estão inseridos. Normalmente, esses sistemas apresentam rigorosas limitações em termos das capacidades de processamento e de memória. Além disso, muitos deles, devido à natureza móvel das suas aplicações, são alimentados por baterias com uma limitada carga de energia. Essas limitações fazem com que uma gerência eficiente do consumo de energia e que não ocasione interferência significativa na execução da aplicação seja utilizada.

Embedded systems are computational platforms dedicated to execute an usually
known set of tasks with specific objectives. Typically, these systems present
severe limitations in terms of processing and memory capabilities. Some of them,
due to the mobile nature of their applications, are also powered by batteries
with a limited level of energy. Considering all
these limitations, it is important for the mobile embedded system to
be able to manage energy consumption without compromising system's
performance.


%- Gerência em outros trabalhos (economizam energia). Nao eh suficiente...

%O \emph{hardware} dos sistemas embarcados disponibiliza diferentes mecanismos para realizar a gerência do consumo de energia. Dentre eles, os mais conhecidos são as técnicas de \textsc{DVS} (Dynamic Voltage Scaling)~\cite{Pouwelse:2001,Weiser:1994} e hibernação de recursos~\cite{Kravets:1998,Helmbold:1996,Flinn:1999}. Alguns trabalhos na literatura exploram a integração dessas técnicas com abordagens que garantem \QoS{} (\qos{}). A maioria dessas abordagens, entretanto, apenas busca minimizar o consumo de energia com o foco principal nas métricas tradicionais de \qos{}, como para processamento, memória e comunicação. Como apresentado em um trabalho anterior~\cite{Wiedenhoft:WTR:2007}, nós argumentamos que não é suficiente apenas garantir métricas tradicionais de \qos{} se a carga da bateria termina antes do término das tarefas.


Embedded systems hardware can rely on several mechanisms to manage energy
consumption. Among them, are techniques of \textsc{DVS} (Dynamic
Voltage Scaling)~\cite{Pouwelse:2001,Weiser:1994} and resources
hibernation~\cite{Kravets:1998,Helmbold:1996,Flinn:1999}. Some works in the
literature explore the integration of these techniques with approaches that
guarantee \QoS{} (\qos{}). Most of these approaches, however, only seek to
minimize energy consumption with the main focus on traditional \qos{}
metrics for processing, memory and communication. In a previous
work~\cite{Wiedenhoft:WTR:2007}, we argue that it is not enough just ensure
traditional \qos{} metrics if, by doing so, the system runs out of
battery and is unable to complete its computations.



%- Neste trabalho a idéia é utilizar a energia como parâmetro de QoS (citar meus artigos) para atender o tempo de duração do sistema e além disso atender os \deadlines{} temporais das tarefas de tempo real.
%Nos propomos, também, a garantir os \deadlines{} das tarefas \emph{hard} pela sua importância em sistemas embarcados de tempo real. 

%Nós utilizamos a energia como um parâmetro de \qos{} para atender o tempo de duração da bateria especificado pelo usuário, ou seja, \qos{} em termos de energia. Neste trabalho, o objetivo não é minimizar o consumo de energia, mas otimizar a funcionalidade do sistema, atendendo a energia e os \deadlines{} das tarefas \emph{hard} de tempo real. A abordagem proposta espera que o programador defina o período que o sistema embarcado deve estar operacional. Através do monitoramento do tempo de vida da bateria, um escalonador é capaz de selecionar as tarefas para serem executadas ou pode diminuir os níveis de \qos{} para reduzir o consumo de energia e aumentar o tempo de vida da bateria.

%We propose to guarantee the hard real time tasks deadlines for their importance in real time embedded systems. The purpose of this approach is to ensure the energy and the hard real time tasks deadlines, not with the goal of minimize energy consumption, but improve the system functionality.


We consider energy as a \qos{} parameter to meet the battery lifetime 
specified by the system developer, thus using \qos{} in terms of energy. 
In this work, the goal is not
only to reduce energy consumption, but to improve the application functionality
in a system with limited energy charge, 
ensuring the battery lifetime and the deadlines of hard real-time tasks. 
The proposed approach expects the
developer to define the period that the embedded system must be operational. By
monitoring battery lifetime, the scheduler is able to select the tasks that
will be executed or it can decrease \qos{} levels in order to reduce energy
consumption and enhance system lifetime.



%- Como fazer? - usando técnicas da computação imprecisa (explicar o que é)

%Para alcançar nosso objetivo, o controle de \qos{} foi inspirado na computação imprecisa~\cite{Liu:1994,Lin:1987a,Lin:1987b}. A computação imprecisa divide as tarefas em duas partes: uma com o fluxo obrigatório e outra com o fluxo opcional. O fluxo obrigatório é a parte \emph{hard} da tarefa, e deve sempre ser executado com o seu \deadline{} atendido. O fluxo opcional é a parte ``melhor esforço'' da tarefa, e caso seja necessário, é possível que não seja executado. A partir desse conceito de divisão, o escalonador da computação imprecisa impede a execução das partes opcionais quando existe a possibilidade do \deadline{} de alguma parte obrigatória não ser atendido, e assim, reduz a demanda por processamento do sistema. No nosso escalonador, além dessa possibilidade, propomos que as partes opcionais não sejam escalonadas quando o nível de energia não será suficiente para atender o tempo especificado pela aplicação. Esse controle cria períodos ociosos no sistema, que permite ao escalonador usar técnicas de gerência de energia para diminuir o consumo dos componentes durante os períodos ociosos criados.

To achieve the proposed goal, the \qos{} control of applications was inspired by
imprecise computation~\cite{Liu:1994,Lin:1987a,Lin:1987b}. Imprecise computation
divides tasks into two subtasks: one implementing a mandatory execution flow 
and another implementing an optional flow. The mandatory flow is the hard
real-time part of the task, and it must always be executed with its deadline. 
The optional flow is the \emph{best-effort} part of the task, which is only
executed if the desired timing requirements can be met. 
%and if necessary, it can be prevented from executing. 
The imprecise computation scheduler does not execute 
%prevents the execution of 
the optional subtasks when there is the possibility of any 
mandatory subtask deadline to be lost, thus reducing the demand for 
system processing. 
Moreover, in our scheduler, we propose that the optional subtasks
be prevented from executing when the energy level will not be sufficient to
meet the time specified by application. This control creates more idle periods
in the system, and the scheduler can use power management techniques
to reduce the energy consumption of components during these idle periods.


%- Protótipo no EPOS e escalonador EDF...

%O escalonador proposto é baseado no escalonador \textsc{EDF} (\emph{Earliest Deadline First})~\cite{Liu:1973} para garantir os \deadlines{} das tarefas, no qual as tarefas com maiores \deadlines{} possuem menores prioridades. Um protótipo desta proposta foi implementado no \epos{}~\cite{Marcondes:ETFA:2006}, um sistema operacional embarcado baseado em componentes. \epos{} disponibiliza um conjunto de mecanismos para a gerência do consumo de energia, desde uma infra-estrutura que permite as aplicações realizarem a apropriada gerência~\cite{Hoeller:DIPES:2006}, até um gerente com diferentes modos de operação que realiza a gerência para a aplicação~\cite{Wiedenhoft:ETFA:2007}. Além desses mecanismos, o \epos{} possui um sistema de monitoramento da carga da bateria, que informa a energia restante.

The proposed scheduler is based on \textsc{EDF} (\emph{Earliest Deadline
First})~\cite{Liu:1973} scheduler, 
%to guarantee the tasks deadlines, 
which the tasks with the lowest deadlines have the highest priorities. 
A prototype of this
proposal was implemented in \epos{}~\cite{Marcondes:ETFA:2006}, a
component-based embedded operating system. \epos{} provides a set of mechanisms
for power management, such as an infrastructure which allows applications to
achieve appropriate power management~\cite{Hoeller:DIPES:2006} and a power
manager with different operating modes that realize power management for
application~\cite{Wiedenhoft:ETFA:2007}. Moreover, \epos{} provides a battery
monitoring system, which informs the remaining energy in the platform.

%- Divisão das seções

%Este artigo é estruturado como segue. Seção~\ref{sc:relacionados} apresenta os trabalhos relacionados. Seção~\ref{sc:proposta} descreve o escalonador desenvolvido neste trabalho, com a sua devida formalização. Seção~\ref{sc:implementacao} abrange a implementação do ambiente da computação imprecisa e do escalonador proposto no sistema operacional embarcado escolhido. Seção~\ref{sc:conclusao} finaliza com a conclusão do artigo. 
%e apresenta as  futuras direções para este trabalho.

This paper is structured as follows. Section~\ref{sc:relacionados} gives an
insight on related work. Section~\ref{sc:proposta} describes the proposed 
scheduler, along with its formalization. Section~\ref{sc:implementacao}
presents notes on the implementation of the imprecise computing environment and the
scheduler in the \textsc{Epos} operating system. Section~\ref{sc:conclusao}
finalizes with the conclusion of the article.


