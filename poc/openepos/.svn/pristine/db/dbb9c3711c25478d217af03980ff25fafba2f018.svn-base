
options {
	STATIC = false;
}

PARSER_BEGIN(KesoFilterReader)

package keso.editor.filter.manager.reader;

import java.util.Vector;
import keso.editor.filter.manager.*;
import keso.editor.filter.*;
import java.io.FileInputStream;

public class KesoFilterReader {
	public static void parseFile(String filename) throws Exception {
		KesoFilterReader parser = null;
		try {
			parser = new KesoFilterReader(new FileInputStream(filename));
		} 
		catch (FileNotFoundException ex) {
        	throw new Exception(ex.toString());
        }
		catch (Exception ex) {
			ex.printStackTrace();
			throw new Exception(ex.toString());
		}

		try {
			parser.start();
		} catch (Exception ex) {
			throw new Exception(ex.toString());
		}
	}
}

PARSER_END(KesoFilterReader)

SKIP : { " " | "\t" | "\r" | "\n" }

TOKEN : {
	<LINECOMMENT: "#" (~["\n"])*> |
	<FILTER: "Filter"> |
	<COMBINEDFILTER: "CombinedFilter"> |
	
	<WITHOUT_CLASS_TYPE : (	"GET_ALL" |
							"GET_NEXT_PARENT" |
							"GET_ALL_CHILDREN" |
							"GET_NEXT_CHILDREN" |
							"DELETE_REDUNDANT_NAMES" |
							"DELETE_REDUNDANT_OBJECTS" |
							"DELETE_REDUNDANT_NAMES_OF_SAME_CLASSGROUP")	> |					
	<TWO_STAGE_OPERATION: ("UNITE"|"SUBSTRACT")> |
	<GET_PARENT_OF_TYPE: "GET_PARENT_OF_CLASSTYPE"> |
	<FILTER_BY_CLASSTYPE: "FILTER_BY_CLASSTYPE"> |
	
	<IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)*> |
	<NUMBER: (<DIGIT>)+> |
	<LETTER: ["a"-"z","A"-"Z","_","/"]> |
	<DIGIT: ["0"-"9"]> |
	<LBRACE: "{"> |
	<RBRACE: "}"> |
	<DQUOTE: "\""> |
	<LBRACKET: "["> |
	<RBRACKET: "]"> |
	<SEMICOLON: ";"> |
	<COMMA: ","> |
	<ASSIGNMENT: "="> |
	<DOT: "."> |
	<LPAREN: "("> |
	<RPAREN: ")">
}

void start() : {
	Token filtername;
} {
	(
		(<LINECOMMENT>)*
		filtername = <IDENTIFIER>
		<ASSIGNMENT>
		(
			(
				<FILTER><LPAREN>
				{
					parseFilter(filtername.image);
				}
				<RPAREN>
			) | (
			<COMBINEDFILTER><LPAREN>
				{
					parseTwoStageFilter(filtername.image);
				}
				<RPAREN>
			)
		)
		<SEMICOLON>
	)*<EOF>
}

void parseFilter(String filtername) : {
} {
	(parseDataFilter(filtername) | parseFilterFilter(filtername))
}


void parseDataFilter(String filtername) : {
	Token operation;
	Token classtype;
	KesoFilter filter;
} {
	(
		(
			operation = <WITHOUT_CLASS_TYPE>
			{
				filter = new KesoFilter();
				filter.setRoot();
				filter.setOperation(operation.image);
				KesoFilterManager.add(filtername, filter);
			}
		) | (
			operation = <GET_PARENT_OF_TYPE> 
			<COMMA>
			classtype = <IDENTIFIER>
			{
				filter = new KesoFilter();
				filter.setRoot();
				filter.setOperation(operation.image);
				filter.addClassType(classtype.image);
				KesoFilterManager.add(filtername, filter);
			}
		)
	)
}

void parseFilterFilter(String filtername) : {
	Token subfilter;
	Token operation;
	Token classtype;
	Vector classtypes;
	KesoFilter filter;
} {
	subfilter = <IDENTIFIER>
	<COMMA>
	(
		(
			operation = <WITHOUT_CLASS_TYPE>
			{
				filter = new KesoFilter();
				filter.setFirstFilter(subfilter.image);
				filter.setOperation(operation.image);
				KesoFilterManager.add(filtername, filter);
			}
		) | (
			operation = <GET_PARENT_OF_TYPE> 
			<COMMA>
			classtype = <IDENTIFIER>
			{
				filter = new KesoFilter();
				filter.setFirstFilter(subfilter.image);
				filter.setOperation(operation.image);
				filter.addClassType(classtype.image);
				KesoFilterManager.add(filtername, filter);
			}
		) | (
			operation = <FILTER_BY_CLASSTYPE> 
			<COMMA>
			<LBRACE>
			{
				filter = new KesoFilter();
				filter.setFirstFilter(subfilter.image);
				filter.setOperation(operation.image);
				parseClassTypes(filter);
				KesoFilterManager.add(filtername, filter);
			}
			<RBRACE>
		)	
	)
}

void parseTwoStageFilter(String filtername) : {
	Token firstname;
	Token secondname;
	Token operation;
	KesoFilter filter;
} {
	firstname = <IDENTIFIER>
	<COMMA>
	secondname = <IDENTIFIER>
	<COMMA>
	operation = <TWO_STAGE_OPERATION>
	{
		filter = new KesoFilter();
		filter.setFirstFilter(firstname.image);
		filter.setSecondFilter(secondname.image);
		filter.setOperation(operation.image);
		KesoFilterManager.add(filtername, filter);
	}
}

void parseClassTypes(KesoFilter filter) : {
	Token classtype;
} {
	classtype = <IDENTIFIER>
	{
		filter.addClassType(classtype.image);
	}
	(
		<COMMA>
		classtype = <IDENTIFIER>
		{
			filter.addClassType(classtype.image);
		}	
	)*
}