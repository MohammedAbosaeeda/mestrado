/* Generated By:JavaCC: Do not edit this line. KesoParameterReader.java */
package keso.editor.gui.compilation.parameter.reader;

import java.util.Vector;
import keso.editor.gui.compilation.parameter.*;
import java.io.StringReader;

public class KesoParameterReader implements KesoParameterReaderConstants {
        public static void parseFile(String parameterlist) throws Exception {
                KesoParameterReader parser = null;
                try {
                        parser = new KesoParameterReader(new StringReader(parameterlist));
                } catch (Throwable ex) {
                        ex.printStackTrace();
                        throw new Exception(ex);
                }

                try {
                        parser.start();
                } catch (Throwable ex) {
                        ex.printStackTrace();
                        throw new Exception(ex);
                }
        }

  final public void start() throws ParseException {
        Token possiblevalue;
        Vector possiblevalues = new Vector();

        Token name;

        Token sep;
        String separator = "";

        Token propertydescription;
        StringBuffer description = new StringBuffer();

        Token value;
        String defaultvalue = null;

        String type = null;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESCRIPTION:
      case LINECOMMENT:
      case STRING:
      case BOOLEAN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
                        description = new StringBuffer();
                        possiblevalues = new Vector();
                        separator = "";
                        defaultvalue = null;
                        type = null;
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DESCRIPTION:
        case LINECOMMENT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DESCRIPTION:
          propertydescription = jj_consume_token(DESCRIPTION);
                                        if (description == null) {
                                                description = new StringBuffer();
                                        } else {
                                                if (description.length() != 0) {
                                                        description.append(" ");
                                                }
                                        }
                                        propertydescription.image = propertydescription.image.trim();
                                        propertydescription.image = propertydescription.image.substring(1);
                                        if (propertydescription.image.length() != 0) {
                                                description.append(propertydescription.image);
                                        }
          break;
        case LINECOMMENT:
          jj_consume_token(LINECOMMENT);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
                                        type = "string";
        name = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGNMENT:
          jj_consume_token(ASSIGNMENT);
          jj_consume_token(LBRACE);
          possiblevalue = jj_consume_token(IDENTIFIER);
                                                        possiblevalues.add(possiblevalue.image);
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[3] = jj_gen;
              break label_3;
            }
            jj_consume_token(COMMA);
            possiblevalue = jj_consume_token(IDENTIFIER);
                                                                possiblevalues.add(possiblevalue.image);
          }
          jj_consume_token(RBRACE);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEFSEPARATOR:
          jj_consume_token(DEFSEPARATOR);
          sep = jj_consume_token(IDENTIFIER);
                                                if (sep.image.equals("blank")) {
                                                        separator = " ";
                                                } else if (sep.image.equals("colon")) {
                                                        separator = ":";
                                                } else if (sep.image.equals("assignment")) {
                                                        separator = "=";
                                                }
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
                                        type = "boolean";
        name = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFAULTVALUE:
        jj_consume_token(DEFAULTVALUE);
        value = jj_consume_token(IDENTIFIER);
                                defaultvalue = value.image;
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
                        KesoParameterList.add(description.toString(), type, name.image, separator, possiblevalues, defaultvalue);
    }
  }

  public KesoParameterReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x660,0x60,0x60,0x200000,0x400000,0x100,0x600,0x80,};
   }

  public KesoParameterReader(java.io.InputStream stream) {
     this(stream, null);
  }
  public KesoParameterReader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KesoParameterReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public KesoParameterReader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KesoParameterReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public KesoParameterReader(KesoParameterReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(KesoParameterReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[26];
    for (int i = 0; i < 26; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
