%ctypes=(
    'IMAConstant' => 1, 'IMDConstant' => 1, 'IMFConstant' => 1,
    'IMIConstant' => 1, 'IMLConstant' => 1, 'IMNullConstant' => 1,
    'IMAMemConstant' => 1, 'IMAMTConstant' => 1,
	);

%bctypes = (
   'I' => 'BCBasicDatatype.INT',  
   'L' => 'BCBasicDatatype.LONG', 
   'F' => 'BCBasicDatatype.FLOAT', 
   'D' => 'BCBasicDatatype.DOUBLE',
   'A' => 'BCBasicDatatype.REFERENCE', 
   'B' => 'BCBasicDatatype.BYTE', 
   'C' => 'BCBasicDatatype.CHAR', 
   'S' => 'BCBasicDatatype.SHORT', 
   'Z' => 'BCBasicDatatype.BOOLEAN', 
   '-' => 'BCBasicDatatype.RETURN_ADDRESS', 
   'U' => 'BCBasicDatatype.VOID', 
   'X' => 'BCBasicDatatype.UNKNOWN_TYPE', 
);

%jtypes = (
   'I' => 'int',  
   'L' => 'long', 
   'F' => 'float', 
   'D' => 'double',
   'A' => 'ConstantPoolEntry', 
   'B' => 'byte', 
   'C' => 'char', 
   'S' => 'short', 
   'Z' => 'boolean', 
   '-' => 'void', 
   'U' => 'void', 
   'X' => 'void', 
);

%jtypes_uppercase = (
   'I' => 'Int',  
   'L' => 'Long', 
   'F' => 'Float', 
   'D' => 'Double',
   'A' => 'ConstantPoolEntry', 
   'B' => 'Byte', 
   'C' => 'Char', 
   'S' => 'Short', 
   'Z' => 'Boolean', 
   '-' => 'Void', 
   'U' => 'Void', 
   'X' => 'Void', 
);

%itypes=(
    'IMAConstant' => 'A',
    'IMAMemConstant' => 'A',
    'IMAMTConstant' => 'A',
    'IMAReadArray' => 'A',
    'IMAReadLocalVariable' => 'A',
    'IMAStoreArray' => 'A',
    'IMAStoreLocalVariable' => 'A',
    'IMArrayLength' => 'I',
    'IMBReadArray' => 'B',
    'IMBStoreArray' => 'B',
    'IMBasicBlock' => 'X',
    'IMCReadArray' => 'C',
    'IMCStoreArray' => 'C',
    'IMCall' => 'X',
    'IMStackOperationPOP' => 'X',
    'IMStackOperationPOP2' => 'X',
    'IMStackOperationDUP' => 'X',
    'IMStackOperationDUP_X1' => 'X',
    'IMStackOperationDUP_X2' => 'X',
    'IMStackOperationDUP2' => 'X',
    'IMStackOperationDUP2_X1' => 'X',
    'IMStackOperationDUP2_X2' => 'X',
    'IMStackOperationSWAP' => 'X',
    'IMCastD2F' => 'F',
    'IMCastD2I' => 'I',
    'IMCastD2L' => 'L',
    'IMCastF2D' => 'D',
    'IMCastF2I' => 'I',
    'IMCastF2L' => 'L',
    'IMCastI2B' => 'B',
    'IMCastI2C' => 'C',
    'IMCastI2D' => 'D',
    'IMCastI2F' => 'F',
    'IMCastI2L' => 'L',
    'IMCastI2S' => 'S',
    'IMCastL2D' => 'D',
    'IMCastL2F' => 'F',
    'IMCastL2I' => 'I',
    'IMCaughtException' => 'X',
    'IMCheckCast' => 'A',
    'IMCompactNew' => 'A',
    'IMConditionalOperator' => 'U',
    'IMDAdd' => 'D',
    'IMDConstant' => 'D',
    'IMDDiv' => 'D',
    'IMDGCompare' => 'D',
    'IMDLCompare' => 'D',
    'IMDMul' => 'D',
    'IMDNeg' => 'D',
    'IMDReadArray' => 'D',
    'IMDReadLocalVariable' => 'D',
    'IMDRem' => 'D',
    'IMDReturn' => 'X',
    'IMDStoreArray' => 'D',
    'IMDStoreLocalVariable' => 'D',
    'IMDSub' => 'D',
    'IMEQConditionalBranch' => 'X',
    'IMFAdd' => 'F',
    'IMFConstant' => 'F',
    'IMFDiv' => 'F',
    'IMFGCompare' => 'F',
    'IMFLCompare' => 'F',
    'IMFMul' => 'F',
    'IMFNeg' => 'F',
    'IMFReadArray' => 'F',
    'IMFReadLocalVariable' => 'F',
    'IMFRem' => 'F',
    'IMFReturn' => 'F',
    'IMFStoreArray' => 'F',
    'IMFStoreLocalVariable' => 'F',
    'IMFSub' => 'F',
    'IMGEConditionalBranch' => 'X',
    'IMGTConditionalBranch' => 'X',
    'IMGetField' => 'U',
    'IMGetStatic' => 'U',
    'IMGoto' => 'X',
    'IMIAdd' => 'I',
    'IMIBitAnd' => 'I',
    'IMIBitOr' => 'I',
    'IMIBitXor' => 'I',
    'IMIConstant' => 'I',
    'IMIDiv' => 'I',
    'IMIMul' => 'I',
    'IMINeg' => 'I',
    'IMIReadArray' => 'I',
    'IMIReadLocalVariable' => 'I',
    'IMIRem' => 'I',
    'IMIReturn' => 'I',
    'IMAReturn' => 'A',
    'IMIShiftLeft' => 'I',
    'IMIShiftRight' => 'I',
    'IMIShiftRight2' => 'I',
    'IMIStoreArray' => 'I',
    'IMIStoreLocalVariable' => 'I',
    'IMISub' => 'I',
    'IMInc' => 'X',
    'IMInstanceOf' => 'Z',
    'IMInvoke' => 'U',
    'IMInvokeInterface' => 'U',
    'IMInvokeSpecial' => 'U',
    'IMInvokeStatic' => 'U',
    'IMInvokeVirtual' => 'U',
    'IMLAdd' => 'L',
    'IMLBitAnd' => 'L',
    'IMLBitOr' => 'L',
    'IMLBitXor' => 'L',
    'IMLCompare' => 'I',
    'IMLConstant' => 'L',
    'IMLDiv' => 'L',
    'IMLEConditionalBranch' => 'X',
    'IMLMul' => 'L',
    'IMLNeg' => 'L',
    'IMLReadArray' => 'L',
    'IMLReadLocalVariable' => 'L',
    'IMLRem' => 'L',
    'IMLReturn' => 'X',
    'IMLShiftLeft' => 'L',
    'IMLShiftRight' => 'L',
    'IMLShiftRight2' => 'L',
    'IMLStoreArray' => 'L',
    'IMLStoreLocalVariable' => 'L',
    'IMLSub' => 'L',
    'IMLTConditionalBranch' => 'X',
    'IMLookupSwitch' => 'X',
    'IMMonitor' => 'X',
    'IMNEConditionalBranch' => 'X',
    'IMNew' => 'A',
    'IMNewArray' => 'A',
    'IMNewMultiArray' => 'A',
    'IMNewObjArray' => 'A',
    'IMNullConstant' => 'A',
    'IMPopReturnAddr' => 'A',
    'IMPutField' => 'X',
    'IMPutStatic' => 'X',
    'IMReadBlockVariable' => 'U',
    'IMReturnSubroutine' => 'A',
    'IMSReadArray' => 'S',
    'IMSStoreArray' => 'S',
    'IMStoreBlockVariable' => 'U',
    'IMTableSwitch' => 'X',
    'IMThrow' => 'X',
    'IMVReturn' => 'X',
);

%kommutativ=(
    'IMDAdd' => '+',
    'IMDMul' => '*',
    'IMFAdd' => '+',
    'IMFMul' => '*',
    'IMIAdd' => '+',
    'IMIBitAnd' => '&',
    'IMIBitOr' => '|',
    'IMIBitXor' => '^',
    'IMIMul' => '*',
    'IMLAdd' => '+',
    'IMLBitAnd' => '&',
    'IMLBitOr' => '|',
    'IMLBitXor' => '^',
    'IMLMul' => '*',
);

%bin_op=(
    'IMDAdd' => '+',
    'IMDDiv' => '/',
    'IMDMul' => '*',
    'IMDRem' => '%',
    'IMDSub' => '-',
    'IMFAdd' => '+',
    'IMFDiv' => '/',
    'IMFMul' => '*',
    'IMFRem' => '%',
    'IMFSub' => '-',
    'IMIAdd' => '+',
    'IMIBitAnd' => '&',
    'IMIBitOr' => '|',
    'IMIBitXor' => '^',
    'IMIDiv' => '/',
    'IMIMul' => '*',
    'IMIRem' => '%',
    'IMIShiftLeft' => '<<',
    'IMIShiftRight' => '>>',
    'IMIShiftRight2' => '>>>',
    'IMISub' => '-',
    'IMLAdd' => '+',
    'IMLBitAnd' => '&',
    'IMLBitOr' => '|',
    'IMLBitXor' => '^',
    'IMLDiv' => '/',
    'IMLMul' => '*',
    'IMLRem' => '%',
    'IMLShiftLeft' => '<<',
    'IMLShiftRight' => '>>',
    'IMLShiftRight2' => '>>>',
    'IMLSub' => '-',
);
