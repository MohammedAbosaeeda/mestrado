Type	Reviewer	Assigned (history)	Assigned by	Confirmed	Reminded	Due	Completed
review	 	2011-07-30 14:07:41	2011-07-30 14:07:41	2011-08-01 13:22:29	 	2011-08-21	2011-08-20 13:58:07
Originality:: .	Technical strenght:: .	Organization and presentation:: .	Recommendation for this paper:: .
3: Good	3: Good	2: Average	3: Weak Accept - Interesting work direction

Comments to authors:: Comments to authors:
    This work presents a case study on applying concepts from Object-Oriented and Aspect-Oriented Programming in the design of digital hardware, using SystemC (only the synthesizable subset).
    The text is clear and well written, however there are some questions that need to be revised.

    In the abstract (and conclusion), the authors claim that their results lead to a "increased level of flexibility and reusability", however there is no evidences supporting such a claim.
    Is this assessment one of this paper's goals?
    If so, how did the authors evaluate reusability? And flexibility?
    Usually, such features are evaluated with design metrics (e.g. C&K metrics for OO software), which have not been presented.

    In figure 1, the authors mixed up information of different natures (i.e. structural and behavioral information) within a single class diagram, which may hinder the diagram understanding.
    Usually, a class diagrams shows only structural information, not both.
    Without the text explaining this diagram, it is difficult to understand correctly the behavior of scenario adapter.
    It would be better to express such a information with a sequence diagram.

    Considering the implementation of EPOS scheduler, the proposed solution seems to support only static scheduling algorithms.
    Is it possible to implement, for instance, a EDF or LST scheduler?
    How would it be impact in the hardware implementation of this component?

    Considering the results presented in tables 1 and 2, it is worth show the numbers for the debugged family of components synthesized in isolation.
    Hence, it would be possible to evaluate how exactly is the overhead introduced by the proposed approach that uses metaprogramming to implement AOP features, since overhead imposed by these components may be always the same independently from any "binding" method.

    Moreover, it is surprising to see the longest path delay (LPD) for the hand code Scheduler+Debugger.
    Although the authors claimed that this feature is negligible, it would be interesting to understand why this version has a shorter delay than the original scheduler (which has no overhead, as depicted in the other features).
    Is this result improved only by the place and route algorithm of Xilinx ISE?
    In addition, it is interesting to evaluate performance in terms of cycles needed to complete scheduler's services.
    Or does each service need only one cycle to complete?

review	 	2011-07-30 14:07:41	2011-07-30 14:07:41	2011-08-19 16:37:46	 	2011-08-21	2011-08-19 17:02:01
Originality:: .	Technical strenght:: .	Organization and presentation:: .	Recommendation for this paper:: .
3: Good	2: Poor	3: Good	3: Weak Accept - Interesting work direction

Comments to authors:: Comments to authors:
    In this paper was explored the use of Aspect-oriented programming (AOP) techniques for hardware design. A synthesizable solution based on SystemC RTL approach was developed. This work was been motivated by
    the large increase of the complexity of embedded systems when compared
    with the design and verification capability of developers.

    Sections 1 and 2 show describe some works in the work line of OOPs applyed to hardware designs. Section 3 presents a good discussion about related work. Congratulations, it was very good.

    In the hardware domain, components have input and output signals instead of a method or function interface, and all operations are intrinsically parallel. These different characteristics required some modifications on the original scenario adapter. In this sense, a new scenario adapter is proposed in this work.  

    A subset composed by (1) sc_in and sc_out, which define simple input; (2) a SystemC clocked threads (SC_CTHREAD), in which all operations are synchronous to a clock signal, and (3) SystemC wait() statements to synchronize the operations with the clock, was used in this work to define each aspect as a single and independent hardware component (Aspect class). Additionally, also was defined enter and leave methods to encapsulate the implementation of the handshaking protocol which
    trigger the aspects.

    I think that the EPOS scheduler, selected as case study, must be described in more details and not just a reference.

    Considering that this work could be more appropiated to a language
    conference, I think that this community should learn more about this kind of approach in order to accelerate the development of their designs.

review	 	2011-08-04 23:21:19	2011-08-04 23:21:19	2011-08-05 01:05:08	 	2011-08-21	2011-08-22 04:43:45
Originality:: .	Technical strenght:: .	Organization and presentation:: .	Recommendation for this paper:: .
4: Excelent	3: Good	3: Good	4: Must Accept - Great work direction

Comments to authors:: Comments to authors:
    Dear authors,

    the paper was well written, its subject is very relevant and appropriate for this conference. For these reasons I recommend this paper for publication.  

    But I do have some suggestions to be added to the text, as detailed below.

    1) In Figure 2 there are some acronyms that were never mentioned nor defined in the text such as FCFS, SJF. In order to keep the text self contained I suggest you to add their definition to the text.

    2)Open statements should be supported by references, for example,  in section 5.2 "... Unlike previous works..." which ones are you referring to?

    3)Section 5.3 describes a very interesting part of your work and due to its very compact  description it is a bit hard to follow it. So, I would suggest the authors to expand this section adding more details on how the scenario adapter was implemented. This will  help the reader to understand this section better.
