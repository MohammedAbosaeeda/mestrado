// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package keso.communication.jinoserver;

public final class KesoServer_Stub
    extends java.rmi.server.RemoteStub
    implements keso.communication.jinoserver.IKesoServer, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_getName_0;
    private static java.lang.reflect.Method $method_ping_1;
    private static java.lang.reflect.Method $method_register_2;
    private static java.lang.reflect.Method $method_size_3;
    private static java.lang.reflect.Method $method_unregister_4;
    
    static {
	try {
	    $method_getName_0 = keso.communication.jinoserver.IKesoServer.class.getMethod("getName", new java.lang.Class[] {});
	    $method_ping_1 = keso.communication.jinoserver.IKesoServer.class.getMethod("ping", new java.lang.Class[] {});
	    $method_register_2 = keso.communication.jinoserver.IKesoServer.class.getMethod("register", new java.lang.Class[] {keso.communication.client.IKesoClient.class});
	    $method_size_3 = keso.communication.jinoserver.IKesoServer.class.getMethod("size", new java.lang.Class[] {});
	    $method_unregister_4 = keso.communication.jinoserver.IKesoServer.class.getMethod("unregister", new java.lang.Class[] {keso.communication.client.IKesoClient.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public KesoServer_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of getName()
    public java.lang.String getName()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getName_0, null, 6317137956467216454L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of ping()
    public void ping()
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_ping_1, null, 5866401369815527589L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of register(IKesoClient)
    public boolean register(keso.communication.client.IKesoClient $param_IKesoClient_1)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_register_2, new java.lang.Object[] {$param_IKesoClient_1}, -1175665421448939719L);
	    return ((java.lang.Boolean) $result).booleanValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of size()
    public int size()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_size_3, null, 4495240443643581991L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of unregister(IKesoClient)
    public void unregister(keso.communication.client.IKesoClient $param_IKesoClient_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_unregister_4, new java.lang.Object[] {$param_IKesoClient_1}, 5739539827899039655L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
