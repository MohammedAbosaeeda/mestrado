/*! @class System::ADC_Common
    @ingroup med_adc

    @brief The NIC family of hardware mediators provides access to analog to digital converters
 
    <!-- *********************************************************************** -->

    @fn System::ADC_Common::ADC_Common(unsigned char channel, unsigned char reference, unsigned char trigger, Hertz frequency)
    See @ref System::ADC_Common::ADC_Common::config(unsigned char channel, unsigned char reference, unsigned char trigger, Hertz frequency) "config".

    <!-- *********************************************************************** -->

    @fn void System::ADC_Common::config(unsigned char channel, unsigned char reference, unsigned char trigger, Hertz frequency)
	@brief Saves configuration values for this instance of ADC

	@param channel Desired ADC_Common::Channel
	@param reference Desired ADC_Common::Reference
	@param trigger Desired ADC_Common::Trigger
	@param frequency Desired frequency in ADC_Common::Hertz

	@note
	This method does not actually configure the device, it only saves the configuration values. For configuring the device see @ref System::ADC_Common::enable() "enable".

    <!-- *********************************************************************** -->

    @fn void System::ADC_Common::config(unsigned char * channel, unsigned char * reference, unsigned char * trigger, Hertz * frequency)
	@brief Reads configuration values for this instance of ADC
    
    <!-- *********************************************************************** -->

    @fn int System::ADC_Common::sample()
	@returns An ADC sample according to this instance's configuration

	This method enables the device, waits for a conversion to finish, reads the ADC sample, disables the device and returns the sample.

	@note This is the preferred method of ADC reading. The methods of ADC_Common::get(), ADC_Common::finished(), ADC_Common::enable() and ADC_Common::disable() aren't inherently concurrency safe and such measures are left to the application programmer.

    <!-- *********************************************************************** -->

    @fn int System::ADC_Common::get()
	@returns An ADC sample

	@note
	This method does not configure, enable or wait for a conversion to finish. It simply returns the current ADC reading.

    <!-- *********************************************************************** -->

    @fn bool System::ADC_Common::finished()
	@return True if a reading is finished, false otherwise

    <!-- *********************************************************************** -->

    @fn bool System::ADC_Common::enable()
	
	This method seizes, configures and enables the device.

	@return False if it was unable to seize the device, true otherwise

    <!-- *********************************************************************** -->

    @fn void System::ADC_Common::disable()

	This method releases and disables the device.

    <!-- *********************************************************************** -->

    @fn void System::ADC_Common::reset()

	This method resets the device

*/
