/* THIS FILE IS AUTO GENERATED BY KESO! DON'T EDIT */

#include <keso_support.h>
#include <keso_types.h>
#include "global.h"
#include "domains.h"
#include "c6_StringBuffer.h"
#include "char_array.h"


/*
 * call analyse 7 c6_StringBuffer_m2_ensureCapacity
 *
 * c6_StringBuffer_m1_append
 * (valid,int)
 *
 * c6_StringBuffer_m4_append
 * (valid,int)
 *
 * c6_StringBuffer_m5_setLength
 * (valid,int)
 *
 * c13_DebugOut_m1_println
 * (valid,int)
 *
 * c13_DebugOut_m1_println
 * (valid,0)
 *
 * c13_DebugOut_m2_println
 * (valid,int)
 *
 * c13_DebugOut_m2_println
 * (valid,0)
 *
 * total (valid,int)
 */

/* java/lang/StringBuffer.ensureCapacity(I)V */

void c6_StringBuffer_m2_ensureCapacity(object_t* obj0,jint i1) {
	jint i8_0;
	jint i9_2;
	jint i13_2;
	jint i3_0;
	jint i24_0;
	jint i16_1;
	object_t* obj5_0;
	object_t* obj6_0;
	object_t* obj4_0;
	object_t* obj5_1;
	object_t* obj7_0;
	jchar c22_1;

	
/*==============================================================/
| 44: 		if (data.length >= minimumCapacity) return;
/==============================================================*/
	KESO_CHECK_NULLPOINTER(obj0,"ensureCapacity",1);
	obj5_0 = (C6_STRINGBUFFER_OBJ(obj0)->c6f1_data);
	KESO_CHECK_NULLPOINTER(obj5_0,"ensureCapacity",4);
	if (((array_t*)obj5_0)->size<i1) goto c6_StringBuffer_m2_ensureCapacity_B10;
	
/* c6_StringBuffer_m2_ensureCapacity_B9:  Pred:  0 No: 2 done */
	goto c6_StringBuffer_m2_ensureCapacity_B58;
	
c6_StringBuffer_m2_ensureCapacity_B10: /* Pred:  0 No: 4 done */
	
/*==============================================================/
| 45: 		int d = Math.min(maxIncrease,data.length << 1);
/==============================================================*/
	obj6_0 = (C6_STRINGBUFFER_OBJ(obj0)->c6f1_data);
	KESO_CHECK_NULLPOINTER(obj6_0,"ensureCapacity",16);
	i8_0 = (((array_t*)obj6_0)->size<<1);
	if (0x20>=i8_0) goto cc2830910_c8_Math_m1_min_B9;
	
/* cc22992473_c8_Math_m1_min_B5:  Pred:  10 No: 5 done */
	i9_2 = 0x20;
	goto cc9716945_c8_Math_m1_min_B10;
	
cc2830910_c8_Math_m1_min_B9: /* Pred:  10 No: 13 done */
	i9_2 = i8_0;
	
cc9716945_c8_Math_m1_min_B10: /* Pred:  9 5 No: 6 done */
	
/*==============================================================/
| 46: 		int n = Math.max(minimumCapacity, d);
/==============================================================*/
	/* i9_2 = Phi(i8_0,32)  */;
	if (i1>=i9_2) goto cc15453627_c8_Math_m2_max_B9;
	
/* cc32826737_c8_Math_m2_max_B5:  Pred:  10 No: 7 done */
	i13_2 = i9_2;
	goto cc5863106_c8_Math_m2_max_B10;
	
cc15453627_c8_Math_m2_max_B9: /* Pred:  10 No: 12 done */
	i13_2 = i1;
	
cc5863106_c8_Math_m2_max_B10: /* Pred:  9 5 No: 8 done */
	
/*==============================================================/
| 47: 		char[] buff = new char[n];
| 48: 		copy_chars(data, 0, buff, 0, data.length);
/==============================================================*/
	/* i13_2 = Phi(i1,i9_2)  */;
	i3_0 = i13_2;
	obj4_0 = keso_alloc_char_array(i3_0);
	obj5_1 = (C6_STRINGBUFFER_OBJ(obj0)->c6f1_data);
	obj7_0 = (C6_STRINGBUFFER_OBJ(obj0)->c6f1_data);
	KESO_CHECK_NULLPOINTER(obj7_0,"ensureCapacity",46);
	i24_0 = ((array_t*)obj7_0)->size;
	i16_1 = 0x0;
	
cc6400263_c6_StringBuffer_m3_copy_chars_B3: /* Pred:  10 10 No: 9 done */
	/* i16_1 = Phi(0,i16_1)  */;
	if (i16_1>=i24_0) goto cc19589694_c6_StringBuffer_m3_copy_chars_B28;
	
/* cc3115866_c6_StringBuffer_m3_copy_chars_B10:  Pred:  3 No: 10 done */
	KESO_CHECK_ARR_REF(obj5_1,i16_1,"ensureCapacity",47);
	c22_1 = ((char_array_t*)obj5_1)->data[i16_1];
	KESO_CHECK_ARRAY(obj4_0,i16_1,"ensureCapacity",47);
	((char_array_t*)obj4_0)->data[i16_1]=c22_1;
	i16_1 = (i16_1+0x1);
	goto cc6400263_c6_StringBuffer_m3_copy_chars_B3;
	
cc19589694_c6_StringBuffer_m3_copy_chars_B28: /* Pred:  3 No: 11 done */
	
/*==============================================================/
| 49: 		data = buff;
| 50: 	}
/==============================================================*/
	KESO_WRBR((C6_STRINGBUFFER_OBJ(obj0)->c6f1_data),obj4_0);
	/* goto c6_StringBuffer_m2_ensureCapacity_B58 */;
	
c6_StringBuffer_m2_ensureCapacity_B58: /* Pred:  28 9 No: 3 done */
	return;
}

