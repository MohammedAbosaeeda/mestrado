/*! @class System::AVR8_MMU
    @ingroup med_mmu

    @brief This is the implementation of AVR MMU (Memory Management Utility) Mediator

    <!--************************************************************************************************-->
    @fn static void System::AVR8_MMU::flush_tlb()
    This method is empty for AVR architecture
    <!--************************************************************************************************-->
    @fn static void System::AVR8_MMU::flush_tlb(Log_Addr addr)
    This method is empty for AVR architecture

    <!--************************************************************************************************-->
    @fn Phy_Addr static System::AVR8_MMU::alloc(unsigned int bytes = 1)
    The alloc() function allocates <i>bytes</i> of memory. If alloc() fails, a <i>NULL</i> Phy_Addr is returned (0). If it succeeds a valid Phy_Addr, wich contains the allocated bytes, is returned.
    @param bytes The number of bytes to be allocated
    <!--************************************************************************************************-->
    @fn Phy_Addr static System::AVR8_MMU::calloc(unsigned int bytes = 1)
    Identical to calling alloc(), except the allocated memory will be cleared to zero.
    @param bytes The number of bytes to be allocated and cleared
    <!--************************************************************************************************-->
    @fn static void System::AVR8_MMU::free(Phy_Addr addr, int n = 1)
    The free() function causes the allocated <i>n</i> bytes of memory addressed at <i>addr</i> to be made available for future allocations. If <i>addr</i> is NULL, no action occurs.
    @param addr The address of the bytes to be freed
    @param n The number of bytes to be freed and cleared
    <!--************************************************************************************************-->
    @fn Page_Directory * static volatile System::AVR8_MMU::current()
    Returns the current Page Directory Pointer.
    @copydoc AVR8::pdp()
    <!--************************************************************************************************-->
    @fn Phy_Addr static System::AVR8_MMU::physical(Log_Addr addr)
    Returns a physical address for a logical address. For AVR architecture the same addr is returned.
    @param addr A Logical Address object
    <!--************************************************************************************************-->
    @fn static void System::AVR8_MMU::init()
    Inits AVR MMU. Init function sets (and clear) available AVR memory. Init also sets (and clear) AVR Heap.

    <!--************************************************************************************************-->
*/