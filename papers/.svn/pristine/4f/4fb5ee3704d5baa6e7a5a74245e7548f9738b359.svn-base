%!PS-Adobe-2.0 EPSF-2.0
%%Title: ../winupdate.eps
%%Creator: fig2dev Version 3.2 Patchlevel 3d
%%CreationDate: Mon Feb 24 02:09:20 2003
%%For: trier@pleura.lisha.ufsc.br (Marcelo Trier)
%%BoundingBox: 0 0 294 188
%%Magnification: 1.0000
%%EndComments
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def

end
save
newpath 0 188 moveto 0 0 lineto 294 0 lineto 294 188 lineto closepath clip newpath
-3.8 189.7 translate
1 -1 scale

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proe char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% right45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 32 32 true [ 32 0 0 -32 0 32 ]
	{<010101010202020204040404080808081010101020202020
	404040408080808001010101020202020404040408080808
	101010102020202040404040808080800101010102020202
	040404040808080810101010202020204040404080808080
	010101010202020204040404080808081010101020202020
	4040404080808080>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P5 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
10 setmiterlimit
 0.06000 0.06000 sc
%
% Fig objects follow
%
/Helvetica ff 150.00 scf sf
1875 2175 m
gs 1 -1 sc (3) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica ff 150.00 scf sf
2700 1200 m
gs 1 -1 sc (1) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica ff 150.00 scf sf
2625 1650 m
gs 1 -1 sc (2) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica ff 150.00 scf sf
75 150 m
gs 1 -1 sc (RAM) col0 sh gr
/Helvetica ff 150.00 scf sf
1050 150 m
gs 1 -1 sc (Flash) col0 sh gr
/Helvetica ff 150.00 scf sf
2175 675 m
gs 1 -1 sc (OS boot code) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica ff 150.00 scf sf
2325 1575 m
gs 1 -1 sc (erase) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica ff 150.00 scf sf
1650 1950 m
gs 1 -1 sc (copy/install) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica ff 150.00 scf sf
2400 1275 m
gs 1 -1 sc (load) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica ff 150.00 scf sf
2175 2850 m
gs 1 -1 sc (\( WindowsCE for Automotive \)) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica ff 150.00 scf sf
2175 2700 m
gs 1 -1 sc (WCEfA) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
7.500 slw
n 3225 450 m 4800 450 l 4800 825 l 3225 825 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 215.00 30.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Polyline
n 1050 225 m 4950 225 l 4950 3150 l 1050 3150 l
 cp gs col0 s gr 
% Polyline
n 1125 2325 m 3375 2325 l 3375 3075 l 1125 3075 l
 cp gs col0 s gr 
% Polyline
n 75 225 m 825 225 l 825 1875 l 75 1875 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P5 [16 0 0 -16 5.00 15.00] PATmp PATsp ef gr PATusp gs col0 s gr 
% Ellipse
n 1899 2126 113 113 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 2724 1151 113 113 0 360 DrawEllipse gs col0 s gr

% Ellipse
n 2649 1601 113 113 0 360 DrawEllipse gs col0 s gr

% Polyline
n 150 825 m 750 825 l 750 1050 l 150 1050 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
n 75 1875 m 825 1875 l 825 3150 l 75 3150 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
% Polyline
n 3450 525 m 4350 525 l 4350 750 l 3450 750 l
 cp gs col7 1.00 shd ef gr gs col0 s gr 
/Helvetica ff 150.00 scf sf
3900 675 m
gs 1 -1 sc (BurnOS code) dup sw pop 2 div neg 0 rm  col0 sh gr
% Polyline
n 1200 450 m 3225 450 l 3225 825 l 1200 825 l
 cp gs col0 s gr 
% Polyline
n 1050 975 m
 4950 975 l gs col0 s gr 
% Polyline
2 slj
gs  clippath
1632 2503 m 1683 2471 l 1601 2343 l 1641 2461 l 1550 2376 l cp
eoclip
n 600 1650 m 601 1650 l 605 1651 l 610 1653 l 619 1656 l 631 1659 l
 647 1664 l 665 1670 l 687 1677 l 710 1685 l 736 1694 l
 764 1704 l 793 1715 l 823 1727 l 855 1740 l 887 1755 l
 920 1771 l 955 1789 l 992 1810 l 1030 1832 l 1070 1857 l
 1113 1886 l 1156 1917 l 1200 1950 l 1240 1982 l 1278 2015 l
 1313 2047 l 1346 2078 l 1376 2108 l 1404 2138 l 1430 2166 l
 1453 2194 l 1476 2221 l 1496 2247 l 1516 2273 l 1534 2298 l
 1552 2323 l 1568 2346 l 1583 2368 l 1596 2389 l 1609 2408 l
 1619 2425 l 1628 2440 l 1636 2451 l 1641 2461 l
 1650 2475 l gs col0 s gr gr

% arrowhead
0 slj
n 1550 2376 m 1641 2461 l 1601 2343 l 1550 2376 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
2 slj
gs  clippath
2703 1833 m 2724 1777 l 2583 1722 l 2685 1794 l 2562 1778 l cp
eoclip
n 600 1425 m 601 1425 l 603 1425 l 607 1425 l 613 1425 l 622 1424 l
 634 1424 l 649 1424 l 667 1423 l 687 1423 l 711 1423 l
 737 1422 l 765 1422 l 796 1422 l 828 1422 l 863 1423 l
 898 1423 l 935 1424 l 973 1425 l 1013 1427 l 1054 1429 l
 1097 1432 l 1142 1435 l 1188 1438 l 1237 1443 l 1288 1448 l
 1342 1454 l 1399 1461 l 1458 1469 l 1520 1479 l 1585 1489 l
 1650 1500 l 1715 1512 l 1780 1525 l 1842 1538 l 1901 1551 l
 1958 1564 l 2012 1577 l 2063 1590 l 2112 1603 l 2158 1616 l
 2203 1629 l 2246 1642 l 2287 1654 l 2327 1667 l 2365 1679 l
 2402 1692 l 2438 1704 l 2472 1716 l 2504 1727 l 2535 1738 l
 2563 1748 l 2589 1758 l 2613 1767 l 2633 1775 l 2651 1781 l
 2666 1787 l 2678 1791 l 2687 1795 l
 2700 1800 l gs col0 s gr gr

% arrowhead
0 slj
n 2562 1778 m 2685 1794 l 2583 1722 l 2562 1778 l  cp gs 0.00 setgray ef gr  col0 s
% Polyline
2 slj
gs  clippath
657 1246 m 662 1306 l 812 1294 l 691 1274 l 808 1234 l cp
eoclip
n 675 1275 m 688 1274 l 697 1273 l 709 1272 l 724 1271 l 743 1269 l
 766 1267 l 792 1265 l 821 1262 l 854 1259 l 890 1256 l
 930 1253 l 972 1249 l 1016 1245 l 1063 1240 l 1112 1236 l
 1162 1231 l 1214 1226 l 1267 1220 l 1322 1215 l 1377 1209 l
 1433 1203 l 1490 1197 l 1548 1191 l 1607 1184 l 1667 1177 l
 1728 1170 l 1790 1162 l 1853 1154 l 1917 1146 l 1983 1137 l
 2050 1128 l 2119 1118 l 2189 1108 l 2260 1097 l 2332 1086 l
 2405 1074 l 2478 1062 l 2550 1050 l 2637 1034 l 2720 1019 l
 2798 1004 l 2871 989 l 2939 974 l 3002 961 l 3060 947 l
 3115 934 l 3165 921 l 3211 909 l 3255 897 l 3295 886 l
 3333 874 l 3369 863 l 3403 853 l 3434 842 l 3464 832 l
 3492 822 l 3518 813 l 3542 804 l 3564 795 l 3584 787 l
 3603 780 l 3619 774 l 3632 768 l 3644 763 l 3654 759 l
 3661 756 l 3667 754 l 3671 752 l 3673 751 l 3674 750 l

 3675 750 l gs col0 s gr gr

% arrowhead
0 slj
n 808 1234 m 691 1274 l 812 1294 l 808 1234 l  cp gs 0.00 setgray ef gr  col0 s
/Helvetica ff 150.00 scf sf
2850 375 m
gs 1 -1 sc (Flash Boot Sector) dup sw pop 2 div neg 0 rm  col0 sh gr
/Helvetica ff 150.00 scf sf
450 975 m
gs 1 -1 sc (BurnOS) dup sw pop 2 div neg 0 rm  col0 sh gr
$F2psEnd
rs
end
