\section{Related Work}
\label{sec:relatedwork}

This research contributes to the work on static power management
strategies for embedded systems. Static techniques are those which do
not analyze system behavior to drive decisions concerning power
management. The inovation is the use of an application-driven approach
implemented over a hierachically organized, com\-po\-nent-based
operating system.




% TinyOS and Mantis.
\textsc{TinyOS} and \textsc{Mantis} are embedded operating systems
focused on wireless sensor networks. In these systems energy-awareness
is mostly based on low-power MACs~\cite{Polastre:2004,Sheth:2004} and
multi-hop routing power scheduling~\cite{Hohlt:2004,Sheth:2003}. This
makes sense in the context of wireless sensor networks, for a
significant amount of energy is spent on the communication mechanism.
Although this approach shows expressive results, it often focuses on
the development of low-power components instead of power-aware ones.
% Tentar explicitar melhor a diferenï¿½ entre ``low-power'' e
% ``power-aware''
Another drawback in these systems is the lack of configurability and
standardization of a configuration interface.

% SPEU.
\textsc{Speu} (System Properties Estimation with
\textsc{Uml})~\cite{Oliveira:2005} is an optimization tool which takes
into account performance, system footprint and energy constraints to
generate either a performance-efficient, size-efficient or
energy-efficient system. These informations are extracted from an
\textsc{Uml} model of the embedded application. This model must
include class and sequence diagrams, so the tool can estimate
performance, code-size and energy consumption of each application. The
generated system is a \texttt{Java} software and is intended to run
over the \textsc{FemtoJava}~\cite{Ito:2001} soft-core processor. Once
\textsc{Speu} only takes into account the \textsc{Uml} diagrams, its
estimations show errors as big as 85\%, making it only useful to
compare different design decisions. It also lacks configurability,
once the optimization process is only guided by one variable, i. e.,
if the application programmer's design choice is performance, the
system will never enter power-aware states, even if it is not using
certain devices. This certainly limits its use in real-world
applications.

% CiAO.  
% \textsc{CiAO} (\textsc{CiAO} is Aspect-Oriented) is a project
% which aims the development of a fine-grained product-line operating
% system for embedded and deeply embedded systems. It focuses the
% abstraction of non-functional properties as aspects, enhancing
% system configurability. One of these non-functional properties is
% energy consumption. \textsc{CiAO} is still in an early development
% stage, but already shows to be somewhat different from the
% \textsc{Epos} approach. \textsc{Epos} also uses aspects to abstract
% some non-functional properties but, while \textsc{CiAO} uses
% aspect-orientation as the whole system design methodology,
% \textsc{Epos} uses it as an extra development tool instead. In the
% particular case of power-awareness, it is not desirable to model it
% as an aspect because, even being a non-functional property, it will
% impose functional consequences for the system, i. e., migration for
% lower power consumption modes often change the system behavior.

% IMPACCT.
\textsc{Impacct} (which stands for Integrated Management of
Power-Aware Computing and Communication Technologies)~\cite{Chou:2002}
is a system-level tool for exploring power/performance tradeoffs by
means of power-aware scheduling and architectural configuration. The
idea behind the \textsc{Impacct} system is the embedded application
analysis through a timing simulation to define the widest possible
dynamic range of power/performance tradeoffs and the power mode in
which each component should operate over time. This tool chain also
includes a power-aware scheduler implementation for hard real-time
systems. \textsc{Impacct} tools deliver a very interesting way to
configure the power-aware scheduler and the power-modes of an embedded
system, but is far from delivering a fast prototyping environment.

% The development of an embedded system using \texttt{IMPACCT} should
% not be as straight forward as it is using other systems.

