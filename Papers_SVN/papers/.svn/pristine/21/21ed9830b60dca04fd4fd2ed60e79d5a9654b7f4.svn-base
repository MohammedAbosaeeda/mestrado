\chapter{Introdução}
    \label{chap:intro}
       
    % os dispositivos hoje são assim
    % devido a eles serem assim, energia e desempenho...
    % costuma-se tratar esse problema assim:
    % o que vamos tratar nesse trabalho é esse nível
    
    O emprego de sistemas computacionais embarcados tornou-se muito comum no entretenimento, saúde e conforto. Esta invasão no dia-a-dia das pessoas atribui a estes dispositivos uma gama de características desejáveis. Eles devem ser leves, autônomos e ainda possuir um baixo custo. Citadas apenas três restrições, pode-se notar como o consumo de energia transformou-se em um fator estratégico no projeto destes sistemas. O uso eficiente da energia reflete um maior tempo de vida do dispositivo, o que pode ser trocado, por exemplo, por uma bateria menor, mais leve e mais barata.
    
    O esforço dedicado à redução de energia em sistemas computacionais tem-se concentrado, até hoje, em três pontos principais: \textbf{circuitos eletrônicos}, \textbf{arquitetura de hardware} e \textbf{soluções em software} \cite{Ranganathan:2010}.
    
    Para a redução de energia em \textbf{circuitos eletrônicos}, o foco científico está principalmente no projeto de elementos digitais básicos eficientes quanto ao uso de energia. Isto significa explorar propriedades elétricas de itens como células de memória, latches ou flip-flops, até a distribuição do sinal de clock entre estes componentes. Quanto a \textbf{arquitetura de hardware}, pode-se citar os esforços na criação de unidades funcionais de hardware energeticamente eficientes: particionamento de bancos de memória, caches, estados de baixo consumo e inclusive permitir a alteração da tensão e frequência de funcionamento de uma unidade. Quanto a \textbf{soluções em software}, pode-se destacar compiladores que buscam eficiência energética e aplicações ou sistemas operacionais que exploram, principalmente, o modo de funcionamento e a utilização de recursos, como rede, memória e processador.
    
    O foco deste trabalho está situado na \textbf{solução em software}, mais precisamente no sistema operacional embarcado. A ideia é que, nas rotinas de escalonamento de tarefas, possa-se explorar uma característica arquitetural possivelmente presente no processador: a alteração de tensão e frequência durante a execução de um programa. Esta característica é chamada de \textbf{DVFS} (\emph{Dynamic Voltage and Frequency Scaling}), ou também \textbf{DVS} (\emph{Dynamic Voltage Scaling}). Um escalonador, ciente dessa técnica, pode então identificar momentos nos quais o processador pode funcionar com menor desempenho, com frequência e tensão reduzidas. Assim, o tempo de execução das tarefas que estão sendo executadas aumenta, mas em contrapartida economiza-se energia.
        
    De fato, seria simplificar a realidade utilizar esta técnica em sistemas embarcados e não levar em conta restrições temporais. Muitas vezes estes sistemas são utilizados em \textbf{aplicações de tempo real}, ou seja, aplicações que necessitam executar tarefas em tempo hábil. Como exemplo, suponha que um veículo aéreo não tripulado é baseado em um sistema embarcado, onde as tarefas de controle da aeronave e o sistema operacional são executados em um processador que suporta DVFS. Se em um momento de menor carga o sistema operacional decide reduzir a frequência do processador, deve ser garantido que tarefas críticas continuem cumprindo seus prazos. Neste exemplo, as rotinas que devem responder à variação de altitude, ao sofrerem qualquer atraso, podem acarretar consequências catastróficas. Em um cenário como este, a qualidade ou ação de se utilizar DVFS levando em conta as restrições temporais é chamada \textbf{RT-DVFS} (\textit{Real Time Dynamic Voltage and Frequency Scaling}), ou simplesmente \textbf{RT-DVS} \cite{Pillai:2001}.
        
    \section{Objetivos}
        \label{sec:objetivos}
        
        O objetivo geral deste trabalho é fornecer uma implementação real de um sistema operacional embarcado com suporte a RT-DVFS. De maneira mais específica, este trabalho possui dois componentes fundamentais: o primeiro é o porte do EPOS (\emph{Embedded Parallel Operating System}) \footnotemark \cite{Frohlich:2001} para uma plataforma de hardware com suporte a DVFS. O segundo componente do trabalho é adaptar o ambiente de tempo real oferecido pelo EPOS, transformando-o em um sistema operacional com suporte a RT-DVFS.
        
        % esse fotenote não ficou legal, tá comendo um pedação da página
        %\footnotetext[1]{O EPOS é utilizado como estudo de caso em maior parte dos trabalhos desenvolvidos dentro do Laboratório de Integração Software/Hardware, da Universidade Federal de Santa Catarina. É também neste laboratório que este trabalho está sendo desenvolvido.}
        
        \subsection{Desenvolvimento do Porte}
        
            A plataforma escolhida para desenvolvimento foi o processador Intel PXA255, capaz de realizar DVFS para vários dispositivos internos, como barramento, memória e seu núcleo Intel XScale. Para os fins deste trabalho, portar o sistema EPOS para tal plataforma de hardware significa:
            
            \begin{itemize}
            \item Identificar os meios para depuração, programação e inicialização da plataforma de hardware.
            \item Como o EPOS é desenvolvido em C++, é necessário que seja criado um suporte de baixo-nível para a linguagem, conhecido como \emph{run-time C++}. É este suporte que torna algumas características dinâmicas da linguagem C++ funcionais, essenciais para a inicialização do sistema operacional em questão.
            \item Identificar e criar os mediadores de hardware necessários. Estes mediadores são os componentes responsáveis por oferecer à camada mais abstrata do sistema uma interface para itens de hardware, isolando as porções de software dependentes de máquina \cite{Frohlich:2001}. Vale salientar que o suporte a DVFS resume-se em disponibilizar, na interface de um mediador, comandos que permitam que itens mais abstratos do sistema, como por exemplo um escalonador ou gerente de energia, possam alterar o modo (tensão e frequência) de funcionamento do processador.
            \item Finalmente, após identificados e implementados os mediadores de interesse, utilizar as aplicações de teste já presentes no EPOS para verificá-los.
            \end{itemize}
        
        \subsection{Desenvolvimento de Suporte a RT-DVFS}
            
            Para o desenvolvimento do suporte a RT-DVFS, busca-se a implementação de heurísticas para tomadas de decisão do sistema. Estas heurísticas a serem implementadas são baseadas no escalonador de tempo real EDF (\textit{Earliest Deadline First}), componente já presente no sistema operacional EPOS. Mais especificadamente, são incorporadas ao sistema duas heurísticas propostas por \citeonline{Pillai:2001}, chamadas \textit{Static DVS} para EDF e \textit{Cycle-conserving DVS} para EDF. A primeira tem caráter estático, decidindo, anteriormente à execução do conjunto de tarefas, qual a configuração de tensão e frequência escolher, sem que as tarefas percam seus prazos. A segunda toma decisões de maneira dinâmica, baseando-se em dados obtidos durante a execução das tarefas. Por final, experimentos devem ser realizados demonstrando o comportamento das heurísticas e sua validade quanto às restrições de tempo real.
    
    \section{Justificativa}
        \label{sec:justificativa}
        
        Dispositivos embarcados alimentados por bateria trazem consigo restrições conflitantes: autonomia e desempenho. Ao mesmo tempo que devem economizar energia, ganham a responsabilidade sobre tarefas inteligentes que necessitam de processamento poderoso. Projetar estes dispositivos levando em consideração somente cenários de pior caso pode não ser uma boa ideia. Mesmo existindo aplicações que exijam alto processamento, o pico de computação necessário durante um curto período é maior que a média necessária geralmente em maior parte do tempo de funcionamento destes sistemas, causando assim desperdício de energia \cite{Pillai:2001}. Sistemas embarcados, onde se tem um maior conhecimento sobre o comportamento da aplicação, tornam-se um palco interessante para a exploração do uso de DVFS, de modo que o poder computacional do dispositivo seja utilizado eficientemente.
        
        O estudo de caso utilizado neste trabalho, o EPOS, é um sistema operacional que segue a metologia \textbf{ADESD} (\textit{Application-Driven Embedded System Design}) \cite{Frohlich:2001}. Uma implementação real de RT-DVFS em um ambiente que segue a metodologia citada é a maior contribuição deste trabalho. Isto se dá, primeiramente, porque grande parte dos estudos em RT-DVFS são realizados através de simulações, que possuem resultados restritos, devido a fatores imprevisíveis ou não modelados \cite{Lin:2010}. Em segundo, observa-se que, dos trabalhos que desenvolvem implementações reais de suporte a RT-DVFS, comumente as demonstrações ocorrem em sistemas Linux com a adição de módulos ou extensões \cite{Pillai:2001, Snowdown:2005, Zhu:2007, Lin:2010}, enquanto o EPOS já possui suporte nativo a tarefas de tempo real \cite{Marcondes:2009}.
        
        Com a grande demanda de dispositivos que exigem baixo consumo de energia, o suporte a DVFS está presente em muitos processadores conhecidos \cite{Chen:2007}. Por estar sendo portado para uma plataforma Intel/Marvell XScale, o EPOS se beneficia duplamente. Primeiro pelo fato de estar disponível para um processador dedicado a aplicações de baixo consumo. Em segundo, há também o benefício experimental e comparativo, já que esta mesma plataforma está presente em trabalhos com implementações reais de sistemas RT-DVFS, onde a heurística \textit{Cycle-conserving} para EDF, utilizada por este trabalho, é usualmente tomada como referência \cite{Kumar:2005,Chen:2007,Tsai:2007, Zhu:2007}.

        
        
