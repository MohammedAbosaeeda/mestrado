% + Conclusions
% 
% This section reviews what was proposed: the method to abstract hardware
% devices, the adaptation of a hardware device to a MPL as a aspect weaving.
% It is concluded that the method is suitable for embedded systems in terms of
% time, memory and portability.
% ------------------------------------------------------------------------------
\section{Conclusions} \label{sec:conc}
This paper introduces a method used to abstract hardware devices to
be used by embedded applications written in MPLs.
This method can be used for constructing hardware components libraries for
embedded MPL applications.
It is also presented EBG, a tool that automates the task of generating
binding code.
The EBG shows that, when hardware devices and FFIs are properly factorized,
the adaptation of a hardware device to a MPL can be treated as an aspect
weaving problem, thus enabling the reuse of binding code by distinct FFIs.

The proposal was applied to embedded \java~and embedded \lua~in
a case study encompassing distributed motion estimation for digital video encoding.
In the case of \java, we have applied our proposal on two JVMs and FFIs:
the FFI of KESO VM,
which uses a generation approach and ahead-of-time compilation strategy
translating the Java bytecode to C,
and the FFI of NanoVM which is based on bytecode interpretation.
In the case of \lua, our proposal was evaluated for the standard \lua~FFI.

The measured overhead of time and memory shows that the binding code generated
by using the proposed approach is small and keeps the time requirements
which indicates that our approach if adequate for embedded systems.

% ------------------------------------------------------------------------------
