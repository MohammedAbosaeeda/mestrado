\chapter{Conclusão}
    \label{chap:conclusao}
    
    % não esquecer de falar dos problemas dos métodos virtuais
    % intrusão no scheduler
    % utilizar ferramentas de worst-case
    % aproveitar orientação a aplicação
    
    Os objetivos desse trabalho foram o porte do EPOS para uma plataforma de hardware com suporte a DVFS, e ainda, a implementação de técnicas para a criação de um ambiente RT-DVFS. Estes pontos foram alcançados.
    
    O EPOS agora possui um porte para o Intel PXA255, um processador com núcleo Intel XScale e suporte a DVFS para vários dispositivos internos. A plataforma é destina a aplicações de alto desempenho e baixo consumo de energia. Um fator interessante é que, agora sobre o PXA255, portar novamente o sistema para um outro processador XScale torna-se uma tarefa mais simples, já que boa parte dos mediadores referentes à arquitetura podem ser reaproveitados.
    
    As heurísticas \emph{Cycle-conserving} e \emph{Static Voltage Scaling} foram implementadas para o escalonador EDF, já presente no ambiente de tempo real do EPOS. As heurísticas implementadas foram avaliadas do ponto de vista do consumo de energia, e obtiveram o comportamento esperado para o nicho de aplicações presentes nos testes.
    
    \section{Contribuição}
    
    A maior contribuição deste trabalho encontra-se na implementação de um ambiente RT-DVFS sobre o EPOS. Grande parte das implementações de ambientes RT-DVFS utilizam o sistema operacional Linux. O EPOS é um sistema operacional nativamente desenvolvido para a produção de sistemas embarcados, além de seguir a metodologia ADESD \cite{Frohlich:2001}, um cenário diferenciado das outras implementações presentes na literatura sobre o tema.
    
    Ainda, as novas abstrações que foram criadas no sistema, permitem facilmente a criação de novas heurísticas. A classe \emph{EA\_Periodic\_Thread} é capaz de fornecer metadados referentes a execução de tarefas periódicas. Utilizando-a em conjunto com os eventos captados por \emph{Heuristic}, basta-se estender esta classe para que uma nova política para economia de energia seja adicionada ao sistema. Vale salientar que, como proposto por \citeonline{Pillai:2001}, as heurísticas continuam fracamente acopladas ao escalonador de tempo real do sistema operacional embarcado.
    
    \section{Trabalhos Futuros}
    
    Mesmo que com seus objetivos cumpridos, este trabalho ainda necessita de amadurecimento em um aspecto principal: \emph{design} de software.
    
    A abstração \emph{Thread} do EPOS não permite captar os eventos de troca de contexto. O conceito utilizado neste trabalho para trabalhar com estes eventos foi a adição de polimorfismo dinâmico na classe \emph{Thread}, o que leva a indireções no controle de fluxo da troca de contexto. Esta foi a alternativa utilizada pois o EPOS ainda utiliza \emph{threads} não periódicas para representar a \emph{thread} principal do sistema e a \emph{thread} que ocupa o processador em inatividade. Procurar uma alternativa ``mais estática'' provavelmente recairia em um reprojeto maior do sistema, o que está fora do escopo deste trabalho. Observe que a captura deste tipo de evento é interessante para adicionar flexibilidade para a criação de novas abstrações de processos no EPOS.
    
    Além disso, como trabalhos futuros, ainda aponta-se:
    \begin{itemize}
        \item Criar experimentos com aplicações mais complexas ou reais. O estudos em RT-DVFS revelam que a realidade para tarefas que tem um uso maior da memória é outra, como apresentando por \citeonline{Snowdown:2005}. 
        \item Realizar experimentos comparativos com as implementações existentes sobre Linux.
        \item Já que o EPOS é orientado a aplicação, poderia-se realizar uma análise estática ou dinâmica a fimde presumir mecanismos ou parâmetros de heurísticas para RT-DVFS.
    \end{itemize}
    
    

