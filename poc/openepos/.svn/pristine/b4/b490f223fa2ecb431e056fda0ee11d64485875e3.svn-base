/*! 	@class System::CC1000
	@ingroup med_nic

	@brief CC1000 Radio Transceiver Mediator. This class provides
	low-level support for MAC implementations.


	<!--**********************************************************-->

	@fn static void System::CC1000::config(int frequency, int power)
	@brief Configures TX/RX frequency and TX power for CC1000.

	@param frequency
	This is an index to the previously generated frequency table,
	which is stored in System::CC1000_Parameters. 

	@param power
	This expresses the desired power in dBm, ranging from -20 to 10.

	@todo
	Currently there is one frequency available (916 Mhz - 0). When
	new frequencies are included, an enumeration should be created
	relating frequencies and indexes.

	<!--**********************************************************-->

	@fn static void System::CC1000::tx_mode()
	@brief Puts CC1000 in transmit mode. 

	Waits 270 ms for hardware to addequately respond.

	<!--**********************************************************-->

	@fn static void System::CC1000::rx_mode()
	@brief Puts CC1000 in reception mode.

	<!--**********************************************************-->

	@fn static void System::CC1000::rx_mode()
	@brief Puts CC1000 in reception mode.

	<!--**********************************************************-->

	@fn static void System::CC1000::enable()
	@brief Enables the CC1000 hardware. 

	Once enabled, the HW should be put in either TX or RX
	mode. Waits 2000 ms for hardware to addequately respond.

	<!--**********************************************************-->

	@fn static void System::CC1000::disable()
	@brief Disables the CC1000 hardware. 

	<!--**********************************************************-->

	@fn void System::CC1000::int_enable()
	@brief Enables data ready interrupt. 

	When enabled, the CC1000 always clocks in data periodically
	regardless of transmission or reception.


	<!--**********************************************************-->

	@fn void System::CC1000::int_disable()
	@brief Disables data ready interrupt.

	<!--**********************************************************-->

	@fn char System::CC1000::get()
	@brief Receives a data byte from CC1000.

	<!--**********************************************************-->

	@fn void System::CC1000::put(unsigned char c)
	@brief Sends a data byte to CC1000.

	<!--**********************************************************-->

	@fn int System::CC1000::rssi()
	@brief Returns the current RSSI sample.

	<!--**********************************************************-->

	@fn char System::CC1000::id()
	@brief Returns the unique identifier for this HW. 

	@todo
	Currently not implemented, returns 0.

	<!--**********************************************************-->

	@var SPI System::CC1000::_spi()
	@brief SPI interface used for data TX/RX.

	<!--**********************************************************-->

	@var RSSI System::CC1000::_rssi()
	@brief RSSI sensor.

	<!--**********************************************************-->

	@var unsigned char System::CC1000::_id()
	@brief Unique hardware identifier. 

	@todo
	In future versions, this will be provided by a serial ID chip
	mediator.

	<!--**********************************************************-->

	<!--**********************************************************-->

	@class System::CC1000_Parameters
	@ingroup med_nic

	@brief Container for CC1000 configuration values, selected by TX
	power and frequency.

	@todo 
	Currently there is only one frequency available (916 Mhz -
	0). When new frequencies are included, an enumeration should be
	created relating frequencies and indexes.

	<!--**********************************************************-->

	@fn static void System::CC1000_Parameters::select(int f, int p)
	@brief Selects index for CC1000 parameter tables for frequency
	and TX power.

	Once the indexes have been selected, values for each
	register should be accessed through the register's name.

	@param f
	This is an index to the previously generated frequency table.

	@param p
	This expresses the desired power in dBm, ranging from -20 to 10.

	<!--**********************************************************-->

	<!--**********************************************************-->

	@class System::CC1000_Registers
	@ingroup med_nic

	@brief Abstracts the 3-wire configuration interface for
	CC1000. Each register should be read and written through the
	method with its name.

	<!--**********************************************************-->

	<!--**********************************************************-->

	@class System::CC1000_RSSI
	@ingroup med_nic

	@brief CC1000 RSSI Sensor

	<!--**********************************************************-->

    	@fn bool System::CC1000_RSSI::enable()

	@copydoc ADC_Common::enable()

	<!--**********************************************************-->

    	@fn bool System::CC1000_RSSI::disable()

	@copydoc ADC_Common::disable()

	<!--**********************************************************-->

    	@fn bool  System::CC1000_RSSI::data_ready()

	@return True if a reading is finished, false otherwise

	<!--**********************************************************-->

    	@fn bool  System::CC1000_RSSI::get()

	@copydoc ADC_Common::get()

	<!--**********************************************************-->

    	@fn bool  System::CC1000_RSSI::sample()

	Returns an RSSI sample.	

	@todo

	This method currently returns a raw sensor reading. In the
	future, it should return the RSSI value in dBm.

	<!--**********************************************************-->


*/