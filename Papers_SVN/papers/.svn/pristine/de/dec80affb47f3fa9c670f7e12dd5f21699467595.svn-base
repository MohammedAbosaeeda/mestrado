
\section{Related Work}
\label{sec:related}

Several works have addressed the deployment of energy harvesters in wireless sensor networks.
Although many of them did not take real-time constraints into account, some can be adapted to support timing requirements.
This section describes the approaches these works used in order to schedule energy usage in energy-harvesting systems.

An important factor for efficiently managing energy in energy-harvesting systems is the choice of an efficient predictor for energy input~\cite{Paradiso:2005}.
% Kansal (Heliomote)
Kansal et al.~\cite{Kansal:2007} introduced a prediction algorithm to support their power management approach for wireless sensor networks.
Their energy prediction model uses an exponentially weighted moving-average filter.
This method assumes that solar irradiation in a given time-slot of the day is similar to the irradiation in the same time-slot of other days.
Their power management approach took into account the predicted amount of energy input to maximize the duty-cycle of the system, subject to energy availability.
% Moser
Moser et al.~\cite{Moser:2007} used a similar approach.
Their work presents a system model, simulated experimental results, and a real implementation of the proposed control law.
The shown experiments, however, focus on a single sensor node, not taking wireless communication into account.
% Recas?
Ali et al.~\cite{Ali:2010} proposed an extension to these models.
Their approach take not only the past days into account, but also the solar irradiation levels of the current day.
This allows for lower prediction errors as, by monitoring the irradiation levels of the current day, it is possible to adjust predicted energy according to the most recent information, i.e., the prediction errors in the most recent time-slots.

A few works analyzed the problem of efficiently scheduling tasks in systems presenting varying energy budgets.
% Rusu:2003
Rusu et al.~\cite{Rusu:2003} presents a multiversion scheduling approach that chooses between the different versions of the same tasks that maximize the system value and prevents battery depletion.
Assuming that batteries may be recharged, they propose a static solution that maximizes value based on worst-case scenarios.
Also, they propose a dynamic scheme that takes advantage of the slack energy generated in the system when worst-case energy consumption does not take place.
% ElGhor:2011
El Ghor et al.~\cite{ELGhor:2011} proposed a modified EDF scheduler that takes energy production, storage, and consumption into account.
They show by simulation that the approach outperforms other algorithms in terms of rate of deadline misses and required size of energy storage.
% Sharma:2010
Sharma et al.~\cite{Sharma:2010} analyze the problem from a different perspective.
They consider that the function of the device in a WSN is solely to sense and to forward data through the wireless interface.
In this context, they propose a set of policies to minimize the size of an outgoing queue subject to energy availability.
They assume that, the smaller the queue size, the larger the amount of data forwarded through the network, and, consequently, the better the system quality.
% Dehghan
% - Still unpublished

From all studied related work, only Kansal et al.~\cite{Kansal:2007} have analyzed the impact of their work in terms network-wide performance.
Other works only analyze the performance of isolated energy-harvesting sensor nodes.
% For this reason, only the approach presented by Kansal and his colleagues have been considered for comparison with the results presented in this paper.

% Adaptive scheduling techniques have long been used to handle processing
% overloads in real-time systems.
% Buttazzo~\cite{Buttazzo:2011} classifies the adaptive scheduling techniques into three categories: job skipping, period adaptation, and service adaptation.
% Altought initially conceived to handle processing overloads, such techniques may also be applied to handle energy overload, once energy consumption decreases as a consequence of reducing the amount of work executed by the system.
% In fact, a few works have already explored this characteristic~\cite{a few
% works}.

% In job skipping techniques, tasks are prevented from executing when the system is overloaded~\cite{Koren:1995,Ramanathan:1995,Ramanathan:1999}.
% Period adaptation techniques alter tasks' frequencies in order to lower system utilization, hence making the system schedulable~\cite{Buttazzo:1998,Kuo:1991,Seto:1998,Abdelzaher:1997}.
% Service adaptation techniques selectively tune system quality set-points in order to be able to comply with system constraints~\cite{Liu:1991,Cucinotta:2010,Yuan:2006,Cornea:2003}.
% Regardless of the technique, systematic ways to adapt the system are deployed in order to control the impact on system quality.

% Some adaptive scheduling approaches have already been deployed in embedded systems and wireless sensor networks to ensure the lifetime of system batteries.
% Not all of them, however, take into account real-time requirements and/or the impact on system quality.

%VADC
% Wanner et al.~\cite{Wanner:2011} proposes a technique called \emph{Variability-Aware Duty Cycling} (\textsc{Vadc}) that adapts duty cycle of wireless sensors by changing task's periods.
% Besides traditional WSN power management techniques, they also take into account hardware power variability, being the duty cycle adapted to observed variations on energy consumption.
% It has a working implementation for \textsc{TinyOS} that includes abstractions for defining adaptable task parameters (period and iterations only) and system models to derive duty cycles able to guarantee a minimum battery lifetime.
% This work relate to ours in the sense that both works adapt the WSN system to guarantee that the energy demands won't ever surpass the energy availability.
% The core difference among them is that while \textsc{Vadc} considers that the energy demand varies due to hardware power variability, we consider that the energy availability varies.
% Moreover, once in our approach energy consumption is monitored at runtime, variations on energy demand are also captured, being the system also able to adapt to such demand variations. 

%Cinder
% Rumble et al.~\cite{Rumble:2009} presented a service adaptation technique based
% on resource reservation, taking energy as a manageable resource.
% The system is called \emph{Cinder}.
% They defined policies to ensure \textit{isolation}, \textit{delegation}, and \textit{subdivision} of allocated resources, doing it through an abstraction they called \emph{capacitor}.
% The system has a ``main'' capacitor (its battery) with a known charge.
% Each task is associated to a capacitor abstraction that is ``charged'' by a higher level capacitor.
% Child tasks also have capacitors, but instead of being ``charged'' by the battery, they drain resources from its parent task.
% Periodically, the system distributes resources (energy) through the capacitor tree.
% This distribution is based on a consumption rate defined as a function of required system lifetime and available energy.
% Cinder was implemented in the \textsc{HiStar} operating system for mobile phones.

%Levels
% Lachenmann et al.~\cite{Lachenmann:2007} proposed \textsc{Levels}, a service adaptation and multi-version scheduling mechanism for wireless sensing systems.
% Their objective is to maximize system quality while respecting a pre-defined requirement of battery duration lifetime.
% They focus on critical application where there is no redundancy and no node may fail before the required operation time.
% In their approach they assume a component-based system and define ``energy levels'' at which each of system components may behave in a different way, consuming less energy and decreasing system quality as the ``levels'' go down.
% At runtime, the system is adapted by setting its energy level to the one that is able to comply with de lifetime requirement given the amount of available energy.
% Levels was implemented in \textsc{TinyOS}.

%ECOSystem
% Ellis et al.~\cite{Zeng:2005} developed the \textsc{ECOSystem}, which is an operating system with support for application adaptation with focus on multimedia systems.
% Similarly to what Cinder does, they defined an abstraction for energy in the system, the \emph{currentcy}.
% In this system, authors expect the energy resource (currentcy) to be allocated in the same way other resources are (e.g., memory, i/o device), i.e., the application should explicitly allocate energy for its execution.
% Each application is allowed to use a pre-defined amount of energy.
% This amount is updated periodically based on the amount of available energy and the required working time.
% \textsc{ECOSystem} was implemented as a modified version of \textsc{Linux}.

% Table~\ref{tab:related_comparisson} shows a comparison of the presented work.
% The next section presents an approach for integrating the desired
% characteristics of the proposed framework (section~\ref{sec:obj}) and exploring
% application-driven adaptation of RT-WSN applications.

%Comparisson
%
% parameters: classe, real-time (soft/hard), mettering/account method, renewable
% energy, system variability (battery + hardware), simulation/real
% implementation/operating system, sincroniza��o, invers�o de prioridade
%
% \tab{related_comparisson}{Comparison of related work.}
