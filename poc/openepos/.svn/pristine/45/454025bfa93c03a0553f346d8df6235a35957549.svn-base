/*! @class System::Network
    @ingroup abs_network

	@brief The Network abstraction implementation

	Skeleton Class (TODO)


    <!-- *************************************************************** -->

*/

<!-- /*! @file
    Network() {
	db<Network>(TRC) << "Network(unit=0)\n";
    }

    template<unsigned int UNIT>
    Network(unsigned int unit) : _nic(UNIT) {
	db<Network>(TRC) << "Network(unit=" << unit << ")\n";
    }

    ~Network() {
	db<Network>(TRC) << "~Network()\n";
    }

    int send(const Address & to, const void * data, unsigned int size, 
	     const Protocol & prot = ELP) {
	if(size > _nic.mtu())
	    // Fragmentation will take place here
	    db<Network>(WRN) << "Network::send: frame size exceeds MTU!\n";

	MAC_Address dst = _arp_tab.arp(to);
	if(!dst)
	    return -1;

	return _nic.send(dst, prot, data, size);
    }

    int receive(Address * from, void * data, unsigned int size,
		Protocol * prot) {
	if(size > _nic.mtu())
	    // Defragmentation will take place here
	    db<Network>(WRN) << "Network::receive: frame size exceeds MTU!\n";

	MAC_Address src;
	int stat = _nic.receive(&src, prot, data, size);

	if(stat > 0)
	    *from = _arp_tab.rarp(src);

	return stat;
    }

    int receive(Address * from, void * data, unsigned int size) {
	Protocol p;
	return receive(from, data, size, &p);
    }

    void reset() { _nic.reset(); }

    const Statistics & statistics() { return _nic.statistics(); }

-->

