----------------------- REVIEW 1 ---------------------
PAPER: 124
TITLE: RTSNoC: a predictive Network-on-Chip for real-time applications
AUTHORS: Marcelo Berejuck, Antonio Augusto Frohlich, Hiren Patel and Tiago Rogerio Much

Summary of contribution (shown to the authors):

The design and analysis of a predictable NoC is presented.
An implementation on an FPGA is shown and compared to alternative SoC-implementations.


Constructive comments (shown to the authors):

The paper is well written and the details of e.g. the router architecture are sufficiently described.

Although there are some quantitative results in terms of LUT, FF etc. figures, these results could be discussed and interpreted in more detail.

Also the  latency diagram (Fig. 9) should be discussed in more detail.
Why are there two curves?

Altogether a nice paper which can be accepted.


----------------------- REVIEW 2 ---------------------
PAPER: 124
TITLE: RTSNoC: a predictive Network-on-Chip for real-time applications
AUTHORS: Marcelo Berejuck, Antonio Augusto Frohlich, Hiren Patel and Tiago Rogerio Much

Summary of contribution (shown to the authors):

The paper presents a NoC design with predictable WCET. Each flit in the network includes routing information such that it can be handled independently from the other flits of a packet. A priority-based dynamic round-robin algorithm is used to guarantee that the waiting time of a flit does not exceed a certain value. A WCET analysis is done as well as the average jitter and latency of the NoC are given for an application example


Constructive comments (shown to the authors):

Overall, I think you present an interesting NoC design for use cases where a WCET analysis is required. Yet, I have two major concerns. One is with regard to the terminology and one is with regard to the comparison/evaluation.
You state that you use wormhole switching but you include routing information for every flit. This actually results in store and forward switching with packets sizes reduced to the size of a flit. I wouldn’t call this wormhole switching. The other point is that you compare your router with 8 ports against a router which can only support a single processing element. It is not surprising that your complete design requires less area than the SoCIN-TDM system. If you would increase the number of ports of you router you would even require less area…
You should also provide some information on the routing algorithm used. Is it XY routing? As each flit is routed individually, is there the danger of out-of-order arrival of flits? There are some typos (e.g. page 3, right column, paragraph above figure 4).


----------------------- REVIEW 3 ---------------------
PAPER: 124
TITLE: RTSNoC: a predictive Network-on-Chip for real-time applications
AUTHORS: Marcelo Berejuck, Antonio Augusto Frohlich, Hiren Patel and Tiago Rogerio Much

Dear Author,
your topic is absolutely relevant for the community and i appreciate your contribution. However, you paper needs to be updated with some more detailed information about the routing mechnisms which makes the noc predictable. how can you ensure the traffic and therefore the timing with your approach?


----------------------- REVIEW 4 ---------------------
PAPER: 124
TITLE: RTSNoC: a predictive Network-on-Chip for real-time applications
AUTHORS: Marcelo Berejuck, Antonio Augusto Frohlich, Hiren Patel and Tiago Rogerio Much

Summary of contribution (shown to the authors):
In this work, the authors proposed a 8-port router architecture for the NoC called RTSNoC. The proposed NoC routes for each individual flit rather than the whole package as in conventional NoC. Therefore, each flit contains the routing information. A worst-case latency analysis model was also presented in the paper. The authors did a comparison with a SoCIN NoC and claimed that their NoC outperforms the SoCIN NoC in latency and overall system resource utilization.

Constructive comments (shown to the authors):
In general the complexity of some parts of a router grows exponential with the number of cores connected to the router. That’s why, in general, routers with a large number of ports are unintended. Moreover, the routing algorithm required for such a router is not included in the paper.
It’s not a fair comparison with area result, because the authors take not only the 4 ports per the 8-port router dedicated to connect the cores, but also some open ports at the boarders of the NoC. If they would take the same assumption for a common NoC with 5-port routers they would only need 12 router to connect 20 cores. The same situation appeared in the Scenario 2. The authors used more than 4 ports for connecting the cores in their system while there are some open ports at the borders of the SoCIN NoC. This is not a fair comparison.
What the authors assumed as Scenario 1 is not fair since the authors do not use a NoC (which usually needs to have more than one router). In this Scenario, there is only 1 router for the proposed NoC.
The biggest problem is that the author did not show the size of the package because their NoC routes for each flit. If the package contains 100 flits, the proposed NoC needs to make the routing decision 100 times at each router while the SoCIN NoC needs to make the routing decision only 1 times at each router.
The authors did take the bandwidth and the throughput of their NoC into consideration.
The authors stated that they can predict the worst-case latencies but they did not show in detail what they did for the whole package.
