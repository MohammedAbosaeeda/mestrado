\section*{Anexo: Exercícios práticos}
\label{sec:exercicios}

O \epos suporta uma variedade de arquiteturas, variando de 8 a 32 bits.
Atualmente, estas arquiteturas são:
\begin{itemize}
  \item IA32: single and multi-core;
  \item AVR8: atmega16, atmega128, atmega1281, and at90can128 microcontrollers;
  \item PPC32: including ml310;
  \item MIPS32: including plasma soft-core;
  \item ARM7: incluindo o MC13224V (Freescale) e o AT91SAM7 (Atmel).
\end{itemize}

O \epos é software aberto, livre para uso não comercial. Mais detalhes sobre a
licença do \epos podem ser encontrados no sítio do
projeto~\cite{Project:EPOS:2010}.

Esta seção apresenta os passos básicos para obter o \epos, instalar seu ambiente
de desenvolvimento, compilá-lo e executá-lo em um \emote.

\subsection*{Baixando e instalando o ambiente de desenvolvimento}

O \epos foi concebido prevendo seu desenvolvimento utilizando o ambiente
GNU/Linux. Assim, o \epos é um sistema cross-compilado no GNU/Linux para várias
plataformas alvo, utilizando o \textit{GNU Compiler Collection} (GCC).
Versões binárias deste compilador para as plataformas que o \epos suporta estão
disponíveis para serem baixadas no sítio do \epos~\cite{Project:EPOS:2010}. O
primeiro passo é baixar o compilador e instalá-lo conforme as instruções
constantes no sítio.

O \epos também está disponível para baixar no sítio do projeto. Após baixar o
sistema, é necessário descompactá-lo e configurar as seguintes variáveis de
ambiente em seu sistema:

\begin{verbatim}
export EPOS=/path/to/epos
export PATH=$PATH:$EPOS/bin
\end{verbatim}

\subsubsection*{Configurando o \epos}

A configuração do \epos é realizada através da definição de variáveis no arquivo
\texttt{\$EPOS/makedefs}, com as seguintes opções:
\begin{itemize}
  \item \textbf{MODE:} configura a arquitetura do sistema operacional:
  \begin{itemize}
    \item \textit{Library:} sistema é ligado à aplicação;
    \item \textit{Builtin:} sistema e aplicação estão no mesmo espaço de
    endereçamento;
    \item \textit{Kernel:} sistema e aplicação estão em espaços de endereçamento
    diferentes com uma camada de chamadas de sistema (\textit{System Call})
    entre eles.
  \end{itemize}
  \item \textbf{ARCH:} configura a arquitetura do processador na plataforma
  alvo:
  \begin{itemize}
    \item \textit{ARCH\_IA32:} Intel x86 32-bits Architecture;
    \item \textit{ARCH\_AVR8:} Atmel AVR 8-bits Architecture;
    \item \textit{ARCH\_PPC32:} IBM PowerPC 32-bits Architecture;
    \item \textit{ARCH\_MIPS32:} MIPS 32-bits Architecture;
  \end{itemize}
  \item \textbf{MACH:} configura a máquina para a qual o sistema será gerado:
  \begin{itemize}
    \item \textit{MACH\_PC:} computadores pessoais;
    \item \textit{MACH\_ATMEGA16:} microcontrolador Atmel ATMega16;
    \item \textit{MACH\_ATMEGA128:} microcontrolador Atmel ATMega128;
    \item \textit{MACH\_ATMEGA1281:} microcontrolador Atmel ATMega1281;
    \item \textit{MACH\_AT90CAN128:} microcontrolador Atmel AT90CAN128;
    \item \textit{MACH\_ML310:} Xilinx ML310 and ML403 Evaluation Boards;
    \item \textit{MACH\_PLASMA:} microprocessador Plasma;
  \end{itemize}
\end{itemize}


\subsection*{Compilando o \epos}

Com o \epos configurado, para compilar o sistema basta executar um comando
\texttt{make all} dentro do diretório em que o sistema foi instalado
(\texttt{\$EPOS}). Devido a algumas variações nas distribuições GNU/Linux
utilizadas, alguns problemas podem surgir durante este processo. Soluções para
estes problemas estão documentados no guia de usuário do \epos, disponível no
sítio do projeto~\cite{EPOS:UserGuide:2010}.


\subsection*{Compilando uma aplicação para o \epos}

Para compilar aplicações para o \epos, o sistema provê uma ferramenta
específica: o \texttt{eposcc}. Esta ferramenta analisa a aplicação, busca a
configuração do sistema e realiza os comandos de compilação adequados utilizando
o GCC. O primeiro passo é compilar a aplicação através do seguinte comando:

\begin{verbatim}
$ eposcc app/your_app.cc -o app/your_app.o
\end{verbatim}

Feito isso, basta ligar o arquivo objeto da aplicação com o sistema operacional,
pelo seguinte comando:

\begin{verbatim}
$ eposcc -o app/your_app app/your_app.o
\end{verbatim}

Agora, o arquivo \texttt{app/your\_app} contém o binário de sua aplicação já
ligado ao sistema operacional. Para ter uma imagem binária pronta para ser
carregada em seu hardware, basta utilizar a ferramenta \texttt{eposmkbi}, que é
responsável por gerar uma imagem completa do sistema com as aplicações para
execução na plataforma alvo. Para isso, basta executar o seguinte comando:

\begin{verbatim}
$ eposmkbi img/your_app.img app/your_app
\end{verbatim}

Caso a imagem gerada para o sistema seja multitarefa, e você tenha compilado
mais de uma aplicação para o sistema, basta listar todas as aplicações geradas
no comando de construção da imagem de boot, deste modo:

\begin{verbatim}
$  eposmkbi img/your_app.img app/your_app1 app/your_app2...
\end{verbatim}

\subsection*{Hello World!}

Para simplificar o processo de desenvolvimento da aplicação, o \texttt{makefile}
do \epos está configurado para construir automaticamente o sistema para uma
aplicação específica que pode ser informada pela linha de comando da seguinte
forma:

\begin{verbatim}
$  make APPLICATION=helloworld
\end{verbatim}

Deste modo, o \texttt{makefile} construirá o \epos e, em seguida, compilará a
aplicação informada e preparará a imagem de boot pronta para o sistema. Por
exemplo, para criar uma aplicação ``Hello World!'' no \epos, basta criar um
arquivo, por exemplo, \texttt{helloworld.cc} no diretório \texttt{\$EPOS/app}.
Deste modo, a execução do comando acima resultará na imagem do sistema com a
aplicação informada, pronta para ser carregada na plataforma alvo.

\subsection*{Programando no \epos}

A API de programação do \epos é composta de dois tipos de componentes de
software: abstrações e mediadores. As abstrações são classes C++ independentes
de plataforma com interface e comportamento bem definidos. Suporte específico
para plataformas é implementado através de mediadores de hardware, que são,
funcionalmente, equivalentes aos \emph{device drivers} do Unix, mas sem utilizar
uma estrutura tradicional de HAL (\emph{Hardware Abstraction Layer}). Ao invés
disto, eles mantém um contrato de interface entre as abstrações e dispositivos
de hardware através de técnicas de metaprogramação estática (C++ templates), o
que implica na dissolução do código dos mediadores nas abstrações em tempo de
compilação, eliminando sobrecustos de chamada de função. O \epos ainda oferece
uma série de componentes ``utilitários'', como implementações de estruturas de
dados (lista, fila, mapa, etc).

A documentação da API do \epos é mantida atualizada no sítio do
projeto~\cite{EPOS:UserGuide:2010}.

