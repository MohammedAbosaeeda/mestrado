/*! @class System::AVR_ADC
    @ingroup med_adc

    @brief Common implementation for AVR ADCs

    @todo
    Transparent interrupt handling from multiple channels. Currently,
    the mediator does not provide an automatic way to know which channel
    generated the last data_ready interrupt.
 
    <!-- *********************************************************************** -->

    @fn System::AVR_ADC::AVR_ADC(unsigned char channel, unsigned char reference, unsigned char trigger, Hertz frequency)
    See @ref System::AVR_ADC::AVR_ADC::config(unsigned char channel, unsigned char reference, unsigned char trigger, Hertz frequency) "config".

    <!-- *********************************************************************** -->

    @fn void System::AVR_ADC::config(unsigned char channel, unsigned char reference, unsigned char trigger, int frequency)
	@brief Saves configuration values for this instance of ADC

	@param channel Desired AVR_ADC::Channel
	@param reference Desired AVR_ADC::Reference
	@param trigger Desired AVR_ADC::Trigger
	@param frequency Desired frequency in AVR_ADC::Hertz

	@note
	This method does not actually configure the device, it only saves the configuration values. For configuring the device see @ref System::AVR_ADC::enable() "enable".

    <!-- *********************************************************************** -->

    @fn void System::AVR_ADC::config(unsigned char * channel, unsigned char * reference, unsigned char * trigger, int * frequency)
	@brief Reads configuration values for this instance of ADC
    
    <!-- *********************************************************************** -->

    @fn int System::AVR_ADC::sample()

	@copydoc ADC_Common::sample()

    <!-- *********************************************************************** -->

    @fn int System::AVR_ADC::get()
	@copydoc ADC_Common::get()

    <!-- *********************************************************************** -->

    @fn bool System::AVR_ADC::finished()
	@copydoc ADC_Common::finished()


    <!-- *********************************************************************** -->

    @fn bool System::AVR_ADC::enable()
	
	@copydoc ADC_Common::enable()

    <!-- *********************************************************************** -->

    @fn void System::AVR_ADC::disable()

	@copydoc ADC_Common::disable()


    <!-- *********************************************************************** -->

    @fn void System::AVR_ADC::reset()

	@copydoc ADC_Common::reset()

    <!-- *********************************************************************** -->

    @fn void System::AVR_ADC::int_enable()

	Enables the ADC data ready interrupt. 

    <!-- *********************************************************************** -->

    @fn void System::AVR_ADC::int_enable()

	Enables the ADC data ready interrupt. 

    <!-- *********************************************************************** -->

    @fn void System::AVR_ADC::int_disable()

	Enables the ADC data ready interrupt. 

    <!-- *********************************************************************** -->

    <!-- *********************************************************************** -->

    @class System::ATMega128_ADC
    @ingroup med_adc

    @brief This class is simply a wrapper for the AVR_ADC common class.

    <!-- *********************************************************************** -->

    <!-- *********************************************************************** -->

    @class System::ATMega16_ADC
    @ingroup med_adc

    @brief This class is simply a wrapper for the AVR_ADC common class.





*/
