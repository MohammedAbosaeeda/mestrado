/* Generated By:JavaCC: Do not edit this line. KesoFilterReader.java */
package keso.editor.filter.manager.reader;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Vector;
import keso.editor.filter.*;
import keso.editor.filter.manager.*;

/**
 * @author  Wilhelm Haas
 */
public class KesoFilterReader implements KesoFilterReaderConstants {
        public static void parseFile(String filename) throws Exception {
                KesoFilterReader parser = null;
                try {
                        parser = new KesoFilterReader(new FileInputStream(filename));
                } 
                catch (FileNotFoundException ex) {
                	throw new Exception(ex.toString());
                }
                catch (Exception ex) {
                        ex.printStackTrace();
                        throw new Exception(ex.toString());
                }

                try {
                        parser.start();
                } catch (Exception ex) {
                        throw new Exception(ex.toString());
                }
        }

  final public void start() throws ParseException {
        Token filtername;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINECOMMENT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINECOMMENT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(LINECOMMENT);
      }
      filtername = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGNMENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FILTER:
        jj_consume_token(FILTER);
        jj_consume_token(LPAREN);
                                        parseFilter(filtername.image);
        jj_consume_token(RPAREN);
        break;
      case COMBINEDFILTER:
        jj_consume_token(COMBINEDFILTER);
        jj_consume_token(LPAREN);
                                        parseTwoStageFilter(filtername.image);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
    }
    jj_consume_token(0);
  }

  final public void parseFilter(String filtername) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITHOUT_CLASS_TYPE:
    case GET_PARENT_OF_TYPE:
      parseDataFilter(filtername);
      break;
    case IDENTIFIER:
      parseFilterFilter(filtername);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parseDataFilter(String filtername) throws ParseException {
        Token operation;
        Token classtype;
        KesoFilter filter;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITHOUT_CLASS_TYPE:
      operation = jj_consume_token(WITHOUT_CLASS_TYPE);
                                filter = new KesoFilter();
                                filter.setRoot();
                                filter.setOperation(operation.image);
                                KesoFilterManager.add(filtername, filter);
      break;
    case GET_PARENT_OF_TYPE:
      operation = jj_consume_token(GET_PARENT_OF_TYPE);
      jj_consume_token(COMMA);
      classtype = jj_consume_token(IDENTIFIER);
                                filter = new KesoFilter();
                                filter.setRoot();
                                filter.setOperation(operation.image);
                                filter.addClassType(classtype.image);
                                KesoFilterManager.add(filtername, filter);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parseFilterFilter(String filtername) throws ParseException {
        Token subfilter;
        Token operation;
        Token classtype;
        Vector classtypes;
        KesoFilter filter;
    subfilter = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITHOUT_CLASS_TYPE:
      operation = jj_consume_token(WITHOUT_CLASS_TYPE);
                                filter = new KesoFilter();
                                filter.setFirstFilter(subfilter.image);
                                filter.setOperation(operation.image);
                                KesoFilterManager.add(filtername, filter);
      break;
    case GET_PARENT_OF_TYPE:
      operation = jj_consume_token(GET_PARENT_OF_TYPE);
      jj_consume_token(COMMA);
      classtype = jj_consume_token(IDENTIFIER);
                                filter = new KesoFilter();
                                filter.setFirstFilter(subfilter.image);
                                filter.setOperation(operation.image);
                                filter.addClassType(classtype.image);
                                KesoFilterManager.add(filtername, filter);
      break;
    case FILTER_BY_CLASSTYPE:
      operation = jj_consume_token(FILTER_BY_CLASSTYPE);
      jj_consume_token(COMMA);
      jj_consume_token(LBRACE);
                                filter = new KesoFilter();
                                filter.setFirstFilter(subfilter.image);
                                filter.setOperation(operation.image);
                                parseClassTypes(filter);
                                KesoFilterManager.add(filtername, filter);
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parseTwoStageFilter(String filtername) throws ParseException {
        Token firstname;
        Token secondname;
        Token operation;
        KesoFilter filter;
    firstname = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    secondname = jj_consume_token(IDENTIFIER);
    jj_consume_token(COMMA);
    operation = jj_consume_token(TWO_STAGE_OPERATION);
                filter = new KesoFilter();
                filter.setFirstFilter(firstname.image);
                filter.setSecondFilter(secondname.image);
                filter.setOperation(operation.image);
                KesoFilterManager.add(filtername, filter);
  }

  final public void parseClassTypes(KesoFilter filter) throws ParseException {
        Token classtype;
    classtype = jj_consume_token(IDENTIFIER);
                filter.addClassType(classtype.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      classtype = jj_consume_token(IDENTIFIER);
                        filter.addClassType(classtype.image);
    }
  }

  public KesoFilterReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token;
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1020,0x20,0xc0,0x1500,0x500,0xd00,0x400000,};
   }

  public KesoFilterReader(java.io.InputStream stream) {
     this(stream, null);
  }
  public KesoFilterReader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KesoFilterReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public KesoFilterReader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KesoFilterReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public KesoFilterReader(KesoFilterReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(KesoFilterReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[27];
    for (int i = 0; i < 27; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
