% ------------------------------------------------------------------------------
\section{Introduction}
Very-High Level Languages (VHLL), from which \java~and \lua~are examples, is a
kind of programming language which provide developers with features to improve
their productivity\cite{Wilson:1999}.
Productivity improvement is obtained by using constructions with a higher level
of abstraction enabling the developer to express and validate his ideas in a
short period of time (such as object orientation, domain specific constructions
and APIs), and by features that make the occurrence of programming errors less
often reducing the time spend on program debugging (such as automatic memory
management, memory protection, and exceptions).

During the last ten years several initiatives have been taken in order to
enable the use of VHLLs not only in general propose systems scenario as well in
embedded systems scenario fulfilling the time and resource requirements impose
by such systems.
However, in order to be really useful for embedded systems VHLLs must provide
features for interacting with the environment where the embedded system
is inserted on.
Such interaction is usually implemented by using hardware devices.
Sensors and actuators enable the system to interact with the environment.
Transmitters and receivers are used for communicating with other systems.
Timers and alarms are used to implement real-time operations.

The interaction between VHLLs and hardware devices is performed by using the so
called Foreign Function Interface (FFI).
However, a FFI do not specify by itself how to abstract hardware or how
to organize these abstractions.
This work aims to fulfill this gap, introducing a method to interface hardware
devices and applications written using VHLLs in context of embedded systems.
We propose a method to abstract such hardware devices and we show that the
problem of adapting a hardware device to be used for a VHLL can be faced as an
aspect weaving problem, automatically generating the binding between the device
and the language.

The next sections of this paper are organized in the following way: Section
\ref{sec:relat} reviews how VHLLs interact with hardware devices and how
hardware devices can be abstracted and organized.
Section \ref{sec:proposal} introduces the proposed method for
abstracting hardware devices and shows how the adaptation of a hardware device
for a specific VHLL can be solved as an aspect weaving.
Section \ref{sec:eval} presents our cases study as well the obtained results
on evaluating our proposal according to performance, memory consumption,
portability, support to the developer, and reuse.
Our final considerations are presented in Section \ref{sec:conc}.

% ------------------------------------------------------------------------------
