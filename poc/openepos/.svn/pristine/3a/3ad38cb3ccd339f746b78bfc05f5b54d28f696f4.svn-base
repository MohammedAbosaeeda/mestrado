# THIS FILE IS AUTO GENERATED BY KESO! DON'T EDIT


# Supported hardware architectures ---------------------------------------------
ARCH_IA32       := ia32
ARCH_AVR8       := avr8
ARCH_PPC32      := ppc32
ARCH_ARM7       := arm7

# Supported machines -----------------------------------------------------------
MACH_PC         := pc
MACH_ATMEGA1281 := atmega1281
MACH_ML310      := ml310

# System configuration ---------------------------------------------------------
ARCH            := $(ARCH_IA32)
MACH            := $(MACH_PC)

ifndef ARCH
ARCH            := $(ARCH_IA32)
endif
ifndef MACH
MACH            := $(MACH_PC)
endif

# "Hardcoded stuf" -------------------------------------------------------------
EPOSPATH = ../../..
KESOROOTPATH = $(EPOSPATH)/tools/keso_it
KESOINCLUDES = $(KESOROOTPATH)/src/kore
EPOSBINPATH = $(EPOSPATH)/bin

ifeq ($(ARCH),$(ARCH_AVR8))
PREFIX = avr
else
PREFIX = ia32
endif

# Paths ------------------------------------------------------------------------
# As DMEC only runs on PC, setting to compiling explicitly using GCC 4.4.4
EPOSLIBPATH = $(EPOSPATH)/lib
GCCPATH = /usr/local/$(PREFIX)/gcc-4.4.4
GCCBINPATH = $(GCCPATH)/bin

# -----------------------------------------------------------------------------
# Tools -----------------------------------------------------------------------
CC=$(GCCBINPATH)/$(PREFIX)-gcc
CXX=$(GCCBINPATH)/$(PREFIX)-g++
STRIP=$(GCCBINPATH)/$(PREFIX)-strip
SIZE=$(GCCBINPATH)/$(PREFIX)-size
LD=$(GCCBINPATH)/$(PREFIX)-ld
AR=$(GCCBINPATH)/$(PREFIX)-ar
OBJCOPY=$(GCCBINPATH)/$(PREFIX)-objcopy
OBJDUMP=$(GCCBINPATH)/$(PREFIX)-objdump

# -----------------------------------------------------------------------------
# C/C++ Wrapper OBJECTS (should be compiled together with EPOS) ----------------
WRAPPERPATH = $(EPOSPATH)/app/dmec/src
WRAPPEROBJECTS = $(WRAPPERPATH)/dmec_abst_assert.do \
$(WRAPPERPATH)/dmec_picture_motion_estimator_coordinator.do \
$(WRAPPERPATH)/dmec_abst_random.do \
$(WRAPPERPATH)/dmec_block_mode_factory.do \
$(WRAPPERPATH)/dmec_pc_pme_worker_proxy_db_sth.do \
$(WRAPPERPATH)/dmec_lazy_picture.do \
$(WRAPPERPATH)/c_picture.do \
$(WRAPPERPATH)/dmec_pc_synchronizer.do \
$(WRAPPERPATH)/c_picture_motion_estimator.do \
$(WRAPPERPATH)/dmec_abst_synchronizer.do \
$(WRAPPERPATH)/c_vectorial_pmc.do \
$(WRAPPERPATH)/dmec_h264_modes_partitioner.do \
$(WRAPPERPATH)/dmec_reference_full_search_bma.do \
$(WRAPPERPATH)/dmec_picture.do \
$(WRAPPERPATH)/dmec_macroblock.do \
$(WRAPPERPATH)/dmec_block_mode.do \
$(WRAPPERPATH)/dmec_picture_motion_estimator_worker.do \
$(WRAPPERPATH)/dmec_full_search_match_algorithm.do \
$(WRAPPERPATH)/dmec_dmec_picture.do \
$(WRAPPERPATH)/dmec_block.do \
$(WRAPPERPATH)/dmec_reference_picture_motion_counterpart.do \
$(WRAPPERPATH)/dmec_vectorial_pmc.do \
$(WRAPPERPATH)/dmec_flat_h264_pmc_node.do \
$(WRAPPERPATH)/dmec_error.do \
$(WRAPPERPATH)/c_test_support.do \
$(WRAPPERPATH)/dmec_picture_partitioner.do \
$(WRAPPERPATH)/dmec_lazy_flat_h264_pmc.do \
$(WRAPPERPATH)/dmec_plane.do \
$(WRAPPERPATH)/dmec_util_test_support.do \
$(WRAPPERPATH)/dmec_block_mode_type.do


# -----------------------------------------------------------------------------
# Compilation / linkedition flags ---------------------------------------------
CFLAGS = -I $(KESOINCLUDES) -DTARGET_EPOS -ansi -g -O3 -Wall
CFLAGS += -I $(EPOSPATH)/include

ifeq ($(ARCH),$(ARCH_AVR8))
CFLAGS += -DAVR8
endif

# -----------------------------------------------------------------------------
# Main Target -----------------------------------------------------------------
all: epos_system

# -----------------------------------------------------------------------------

# EPOS image ------------------------------------------------------------------
epos_system: epos.img

STRIP_FLAGS = -R .note -R .comment

ifeq ($(ARCH),$(ARCH_AVR8))
LD_FLAGS = -m avr5
else
LD_FLAGS = 
endif

ifeq ($(ARCH),$(ARCH_AVR8))
WRAPPEROBJECTS += $(EPOSPATH)/src/mach/atmega1281/epos_mesh_bean2_led_master_c_wrapper.o
endif

EXTRA_OBJECTS=$(WRAPPEROBJECTS)

ifeq ($(ARCH),$(ARCH_AVR8))
EXTRA_OBJECTS += _mulhi3.object _mulqi3.object
endif


epos.img: libKESO.a os.o
	@echo EPOS IMG
	$(EPOSBINPATH)/eposcc --echo --library $(LD_FLAGS) --gc-sections -o epos.elf os.o -L. -lKESO $(EXTRA_OBJECTS)
	$(STRIP) $(STRIP_FLAGS) -o epos.tmp epos.elf
	$(EPOSBINPATH)/eposmkbi $(EPOSPATH) epos.img epos.tmp

# -----------------------------------------------------------------------------

# Clean Target ----------------------------------------------------------------
clean: 
	rm -f *.o epos.elf epos.img epos.tmp epos.dis epos.hex libKESO.a

# -----------------------------------------------------------------------------

# KESO library ----------------------------------------------------------------
OBJS_KESO = c1_Object_m1__init_.o c5_PictureMotionEstimator_m1_match.o c5_PictureMotionEstimator_m2__init_.o c4_DmecApp_m1_launch.o c4_DmecApp_m2__init_.o c6_StringBuffer_m1_append.o c6_StringBuffer_m3_copy_chars.o c6_StringBuffer_m4_append.o c6_StringBuffer_m2_ensureCapacity.o c6_StringBuffer_m5_setLength.o c6_StringBuffer_m6__init_.o c6_StringBuffer_m7__init_.o c7_NativeTestSupport_m2_testPictureMotionCounterpart.o c7_NativeTestSupport_m1_createPicture.o c7_NativeTestSupport_m3__init_.o char_array.o c8_Math_m1_min.o c8_Math_m2_max.o c8_Math_m3__init_.o c9_Throwable_m1__init_.o c11_StringIndexOutOfBoundsException_m1__init_.o c12_String_m2_getChars.o c12_String_m4_charArrayCopy.o c12_String_m5__clinit_.o c12_String_m3_out_of_bounds.o c12_String_m1_length.o c12_String_m6__init_.o c10_RuntimeException_m1__init_.o c13_DebugOut_m1_println.o c13_DebugOut_m3__clinit_.o c13_DebugOut_m2_println.o c13_DebugOut_m4_raw_print.o c13_DebugOut_m5__init_.o c3_Task_m2__clinit_.o c3_Task_m1__init_.o c30_Picture_m1__init_.o c31_PictureMotionCounterpart_m1__init_.o irr.o domains.o keso_main.o 
libKESO.a: global.o $(OBJS_KESO) keso_main.o
	$(AR) rc libKESO.a global.o keso_main.o $(OBJS_KESO)

# -----------------------------------------------------------------------------

# "OSEK Operating System" -----------------------------------------------------
os.o: os.cc
	@echo OBJ os.o
	$(EPOSBINPATH)/eposcc --echo -c -ansi -Werror -O2 os.cc

# -----------------------------------------------------------------------------

# C files targets -------------------------------------------------------------
global.o: global.c
	@echo OBJ global.o
	$(CC) $(CFLAGS) -Werror -c -o global.o global.c


sysgen: keso_main.oil
	@echo System Generation
	sysgen4oeli -f keso_main.oil -o ./ -b c_generator -c $(KESOROOTPATH)/system_generator/backends/c_generator/ $(SYSGENDEFS)
# --- More C files targets
c1_Object_m1__init_.o: c1_Object_m1__init_.c c1_Object.h
	@echo OBJ c1_Object_m1__init_.o
	@$(CC) $(CFLAGS) -c -o c1_Object_m1__init_.o c1_Object_m1__init_.c
c5_PictureMotionEstimator_m1_match.o: c5_PictureMotionEstimator_m1_match.c c5_PictureMotionEstimator.h
	@echo OBJ c5_PictureMotionEstimator_m1_match.o
	@$(CC) $(CFLAGS) -c -o c5_PictureMotionEstimator_m1_match.o c5_PictureMotionEstimator_m1_match.c
c5_PictureMotionEstimator_m2__init_.o: c5_PictureMotionEstimator_m2__init_.c c5_PictureMotionEstimator.h
	@echo OBJ c5_PictureMotionEstimator_m2__init_.o
	@$(CC) $(CFLAGS) -c -o c5_PictureMotionEstimator_m2__init_.o c5_PictureMotionEstimator_m2__init_.c
c4_DmecApp_m1_launch.o: c4_DmecApp_m1_launch.c c4_DmecApp.h
	@echo OBJ c4_DmecApp_m1_launch.o
	@$(CC) $(CFLAGS) -c -o c4_DmecApp_m1_launch.o c4_DmecApp_m1_launch.c
c4_DmecApp_m2__init_.o: c4_DmecApp_m2__init_.c c4_DmecApp.h
	@echo OBJ c4_DmecApp_m2__init_.o
	@$(CC) $(CFLAGS) -c -o c4_DmecApp_m2__init_.o c4_DmecApp_m2__init_.c
c6_StringBuffer_m1_append.o: c6_StringBuffer_m1_append.c c6_StringBuffer.h
	@echo OBJ c6_StringBuffer_m1_append.o
	@$(CC) $(CFLAGS) -c -o c6_StringBuffer_m1_append.o c6_StringBuffer_m1_append.c
c6_StringBuffer_m3_copy_chars.o: c6_StringBuffer_m3_copy_chars.c c6_StringBuffer.h
	@echo OBJ c6_StringBuffer_m3_copy_chars.o
	@$(CC) $(CFLAGS) -c -o c6_StringBuffer_m3_copy_chars.o c6_StringBuffer_m3_copy_chars.c
c6_StringBuffer_m4_append.o: c6_StringBuffer_m4_append.c c6_StringBuffer.h
	@echo OBJ c6_StringBuffer_m4_append.o
	@$(CC) $(CFLAGS) -c -o c6_StringBuffer_m4_append.o c6_StringBuffer_m4_append.c
c6_StringBuffer_m2_ensureCapacity.o: c6_StringBuffer_m2_ensureCapacity.c c6_StringBuffer.h
	@echo OBJ c6_StringBuffer_m2_ensureCapacity.o
	@$(CC) $(CFLAGS) -c -o c6_StringBuffer_m2_ensureCapacity.o c6_StringBuffer_m2_ensureCapacity.c
c6_StringBuffer_m5_setLength.o: c6_StringBuffer_m5_setLength.c c6_StringBuffer.h
	@echo OBJ c6_StringBuffer_m5_setLength.o
	@$(CC) $(CFLAGS) -c -o c6_StringBuffer_m5_setLength.o c6_StringBuffer_m5_setLength.c
c6_StringBuffer_m6__init_.o: c6_StringBuffer_m6__init_.c c6_StringBuffer.h
	@echo OBJ c6_StringBuffer_m6__init_.o
	@$(CC) $(CFLAGS) -c -o c6_StringBuffer_m6__init_.o c6_StringBuffer_m6__init_.c
c6_StringBuffer_m7__init_.o: c6_StringBuffer_m7__init_.c c6_StringBuffer.h
	@echo OBJ c6_StringBuffer_m7__init_.o
	@$(CC) $(CFLAGS) -c -o c6_StringBuffer_m7__init_.o c6_StringBuffer_m7__init_.c
c7_NativeTestSupport_m2_testPictureMotionCounterpart.o: c7_NativeTestSupport_m2_testPictureMotionCounterpart.c c7_NativeTestSupport.h
	@echo OBJ c7_NativeTestSupport_m2_testPictureMotionCounterpart.o
	@$(CC) $(CFLAGS) -c -o c7_NativeTestSupport_m2_testPictureMotionCounterpart.o c7_NativeTestSupport_m2_testPictureMotionCounterpart.c
c7_NativeTestSupport_m1_createPicture.o: c7_NativeTestSupport_m1_createPicture.c c7_NativeTestSupport.h
	@echo OBJ c7_NativeTestSupport_m1_createPicture.o
	@$(CC) $(CFLAGS) -c -o c7_NativeTestSupport_m1_createPicture.o c7_NativeTestSupport_m1_createPicture.c
c7_NativeTestSupport_m3__init_.o: c7_NativeTestSupport_m3__init_.c c7_NativeTestSupport.h
	@echo OBJ c7_NativeTestSupport_m3__init_.o
	@$(CC) $(CFLAGS) -c -o c7_NativeTestSupport_m3__init_.o c7_NativeTestSupport_m3__init_.c
char_array.o: char_array.c char_array.h
	@echo OBJ char_array.o
	@$(CC) $(CFLAGS) -c -o char_array.o char_array.c
c8_Math_m1_min.o: c8_Math_m1_min.c c8_Math.h
	@echo OBJ c8_Math_m1_min.o
	@$(CC) $(CFLAGS) -c -o c8_Math_m1_min.o c8_Math_m1_min.c
c8_Math_m2_max.o: c8_Math_m2_max.c c8_Math.h
	@echo OBJ c8_Math_m2_max.o
	@$(CC) $(CFLAGS) -c -o c8_Math_m2_max.o c8_Math_m2_max.c
c8_Math_m3__init_.o: c8_Math_m3__init_.c c8_Math.h
	@echo OBJ c8_Math_m3__init_.o
	@$(CC) $(CFLAGS) -c -o c8_Math_m3__init_.o c8_Math_m3__init_.c
c9_Throwable_m1__init_.o: c9_Throwable_m1__init_.c c9_Throwable.h
	@echo OBJ c9_Throwable_m1__init_.o
	@$(CC) $(CFLAGS) -c -o c9_Throwable_m1__init_.o c9_Throwable_m1__init_.c
c11_StringIndexOutOfBoundsException_m1__init_.o: c11_StringIndexOutOfBoundsException_m1__init_.c c11_StringIndexOutOfBoundsException.h
	@echo OBJ c11_StringIndexOutOfBoundsException_m1__init_.o
	@$(CC) $(CFLAGS) -c -o c11_StringIndexOutOfBoundsException_m1__init_.o c11_StringIndexOutOfBoundsException_m1__init_.c
c12_String_m2_getChars.o: c12_String_m2_getChars.c c12_String.h
	@echo OBJ c12_String_m2_getChars.o
	@$(CC) $(CFLAGS) -c -o c12_String_m2_getChars.o c12_String_m2_getChars.c
c12_String_m4_charArrayCopy.o: c12_String_m4_charArrayCopy.c c12_String.h
	@echo OBJ c12_String_m4_charArrayCopy.o
	@$(CC) $(CFLAGS) -c -o c12_String_m4_charArrayCopy.o c12_String_m4_charArrayCopy.c
c12_String_m5__clinit_.o: c12_String_m5__clinit_.c c12_String.h
	@echo OBJ c12_String_m5__clinit_.o
	@$(CC) $(CFLAGS) -c -o c12_String_m5__clinit_.o c12_String_m5__clinit_.c
c12_String_m3_out_of_bounds.o: c12_String_m3_out_of_bounds.c c12_String.h
	@echo OBJ c12_String_m3_out_of_bounds.o
	@$(CC) $(CFLAGS) -c -o c12_String_m3_out_of_bounds.o c12_String_m3_out_of_bounds.c
c12_String_m1_length.o: c12_String_m1_length.c c12_String.h
	@echo OBJ c12_String_m1_length.o
	@$(CC) $(CFLAGS) -c -o c12_String_m1_length.o c12_String_m1_length.c
c12_String_m6__init_.o: c12_String_m6__init_.c c12_String.h
	@echo OBJ c12_String_m6__init_.o
	@$(CC) $(CFLAGS) -c -o c12_String_m6__init_.o c12_String_m6__init_.c
c10_RuntimeException_m1__init_.o: c10_RuntimeException_m1__init_.c c10_RuntimeException.h
	@echo OBJ c10_RuntimeException_m1__init_.o
	@$(CC) $(CFLAGS) -c -o c10_RuntimeException_m1__init_.o c10_RuntimeException_m1__init_.c
c13_DebugOut_m1_println.o: c13_DebugOut_m1_println.c c13_DebugOut.h
	@echo OBJ c13_DebugOut_m1_println.o
	@$(CC) $(CFLAGS) -c -o c13_DebugOut_m1_println.o c13_DebugOut_m1_println.c
c13_DebugOut_m3__clinit_.o: c13_DebugOut_m3__clinit_.c c13_DebugOut.h
	@echo OBJ c13_DebugOut_m3__clinit_.o
	@$(CC) $(CFLAGS) -c -o c13_DebugOut_m3__clinit_.o c13_DebugOut_m3__clinit_.c
c13_DebugOut_m2_println.o: c13_DebugOut_m2_println.c c13_DebugOut.h
	@echo OBJ c13_DebugOut_m2_println.o
	@$(CC) $(CFLAGS) -c -o c13_DebugOut_m2_println.o c13_DebugOut_m2_println.c
c13_DebugOut_m4_raw_print.o: c13_DebugOut_m4_raw_print.c c13_DebugOut.h
	@echo OBJ c13_DebugOut_m4_raw_print.o
	@$(CC) $(CFLAGS) -c -o c13_DebugOut_m4_raw_print.o c13_DebugOut_m4_raw_print.c
c13_DebugOut_m5__init_.o: c13_DebugOut_m5__init_.c c13_DebugOut.h
	@echo OBJ c13_DebugOut_m5__init_.o
	@$(CC) $(CFLAGS) -c -o c13_DebugOut_m5__init_.o c13_DebugOut_m5__init_.c
c3_Task_m2__clinit_.o: c3_Task_m2__clinit_.c c3_Task.h
	@echo OBJ c3_Task_m2__clinit_.o
	@$(CC) $(CFLAGS) -c -o c3_Task_m2__clinit_.o c3_Task_m2__clinit_.c
c3_Task_m1__init_.o: c3_Task_m1__init_.c c3_Task.h
	@echo OBJ c3_Task_m1__init_.o
	@$(CC) $(CFLAGS) -c -o c3_Task_m1__init_.o c3_Task_m1__init_.c

c30_Picture_m1__init_.o: c30_Picture_m1__init_.c c30_Picture.h
	@echo OBJ c30_Picture_m1__init_.o
	@$(CC) $(CFLAGS) -c -o c30_Picture_m1__init_.o c30_Picture_m1__init_.c

c31_PictureMotionCounterpart_m1__init_.o: c31_PictureMotionCounterpart_m1__init_.c c31_PictureMotionCounterpart.h
	@echo OBJ c31_PictureMotionCounterpart_m1__init_.o
	@$(CC) $(CFLAGS) -c -o c31_PictureMotionCounterpart_m1__init_.o c31_PictureMotionCounterpart_m1__init_.c

irr.o: irr.c irr.h
	@echo OBJ irr.o
	@$(CC) $(CFLAGS) -c -o irr.o irr.c
domains.o: domains.c domains.h
	@echo OBJ domains.o
	@$(CC) $(CFLAGS) -c -o domains.o domains.c
keso_main.o: keso_main.c domains.h
	@echo OBJ keso_main.o
	@$(CC) $(CFLAGS) -c -o keso_main.o keso_main.c
# --- END

kesoinfo: kesoinfo.c
	gcc -I /home/mateus/keso_it/src/kore/ -O2 -ansi -Wall -Werror -o kesoinfo kesoinfo.c
tags:
	$(CTAGBIN) *.h *.c
	

