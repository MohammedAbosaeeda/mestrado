\section{Related Work}
% Protocolos de Disseminação
% - tabela comparativa
% SOs embarcados
% - tinyos, sos, mantisos, retos, nano-kernel

\subsection{Data Dissemination Protocols}


\textsc{Multi-hop Over the Air Programming} (MOAP) \cite{moap} and \textsc{Deluge} \cite{deluge} are both distribution mechanisms that use NACKs, unicast requests for retransmission and broadcast data transmission. But \textsc{MOAP} uses a neighborhood-by-neighborhood dissemination and publish/subscribe mechanism while \textsc{Deluge} is based on concept of pages and uses a vector of page's ages to determine when a page changes.

\textsc{Multi-hop Network Programming} (MNP) \cite{mnp} and \textsc{Infuse} \cite{infuse} are protocols based on neighbors to reprogramming a network. In \textsc{MNP} the neighborhood-by-neighborhood dissemination is supported by a transmitter selection algorithm, that ensures only one transmitter node at a time and also that it has a greater number of receptors. In \textsc{Infuse} neighbors are classified in predecessors or successors, thus, a node receives data during the time range of its predecessors and transmits data during its own time.

\subsection{Embedded Operating Systems}

\textsc{TinyOS} \cite{tinyos} is an event-driven OS built of reusable components that are used together to form a specific application and can be considered the most widely used OS in the area of WSN. It did not originally support software reconfiguration, however, all protocols described above are implemented using the \textsc{TinyOS}, thus, enabling reconfiguration.

\textsc{SOS} \cite{sos}, \textsc{Contiki} \cite{contiki}, \textsc{POSIX-compatible} \cite{nondisruptive} and \textsc{LyraOS} \cite{lyraos} are OS that support reconfiguration using dynamic loadable modules. In this type of reconfiguration, modules have an indirect way to communicate with the kernel. The use of this indirection makes each module become independent of the memory location and enables changes in the software more efficiently.

\textsc{RETOS} implements reconfiguration through dynamic reallocation of memory and online linking \cite{Cha2007}. The relocation process extracts information from global variables and functions at compile time (meta-information) and this information is used by the kernel to replace all accessible address of a loaded module.

