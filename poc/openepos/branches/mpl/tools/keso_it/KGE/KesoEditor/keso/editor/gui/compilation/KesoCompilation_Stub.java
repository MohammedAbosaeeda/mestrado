// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package keso.editor.gui.compilation;

public final class KesoCompilation_Stub
    extends java.rmi.server.RemoteStub
    implements keso.communication.client.IKesoClient, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_finish_0;
    private static java.lang.reflect.Method $method_getData_1;
    private static java.lang.reflect.Method $method_getName_2;
    private static java.lang.reflect.Method $method_getParameters_3;
    private static java.lang.reflect.Method $method_getPassword_4;
    private static java.lang.reflect.Method $method_ping_5;
    private static java.lang.reflect.Method $method_send_6;
    private static java.lang.reflect.Method $method_setPosition_7;
    private static java.lang.reflect.Method $method_setResult_8;
    private static java.lang.reflect.Method $method_size_9;
    private static java.lang.reflect.Method $method_wantsAllFiles_10;
    
    static {
	try {
	    $method_finish_0 = keso.communication.client.IKesoClient.class.getMethod("finish", new java.lang.Class[] {boolean.class});
	    $method_getData_1 = keso.communication.client.IKesoClient.class.getMethod("getData", new java.lang.Class[] {});
	    $method_getName_2 = keso.communication.client.IKesoClient.class.getMethod("getName", new java.lang.Class[] {});
	    $method_getParameters_3 = keso.communication.client.IKesoClient.class.getMethod("getParameters", new java.lang.Class[] {});
	    $method_getPassword_4 = keso.communication.client.IKesoClient.class.getMethod("getPassword", new java.lang.Class[] {});
	    $method_ping_5 = keso.communication.client.IKesoClient.class.getMethod("ping", new java.lang.Class[] {});
	    $method_send_6 = keso.communication.client.IKesoClient.class.getMethod("send", new java.lang.Class[] {java.lang.String.class});
	    $method_setPosition_7 = keso.communication.client.IKesoClient.class.getMethod("setPosition", new java.lang.Class[] {int.class});
	    $method_setResult_8 = keso.communication.client.IKesoClient.class.getMethod("setResult", new java.lang.Class[] {keso.communication.common.IRemoteFile.class});
	    $method_size_9 = keso.communication.client.IKesoClient.class.getMethod("size", new java.lang.Class[] {});
	    $method_wantsAllFiles_10 = keso.communication.client.IKesoClient.class.getMethod("wantsAllFiles", new java.lang.Class[] {});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public KesoCompilation_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of finish(boolean)
    public void finish(boolean $param_boolean_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_finish_0, new java.lang.Object[] {new java.lang.Boolean($param_boolean_1)}, -3621800158648008725L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getData()
    public keso.communication.common.IRemoteFile getData()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getData_1, null, 6739034818207325814L);
	    return ((keso.communication.common.IRemoteFile) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getName()
    public java.lang.String getName()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getName_2, null, 6317137956467216454L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getParameters()
    public java.util.Vector getParameters()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getParameters_3, null, -3914902303893188560L);
	    return ((java.util.Vector) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getPassword()
    public java.lang.String getPassword()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getPassword_4, null, -5861010686874767637L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of ping()
    public void ping()
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_ping_5, null, 5866401369815527589L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of send(String)
    public void send(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_send_6, new java.lang.Object[] {$param_String_1}, 4948365269230768819L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setPosition(int)
    public void setPosition(int $param_int_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_setPosition_7, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, -8080240220384313132L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setResult(IRemoteFile)
    public void setResult(keso.communication.common.IRemoteFile $param_IRemoteFile_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_setResult_8, new java.lang.Object[] {$param_IRemoteFile_1}, 8775299061948528857L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of size()
    public int size()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_size_9, null, 4495240443643581991L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of wantsAllFiles()
    public boolean wantsAllFiles()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_wantsAllFiles_10, null, -2400080111386141121L);
	    return ((java.lang.Boolean) $result).booleanValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
