
\newpage
\appendix
\section{main.c}
\begin{verbatim}
#include "types.h"
#include "routines.h"

int main (void)
{
   uint x = 1;

   Count25 (&x);
   /* This can be bounded automatically. */

   Foo7 (&x);
   /* This can be bounded automatically because Foo7 calls */
   /* Count with a static value for Count.u.               */

   Foo (6, &x);
   /* This can be bounded automatically, because Foo.num = 6,  */
   /* which makes Count.u = 9, which bounds the loop in Count. */

   Solve (&x);
   /* The loop in Solve can be bounded automatically, but not */
   /* the loop in Count when called from Solve.               */

   while (1) x++;
   /* This is a simple eternal loop. Bound-T will report it */
   /* and include one execution in the WCET.                */
}
\end{verbatim}

\newpage
\section{routines.c}
\begin{verbatim}
#include "types.h"
#include "routines.h"

void Count25 (uint *x)
{
   count_t u = 25;

   for (; u > 0; u -= 2)
   {
      *x = *x + u;
   }
}

void Count (count_t u, uint *x)
{
   for (; u > 0; u -= 2)
   {
      *x = *x + u;
   }
}

void Foo (count_t num, uint *x)
{
   Count (num + 3, x);
   /* The loop in Count depends on Count.u = num + 3. */
}

void Foo7 (uint *x)
{
   *x = *x + 10;

   Count (7, x);
   /* The loop in Count depends on Count.u = 7. */

   *x = *x - 8;
}

void Solve (uint *x)
{
   count_t i;
   volatile count_t k;

   for (i = 0; i < 8; i++)
   /* The bounds on this loop are static. */
   {
      k = Ones (*x);
      /* k is now the number of '1' bits in *x.          */
      /* This would be quite hard to analyse statically. */

      if (k == 0) break;
      /* This can make the for-loop stop before its full    */
      /* number of iterations. Bound-T uses the full number */
      /* for the Worst Case Time.                           */

      Count (k, x);
      /* The loop in Count depends on Count.u = k, which is  */
      /* hard to analyse statically. An assertion is needed. */
   }
}

count_t Ones (uint x)
{
   count_t v = 0;

   while (x)
   /* This is not a 'counter' loop, so Bound-T cannot find */
   /* its bounds automatically. An assertion is needed.    */
   {
      if (x & 1) v ++;
      x >>= 1;
   }

   return v;
}
\end{verbatim}

\newpage
\section{desafio.c}
\label{anx:desafio}
\begin{verbatim}
#define SWAP(a,b) temp=(a);(a)=(b);(b)=temp;
#define M 7
#define NSTACK 50

void
sort(unsigned long n);

float           arr_sort[20] = {
    5, 4, 10.3, 1.1, 5.7, 100, 231, 111, 49.5, 99,
    10, 150, 222.22, 101, 77, 44, 35, 20.54, 99.99, 88.88
};

int             istack[100];

void
sort(unsigned long n)
{
    unsigned long   i, ir = n, j, k, l = 1;
    int             jstack = 0;
    int             flag;
    float           a, temp;

    flag = 0;
    while (1) {
        if (ir - l < M) {
            for (j = l + 1; j <= ir; j++) {
                a = arr_sort[j];
                for (i = j - 1; i >= l; i--) {
                    if (arr_sort[i] <= a)
                        break;
                    arr_sort[i + 1] = arr_sort[i];
                }
                arr_sort[i + 1] = a;
            }
            if (jstack == 0)
                break;
            ir = istack[jstack--];
            l = istack[jstack--];
        } else {
            k = (l + ir) >> 1;
            SWAP(arr_sort[k], arr_sort[l + 1])
                if (arr_sort[l] > arr_sort[ir]) {
                SWAP(arr_sort[l], arr_sort[ir])
            }
            if (arr_sort[l + 1] > arr_sort[ir]) {
                SWAP(arr_sort[l + 1], arr_sort[ir])
            }
            if (arr_sort[l] > arr_sort[l + 1]) {
                SWAP(arr_sort[l], arr_sort[l + 1])
            }
            i = l + 1;
            j = ir;
            a = arr_sort[l + 1];
            for (;;) {
                i++;
                while (arr_sort[i] < a)
                    i++;
                j--;
                while (arr_sort[j] > a)
                    j--;
                if (j < i)
                    break;
                SWAP(arr_sort[i], arr_sort[j]);
            }
            arr_sort[l + 1] = arr_sort[j];
            arr_sort[j] = a;
            jstack += 2;

            if (ir - i + 1 >= j - l) {
                istack[jstack] = ir;
                istack[jstack - 1] = i;
                ir = j - 1;
            } else {
                istack[jstack] = j - 1;
                istack[jstack - 1] = l;
                l = i;
            }
        }
    }
}

int
qsort_exam_main(void)
{
    sort(19);
    return 0;
}

float           select(unsigned long k, unsigned long n);

#define SWAP(a,b) temp=(a);(a)=(b);(b)=temp;

float           arr[20] = {
    5, 4, 10.3, 1.1, 5.7, 100, 231, 111, 49.5, 99,
    10, 150, 222.22, 101, 77, 44, 35, 20.54, 99.99, 888.88
};


float
select(unsigned long k, unsigned long n)
{
    unsigned long   i, ir, j, l, mid;
    float           a, temp;
    int             flag, flag2;

    l = 1;
    ir = n;
    flag = flag2 = 0;
    while (!flag) {
        if (ir <= l + 1) {
            if (ir == l + 1)
                if (arr[ir] < arr[l]) {
                    SWAP(arr[l], arr[ir])
                }
            flag = 1;
        } else if (!flag) {
            mid = (l + ir) >> 1;
            SWAP(arr[mid], arr[l + 1])
                if (arr[l + 1] > arr[ir]) {
                SWAP(arr[l + 1], arr[ir])
            }
            if (arr[l] > arr[ir]) {
                SWAP(arr[l], arr[ir])
            }
            if (arr[l + 1] > arr[l]) {
                SWAP(arr[l + 1], arr[l])
            }
            i = l + 1;
            j = ir;
            a = arr[l];
            while (!flag2) {
                i++;
                while (arr[i] < a)
                    i++;
                j--;
                while (arr[j] > a)
                    j--;
                if (j < i)
                    flag2 = 1;
                if (!flag2)
                    SWAP(arr[i], arr[j]);

            }
            arr[l] = arr[j];
            arr[j] = a;
            if (j >= k)
                ir = j - 1;
            if (j <= k)
                l = i;
        }
    }
    return arr[k];
}

int
select_main(void)
{
    select(10, 20);

    return 0;
}

int             fac(int n);

int
facA(int n)
{
        if (n == 0)
                return 1;
        else
                return (n * fac(n - 1));
}

int
fac(int n)
{
        return facA(n);
}


int
fac_main(void)
{
        int             i;
        int             s = 0;

        for (i = 0; i <= 5; i++)
                s += facA(i);

        return (s);
}

int main() {
  qsort_exam_main();
  select_main();
  fac_main();
}
\end{verbatim}
