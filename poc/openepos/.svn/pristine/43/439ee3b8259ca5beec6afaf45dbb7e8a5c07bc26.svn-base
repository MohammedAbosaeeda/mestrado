/*! @class System::ML310
    @ingroup med_machine

    The ML310 offers designers a Virtex-II Pro XC2VP30-based embedded platform. In addition to more than 30,000 logic cells, over 2,400 Kb of BRAM, and dual PPC405 processors available in the FPGA.

    <!-- *********************************************************************** -->
    @fn static int_handler * System::ML310::int_vector(unsigned int i)
    @brief Returns the associated handler associated with a specific interrupt
    @param i Interrupt index
    @return A function pointer to associated handler

    <!-- *********************************************************************** -->
    @fn static void System::ML310::int_vector(unsigned int i, int_handler * h)
    @brief Installs an interrupt handler
    @param i Interrupt index
    @param h Function pointer to the interrupt handler

    <!-- *********************************************************************** -->
    @fn template<typename Dev> static Dev * System::ML310::seize(const Type_Id & type, unsigned int unit)
    @brief Seize a specific device for usage
    @param type The system type of device
    @param unit The corresponding unit within the device type
    <!-- *********************************************************************** -->
    @fn static void System::ML310::release(const Type_Id & type, unsigned int unit)
    @brief Release a specific device in usage
    @param type The system type of device
    @param unit The corresponding unit within the device type

    <!-- *********************************************************************** -->
    @fn static int System::ML310::irq2int(int i)
    @brief Converts the IRQ number to interrupt vector table index
    @param i IRQ number
    <!-- *********************************************************************** -->
    @fn static int System::ML310::int2irq(int i)
    @brief Converts the interrupt vector table index to IRQ number
    @param i Interrupt vector table index

    <!-- *********************************************************************** -->
    @fn static void System::ML310::panic()
    @brief Shutdown the machine, printing a PANIC error.
    <!-- *********************************************************************** -->
    @fn static void System::ML310::reboot()
    @brief Restart the machine - (unimplemented)
    <!-- *********************************************************************** -->
    @fn static void System::ML310::poweroff()
    @brief Performs a normal shutdown
    <!-- *********************************************************************** -->
    @fn static void System::ML310::init()
    @brief Initialize the machine, calling all the devices initialization methods
    associated within this machine
    <!-- *********************************************************************** -->
    @fn static void System::ML310::int_not(unsigned int interrupt)
    @brief A default interrupt handler, that warn the occurence of interrupt without
    a user-defined handler, shutdown the machine with panic msg.
    <!-- *********************************************************************** -->
    @fn static void System::ML310::exc_program(unsigned int interrupt)
    @brief The handler implemented for the program exception occurence.

    This exception occurs under the following situations:

    @li Illegal instruction executed
    @li Priviledge instruction executed in user-mode
    @li Trap instruction executed

    Since the actual implementation of EPOS doesn't use a trap intruction. All the three
    situations above, causes the shutdown of the machine with a panic msg.


*/
