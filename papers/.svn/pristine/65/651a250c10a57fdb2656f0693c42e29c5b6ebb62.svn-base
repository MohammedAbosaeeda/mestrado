\section{System Models}
\label{sec:sys_models}

% Section intro
The definition of a system model allows a better understanding of the problem in hand.
This section presents two models: the \emph{Task Model} and the \emph{Energy Model}.
The first models the system quality and timing correctness issues.
The second, models aspects of energy consumption, production, and storage.

\subsection{Task Model}
\label{sec:app_model}

% Real-Time - Hard real-time - Flexible real-time (best-effort) - this approach (hard + BE)
Real-time scheduling is a common solution to ensure correctness and quality of critical applications.
In a hard real-time model, all instances of system tasks (jobs) must complete in time.
Flexible real-time models may also take into account a set of optional or adaptable tasks.
These flexible models may also be called best-effort models.
In this scenario, the real-time scheduling policy ensures correctness, while system quality levels may be expressed as a function of the execution rate or adaptation levels of a set of flexible tasks.
This work employs a hybrid model based on both hard real-time and best-effort tasks.

% Hard real-time at design phase
As a matter of fact, critical real-time systems are almost always designed considering energy sources that are consistent with system demands.
Also, the system designer must make energy saving decisions, such as voltage scaling and device hibernation, at design-time.
Thus, the designer can take such decisions into consideration while defining the energy budget necessary to sustain the system.
Complex, battery-operated, real-time embedded systems, such as satellites, autonomous vehicles, and even sensor networks, comprise a set of tasks that include both, critical and noncritical tasks.
A power manager for one such embedded system must follow the design-time decisions for critical parts while trying to optimize energy consumption by noncritical parts.

% Detail our scheduling approach
For the envisioned scenario -- i.e.  battery-operated, real-time, embedded systems harvesting energy from the environment -- the energy budget would be defined at design-time based on critical tasks, while noncritical tasks would be executed on a best-effort policy, considering not only the availability of time, but also of energy.
Along with the assumption that an autonomous power manager cannot interfere with the execution of hard real-time tasks, the separation of critical and noncritical tasks at design-time leads to the following scheduling strategy:
\begin{itemize}
\item The system handles hard real-time tasks as mandatory tasks, executed independently of the energy available at the moment.
These tasks are scheduled according to traditional algorithms such as Earliest Deadline First~(EDF) and Rate Monotonic~(RM)~\cite{Liu:1973}, either in their original form or extended to support DVS~\cite{Pillai:2001}.
\item Best-effort tasks, periodic or not, have lower priorities than the hard real-time ones and therefore only execute if no hard real-time tasks are ready to run.
Furthermore, the decision to dispatch a best-effort task must also take into consideration whether the remaining energy will be enough to schedule all activations of hard-real time tasks expected to occur until the system reaches the targeted lifetime.
\item During system execution, a speculative power manager is active identifying idle periods of components.
Whenever a best-effort job does not execute due to energy limitations, the number of idle periods of system components raises, thus promoting further energy savings.
\end{itemize}

% Point to epos' power manager for energy-monitoring and devices' power management
This scheduling strategy has only small implications in terms of process management at the operating system level;
however, in order to be implemented it requires a comprehensive power management infrastructure, like the one previously presented by the authors~\cite{Frohlich:IJDSN:2011,Hoeller:SMC:2011}.
In particular, the system needs battery monitoring services to support the scheduling decisions around best-effort tasks and component dependency maps to avoid power management decisions that could affect the execution of hard real-time tasks.


\subsection{Energy Model}
\label{sec:en_model}

% Must consider energy consumption, production, and storage.
In this work, three facets of energy must be taken into account: consumption, production, and storage.

% Energy accounting method (equations and update frequency)
Equations~\ref{eq:en_dev_time} through~\ref{eq:energy}, introduced in a previous work~\cite{Hoeller:SMC:2011}, define the employed energy consumption model.
Depending on the behavior of a given component, or the information available about its energy consumption, the designer may choose to monitor energy consumption based either on the time the device spends in a particular operating mode or on the events generated by the device.
$E_{tm}^i(d,\phi)$ defines the energy consumed by a single device ($d$) over time as a function of current drain ($I$) and time ($t$) spent in an operating mode ($m$) with a specific configuration ($\phi$).
$E_{ev}^i(d,\phi)$ is the sum of the energy consumed by events that are relevant in terms of energy consumption.
During execution, the system accounts for these events ($\chi$).
Each event has a known worst-case energy consumption ($E_e(\phi)$) that is subject to a specific configuration ($\phi$).
In the case of a device consuming energy in both ways, both energy consumption profiles can be applied. 
Finally, $E_{tot}^i(\phi)$ is the sum of the estimated energy consumption of all system devices ($\Delta$), during the $ith$ iteration.
\begin{eqnarray}
\label{eq:en_dev_time} E_{tm}^i(d,\phi) = (t_{end} - t_{begin}) \times I(d,m,\phi)\\
\label{eq:en_dev_ev} E_{ev}^i(d,\phi) = \sum_{e=0}^{|\chi|} (E_e(\phi) \times \chi_e)\\
\label{eq:energy} E_{tot}^i(\phi) = \sum_{d=0}^{|\Delta|}{(E_{tm}^i(d,\phi) + E_{ev}^i(d,\phi))}
\end{eqnarray}

$E_{tm}^i$ is updated either on every operating mode change or periodically, when $E_{ev}^i$ and $E_{tot}^i$ are also updated.
The period of the iterations ($i$) vary from application to application and has already been subject of previous studies~\cite{Hoeller:SMC:2011}.

% Accouter modification to include recharge
Energy production depends on the energy harvesting technology, and the used model should be detailed for each application.
Regardless of the harvesting technology, however, the amount of energy available to the system in a moment ($E_{batt}^i$) can be estimated as shown in Equation~\ref{eq:batt_charge}.
Given a previously known battery charge ($E_{batt}^{(i-1)}$), current battery charge comes from the subtraction of the amount of energy consumed in a period ($E_{tot}^i(\phi)$), and the sum of the amount of energy coming in from the harvesting system ($R_i$).
As the amount of stored energy cannot be infinite, the computed battery charge has to be limited by the battery capacity ($E_{batt}^{max}$).
\begin{equation}
\label{eq:batt_charge} E_{batt}^i = \min \left ( E_{batt}^{max} , E_{batt}^{(i-1)} - E_{tot}^{i}(\phi) + R_i \right )
\end{equation}

% Exemplify through photovoltaic data
For example, energy production through photovoltaic modules, besides being subject to characteristics of the mechanisms themselves, is also dependent on solar irradiance and temperature.
In solar systems, irradiance is the parameter that primarily influences energy production.
Figure~\ref{figtwo:plot_1dayplot_1year} shows that irradiance varies considerably during daytime (top), as does irradiation\footnote{Solar irradiation is the cumulative energy brought from solar irradiance over a period of time, i.e. $E_I = \int_{t_0}^{t_1} I dt$.} during the year (bottom).
% In contrast with the wind, 
It is possible to observe, however, that an important repetition pattern exist for sunlight irradiance: it is not present during nighttime and tends increase during the morning, until it reaches a peak around noon, to start to decrease again.
In order to schedule a system in an adequate way, an energy-aware scheduler should be aware of such variations.
By doing so, the system might store energy during the day to use at night, being, thus, able to reduce oscillations on system quality.

% \wfig{wind-epagri}{Ten minutes samples of average wind velocity and direction from August 20th to August 22nd, 2012, in Florian{\'op}olis, Brazil.\\TODO: english version of figure}{width=2\columnwidth}
\figtwo
{plot_1day}{Solar irradiance of January 1st, 1998.}{width=\columnwidth}
{plot_1year}{1998 monthly irradiation.}{width=\columnwidth}
{Sample solar irradiance and irradiation at Florian{\'o}polis, Brazil ($27^o$ latitude).}{0.5\textwidth}


% Energy buffer size
The size of the energy storage ($E_{batt}^{max}$ in Equation~\ref{eq:batt_charge}) is another key parameter in the present scenario once the system may not store all the excess energy due to the lack of capacity.
There are other parameters affecting the performance of the energy storage in either rechargeable batteries or supercapacitors, such as capacity degradation, aging, and operating temperature.
These issues, although relevant, are by now outside the scope of this work.
