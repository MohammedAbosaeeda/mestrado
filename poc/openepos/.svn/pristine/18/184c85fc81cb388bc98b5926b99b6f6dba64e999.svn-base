/**(c)

  Copyright (C) 2005 Christian Wawersich 

  This file is part of the KESO Operating System.

  It is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  Please contact wawi@cs.fau.de for more info.

  (c)**/

package keso.compiler.kni;

import keso.compiler.*;
import keso.compiler.imcode.*;
import keso.compiler.backend.*;
import keso.compiler.config.*;

public class PortalServiceWeavelet extends Weavelet {

	public PortalServiceWeavelet(BuilderOptions opts, ClassStore repository) {
		super(opts, repository);
		joinPoints = new String[] { "keso/core/PortalService.*" };
	}

	/**
	 * Use this to mark classes or methods as required.
	 * The Builder cannot determine the dependencies of code generated by weavelets.
	 * Thus, you may use this method to tell the Builder which methods/classes
	 * are required by an weavelet.
	 */
	public void require(int domainID, String className, String methodName) { 

		/* TODO:
		 
		repository.requireClass("keso/core/PortalService");
		repository.requireClass("keso/core/Service");
		repository.requireClass("keso/core/Portal");

		if (methodName.termed("getService(Ljava/lang/String;Ljava/lang/String;)Lkeso/core/Service;")) {
			IMPortalService.requireGetMacro(domainID);
			return;
		}

		if (methodName.termed("lookup(Ljava/lang/String;)Lkeso/core/Portal;")) {
			IMPortalService.requireLookupMacro(domainID);
			return;
		}

		if (callee.termed("handlePackets(Ljava/lang/String;Ljava/lang/String;)V")) {
			IMPortalService.requirePacketHandler(domainID);
			return;
		}
		*/
	}

	/**
	 * This prevent a method body from analayses and translation process.
	 */
	public boolean ignoreMethodBody(IMClass clazz, IMMethod method) throws CompileException {
		return true;
	}

	/**
	 * The checkAttribut method changes the attributes of a method.
	 * The default value for all attributes of all affected methods
	 * is FALSE.
	 *
	 * Attribute:
	 * "block"   Method may block the Task.
	 * "pure"    Method has no side effects, but reads global memory.
	 * "const"   Method has no side effects at all.
	 * "notnull" The method return value is allways not null. 
	 */
	public int checkAttribut(IMMethod method, int attr) {
		if (method.termed("keso/core/getService(Ljava/lang/String;Ljava/lang/String;)Lkeso/core/Service;") ||
				method.termed("keso/core/lookup(Ljava/lang/String;)Lkeso/core/Portal;")) {
			if (attr==ATTR_NOTNULL) return TRUE;
		}
		if (method.termed("keso/core/handlePackets(Ljava/lang/String;Ljava/lang/String;)V")) {
			if (attr==ATTR_BLOCK) return TRUE;
		}
		return FALSE;
	}

	/**
	 * This code can be used to affect calls to a static method, changing the
	 * calling code. (in contrast to affectMethod where the code of the method
	 * itself is affected)
	 * 
	 * For an example, see the InterruptService weavelet.
	 *
	 * @param node intermediate representation of the invokestatic node
	 * @param caller intermediate representation of the calling method
	 * @param callee intermediate representation of the called method
	 * @param args array that contains the intermediate representations of the
	 *   methods parameters.
	 * @param coder Coder object that can be used to generate code for the method
	 *   invokation
	 * @return boolean value, indicates if the method call has been affected
	 */
	public boolean affectInvokeStatic(IMInvoke node, IMMethod caller, IMMethod callee,
			IMNode args[], Coder coder) throws CompileException {

		if (callee.termed("getService(Ljava/lang/String;Ljava/lang/String;)Lkeso/core/Service;")) {
			assert_aconst(args[1],"Service class");
			String srv_name = assert_string(args[0],"Service name");
			coder.add(IMPortalService.getGetMacro(srv_name));
			return true;
		} else if (callee.termed("lookup(Ljava/lang/String;)Lkeso/core/Portal;")) {
			String srv_name = assert_string(args[0],"Service name");
			coder.add(IMPortalService.getLookupMacro(srv_name));
			return true;
		} else if (callee.termed("handlePackets(Ljava/lang/String;Ljava/lang/String;)V")) {
			String srv_name = assert_string(args[0],"Service name");
			String net_name = assert_string(args[1],"Network");
			ServiceDefinition srv = ServiceManager.instance.lookupService(srv_name);
			NetworkDefinition net = ServiceManager.instance.lookupNetwork(net_name);

			if (srv==null || net==null) {
				opts.warn("no network of service defined! in "+caller.getIMClass().getSourceFile());
				coder.add("/* no service found */");
				return true;
			}
			coder.add(IMPortalService.getPacketHandlerFunction(srv, net));
			coder.add("()");
			return true;
		}

		return false;
	}
}
