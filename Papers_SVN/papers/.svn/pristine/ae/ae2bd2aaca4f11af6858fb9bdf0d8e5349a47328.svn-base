\section{Introduction}

Whenever a developer starts to write the source for a new software, there are specifications and behaviors that software should embody. During this process, if any of these features were not working as the software requirements specification, the developer must start to debug the code until find and correct this abnormal behavior. Debugging is one of the most challenging and time-consuming process of developing a software, since finding the reason for this unexpected behavior and fixing the problem is a non-trivial process \cite{parnin2011automated}.

Debug process becomes more challenging as long as systems are more constraints and complex. Unlike general purpose systems that are designed to be flexible and perform various applications for end-user needs, embedded systems are usually designed with minimum resources to perform a specific task. Besides a developer of applications for embedded systems should carefully use the scarce resources, different platforms must be used depending on debug tool, operating system, architecture and vendors, which makes both coding and testing of these systems more defiant.

There are several techniques for performing debugging of an application (eg. compare versions, analyze the trace of error, state graphs) with a different degree of automation. The more automated debugger is also the one that need more initial information about the error to be resolved. Thereby, a fully debug automation requires a previous knowledge of all possible scenarios that could result in error. 

As an example of fully automated test is the task of checking if a value of a particular variable. This exchange does not only depends on the programming language used, but also on the type of this variable, target platform, and so on. Although it seems to be trivial when a developer makes this changes, transmit this knowledge to a computer is a very laborious task and sometimes even more time-consuming than debugging itself.

There are two ways for building an automated debug process: (i) the developer must be able to transfer all his knowledge to the tool or (ii) the tool must be able to get information directly from the application. The former is covered with a large number of tools, since the development of a small automation is less complex than a fully automated tool and still can help developers finding bugs in their applications. Although, the latter option would be the real solution for faster debugging and also to allow the developer to carry out parallel activities while the code is tested. 

The full test automation in applications is a very complex activity and to increase its practicability it can be splitted into smaller parts until get atomic operations. So its possible to see which parts of the process can be implemented to maximize the automation with the least possible complexity.

The objective of this paper is to present the automation of one of these atomic parts from the process of debugging, the automatic exchange of parameters. By implementing this automation, its possible to computers to optimize the debugging software process, but without forgetting to supply logs for developers, since they can benefit for getting a full report of all the trials and results found. 

In summary, by solving an anatomic operation of debug we make the following contributions:
\begin{itemize}
\item Development environment for embedded applications, configurable according to specific hardware/software requirements. We show how it is possible to create an environment for development and testing embedded applications using GDB to cross debug the code and Qemu to simulate its execution.
\item Automate the operation of finding errors with a real world embedded system debug. In this case study developers can run a script to automatic find errors and use a report to fix the code.
\end{itemize}

The rest of this paper is organized as follows. Section \ref{sec:relatedWork} presents the related work. Section \ref{sec:simulationEnv} contain the details of the integrated GDB and QEMU environment for debugging embedded applications. Section \ref{sec:automatic} presents the anatomic solution of exchange parameter's configuration applied in a study case, Section \ref{sec:evaluation} shows the results and finally Section \ref{sec:Conclusion} concludes the paper.