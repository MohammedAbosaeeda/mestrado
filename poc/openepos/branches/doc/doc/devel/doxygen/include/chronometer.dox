/*! @class System::Chronometer
    @ingroup abs_timming

    @brief The Chronometer abstraction is used to perform time measurements
  
    The Chronometer abstraction is a member of the timepiece family. It uses a System::TSC to measure time.

    <!-- *********************************************************************** -->
    
	@fn System::Chronometer::Chronometer()
	@brief Sets start and stop times to zero
	
	<!-- *********************************************************************** -->

    @fn Hertz System::Chronometer::frequency()

	@return
	Returns the Chronometer resolution in Hertz

    <!-- *********************************************************************** -->

    @fn void System::Chronometer::reset()
    @brief Resets start and stop times to zero

    <!-- *********************************************************************** -->

    @fn void System::Chronometer::start()
    @brief Sets the Chronometer start time to the current timestamp

    @note
    This has no effect if the Chronometer has already been started

    <!-- *********************************************************************** -->

    @fn void System::Chronometer::stop()
    @brief Sets the Chronometer stop time to the current timestamp

    @note
    This has no effect if the Chronometer hasn't been started

    <!-- *********************************************************************** -->

    @fn void System::Chronometer::lap()
    @brief Sets the Chronometer stop time to the current timestamp

    <!-- *********************************************************************** -->

    @fn Time_Stamp System::Chronometer::ticks()	

    @brief If the Chronometer has been stopped, this method returns the stop time minus the start time.
    If not, this method returns the current timestamp minus the start time.
    Returns zero if the Chronometer hasn't been started.

    @return 
	Returns Current Chronometer value in Time_Stamp

    <!-- *********************************************************************** -->

    @fn Microsecond System::Chronometer::read()

    @return 
	Returns Current Chronometer value in Microseconds

*/
