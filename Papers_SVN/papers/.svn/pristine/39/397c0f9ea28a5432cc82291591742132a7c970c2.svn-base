%\documentclass[conference]{sig-alternate-ipsn09}
\documentclass{sig-alternate-ipsn12}

\hyphenation{in-ter-op-er-a-bil-i-ty phe-nom-e-non trans-duc-er po-ten-tial-ly trans-duc-er fig-ure con-di-tion-ing con-ver-sion com-mu-ni-ca-tion}

\usepackage[latin1]{inputenc}	% for Latin languages
\usepackage[T1]{fontenc}	% for ISO and UTF characters
%\usepackage[english]{babel}	% for multilingual support
\usepackage{graphicx}


\newcommand{\fig}[4][htbp]{
  \begin{figure}[#1] {\centering\scalebox{#2}{\includegraphics{fig/#3}}\par}
    \caption{#4\label{#3}}
  \end{figure}
}

\newcommand{\figR}[5][htbp]{
  \begin{figure}[#1]{\centering\scalebox{#2}{\includegraphics[angle=#5]{fig/#3}}\par}
    \caption{#4\label{#3}}
  \end{figure}
}

\newcommand{\figTC}[4][htbp]{
  \begin{figure*}[#1] {\centering\scalebox{#2}{\includegraphics{fig/#3}}\par}
    \caption{#4\label{#3}}
  \end{figure*}
}

%\input{commands}

\begin{document}

%\title{IEEE 1451 - TIM Initiated Message}
%\title{Improvements in Wireless Communication for \\IEEE 1451: Transducer Interface Module \\Initiated Message (TIM-IM)}
\title{Improvements in Wireless Communication for IEEE 1451: Transducer Interface Module Initiated Message (TIM-IM)}

%\author{Leonardo Maccari Rufino, Ant\^onio Augusto Fr\"ohlich\\
%Laboratory for Software and Hardware Integration\\
%Federal University of Santa Catarina\\
%P.O.Box 476, 88040900 - Florian\'opolis - SC - Brazil\\
%Email: \{leonardo,guto\}@lisha.ufsc.br}

\maketitle


\begin{abstract}
   % Theme: Rede de Sensores Sem Fio. IEEE 1451.
   % Scope: Economia de energia para o padrão IEEE 1451 em rede de sensores sem fio.
   % Goal: Apresentar uma nova estratégia de comunicação para o padrão IEEE 1451, na qual o TIM toma a iniciativa da comunicação ao invés de esperar requisições vindas do NCAP. Sendo assim, o sensor pode economizar sua energia, pois não necessita ficar continuamente aguardando por pacotes em sua interface de rede.

The IEEE 1451 smart transducer interface standard aims at establishing a common interface to promote interoperability among the myriad of transducers currently in the market. Nonetheless, the acceptance of the standard in the realm of Wireless Sensor Networks~\cite{Gilsinn:2001} seems to be constrained by apparently incompatible operational semantics: while ordinary transducers deployed in control networks usually operate at fixed periods, or even as slaves of master controllers, wireless sensors mostly avoid such regimens due to its inherent energy and bandwidth utilization inefficiency. In this paper, we propose a reconciling strategy based on Transducer Interface Module Initiated Message (TIM-IM) that enables Wireless Transducer Interface Modules (WTIM) to communicate efficiently with a Network Capable Application Processor (NCAP). The proposed solution has been validated through a prototype implementation with expressive efficiency gains, increasing the sensor battery's useful life, compared with the polling method.
\end{abstract}

\category{C.2.6}{Internetworking}{Standards (e.g., TCP/IP)}

\terms{Standardization, Design, Documentation}

\keywords{IEEE 1451, Wireless Sensor Network, TIM Initiated Message}
%\begin{IEEEkeywords}
%IEEE 1451, Wireless Sensor Network, TIM Initiated Message
%\end{IEEEkeywords}


\section{Introduction}
\label{sec:introduction}

Wireless sensor network (WSN) is a network formed by devices called sensor nodes capable of monitoring some phenomena around them and communicate via radio frequency. Factors such as mobility among nodes and heterogeneity in communication and sensors become WSN vulnerable to failure. Aiming to solve these problems, IEEE 1451 family was created.

Past efforts to bring IEEE 1451 to the realm of WSN focused mainly on interoperability, without major concerns about efficiency and conformance to the traditional semantics of such networks~\cite{Oostdyk:2006}~\cite{Song:2008}. The reconciling strategy proposed in this paper is built around the fact that Network Capable Application Processor (NCAP) can potentially close the gap between Wireless Transducer Interface Modules (WTIM) and control applications by deploying the concept of information freshness. Instead of polling WTIMs for fresh information about sensed data, NCAPs can rely on the Transducer Interface Module Initiated Messages (TIM-IM) feature of IEEE 1451 and let WTIMs report new information whenever there are new data to be reported, Figure~\ref{TIM-IM}.

\fig{.7}{TIM-IM}{Overview of proposed IEEE 1451 WSN strategy.}

%In this context, WTIMs associate Transducer Electronic Data Sheet (TEDS) to Operational Range Tables (ORT) that are used to decide whether an observed variation in sensed data is to be reported to NCAP via a TIM-IM, or simply ignored.

In this context, WTIMs can decide whether an observed variation in sensed data is to be reported to NCAP via a TIM-IM, or simply ignored. In the worst-case, that is, in a constantly changing environment, this strategy spares NCAP request messages, thus improving on network bandwidth and also on mote's energy, since the sensor no longer needs to listen constantly the channel for NCAP request messages. In case of relatively stable environments, efficiency can be largely improved.

The rest of this paper is organized as follows: Section~\ref{sec:ieee1451family} presents the IEEE 1451 family and Section~\ref{sec:relatedwork}, the related work. The proposed TIM-IM is described in Section~\ref{sec:timim} and Section~\ref{sec:results} shows the results. Finally, Section~\ref{sec:conclusion} concludes the paper.


\section{IEEE 1451 Family}
\label{sec:ieee1451family}

The Instrumentation and Measurement Society's Sensor Technology Technical Committee TC-9 in the Institute of Electrical and Electronics Engineers (IEEE) has been working to establish a set of smart sensor interface standards called IEEE 1451. The goal of the standards family is to define a set of common communication interfaces for connecting transducers to microprocessor-based systems, instruments, and field networks in a net\-work-independent environment~\cite{Lee:XXX}~\cite{Lee:2000}.

The specifications developed place no restrictions on the use of signal conditioning and processing schemes, analog-to-digital converters, microprocessors, network protocols, and network communication media. Therefore, the IEEE 1451 project's aim is to reduce the industry's effort to develop and migrate to networked smart transducers. %The ultimate goals of this family of standards are to provide the means for achieving transducers-to-network interchangeability and transducer-to-networks interoperability~\cite{Lee:2000}.

%A transducer is a device that converts energy from one form into another and it may either be a sensor or an actuator. A sensor is a device that generates an electrical signal proportional to a physical, biological, or chemical parameter and an actuator is a transducer that accepts an electrical signal and takes a physical action.

A smart transducer is the integration of an analog or digital sensor or actuator element, a processing unit, a communication interface, and the associated software from signal conditioning, calibration, diagnostics, and communication~\cite{Song:2008}. Based on this premise, a smart transducer model is shown in Figure~\ref{SmartTransducerModel} (a). Figure~\ref{SmartTransducerModel} (b) shows the IEEE 1451 smart transducer architecture, which is quite similar to the previous. The main differences are the division of the system into two major components, called TIM and NCAP, and the introduction of the TEDS.

\fig{0.48}{SmartTransducerModel}{(a) A smart transducer model; (b) An IEEE 1451 smart transducer model.}


\subsection{TIM and NCAP}

To achieve transducers-to-network interchangeability and transducer-to-networks interoperability, the IEEE 1451 standards family divides the parts of a system into two general categories of devices, Network Capable Application Processor (NCAP) and Transducer Interface Module (TIM):

\begin{itemize}
 \item TIM is a module that contains the communication interface, signal conditioning, analog-to-digital conversion and/or digital-to-analog and, in many cases, the transducer. A TIM may range in complexity from a single sensor or actuator to units containing many transducers (sensors and actuators).
 \item NCAP is the hardware and software that provides the gateway function between the TIMs and the user network or host processor.
\end{itemize}

Some members of the standards family provide the communication interfaces between a NCAP and one or more TIMs.


\subsection{TEDS}

A key feature of an IEEE 1451 smart transducer is the specification of the standardized Transducer Electronic Data Sheet (TEDS) and their formats. TEDS contains manufacturer-related information about the sensor, such as manufacturer name, sensor types, serial number, measurement range, accuracy, and calibration data. %and there are standardized data formats for the TEDS.

TEDS provides many benefits, for instance:

\begin{itemize}
 \item It enables self-identification of sensors or actuators;
 \item It provides long-term self-documentation;
 \item It reduces human error;
 \item It eases field installation, upgrade, and maintenance of sensors;
 \item It provides plug-and-play capability.
\end{itemize}

There are four TEDS required for all TIMs, and others are optional. The mandatory TEDS are: Meta-TEDS, TransducerChannel TEDS, User's Transducer Name TEDS, and PHY TEDS. TEDS could be stored in some form of electrically erasable programmable ROM if the contents never change, or the changeable portions could be in TIM's RAM~\cite{Song:2008}.


\subsection{Family Members}

Currently the family consists of six active standards and one on development. This work is related to two of them: IEEE 1451.0 and IEEE 1451.5.

\begin{itemize}
 \item \textbf{IEEE 1451.0:} This standard introduces the concept of TIM and NCAP connected by a media specified by another member of the family. This project also develops a set of common functionality for the family of IEEE 1451 smart transducer interface standards. These features are physical communications media independent and they include the basic functions required to control and manage smart transducers, common communications protocols, and media-independent TEDS formats. Finally, this standard defines a set of implementation-independent APIs~\cite{IEEE1451.0:2007}.

 \item \textbf{IEEE 1451.5:} This family member introduces the concept of Wireless Transducer Interface Module (WTIM), connected wirelessly over an approved radio Communication Module to a NCAP Service Module. The IEEE 1451.5 approved radios (Dot5\-AR) are IEEE 802.11, IEEE 802.15.4, IEEE Bluetooth, and IEEE ZigBee technologies. A WTIM is a module that contains a Dot5ApprovedRadio, signal conditioning, analog-to-digital and/or digital-to-an\-a\-log conversion and in many cases the transducers (sensors and actuators). A WTIM may range in complexity from a single sensor or actuator plus radio to units containing many transducers plus radio. Since the WTIM contains a Dot5AR for wireless communication, the NCAP in-turn contains a similar radio to complete the wireless communication link between NCAP and WTIM~\cite{IEEE1451.5:2007}. %The specification for this standard focuses on the communication modules that connect the WTIM and NCAP using the Dot5AR protocols~\cite{IEEE1451.5:2007}.
\end{itemize}

%The reference model presented in Figure~\ref{IEEE1451ReferenceModel} shows the relationships among the various IEEE 1451 standards family members.

%\figTC{0.75}{IEEE1451ReferenceModel}{IEEE 1451 reference model~\cite{IEEE1451.0:2007}.}


\subsection{TransducerChannel}

TransducerChannel is the name given by the standard to the combination of transducer and the components of signal conditioning and conversion associated with it. Each TransducerChannel is associated with an identification number of 16-bit defined by TIM. This value ranges from 1 to 65535 and works as destination address of commands sent by NCAP, beyond distinguishing the TransducerChannels in TIM. Thus, a TIM may contain from 0 to 65535 different TransducerChannels and it, in turn, receives the ID number 0, and any command to this address is forwarded to the TIM itself.


\subsection{Operation Modes}

Each TransducerChannel can support different sampling and transmission modes, both described in IEEE 1451.0. The combination of them form the operating mode of a TransducerChannel, which describes, in general, how is the operation of the sensor or actuator. The first, sampling mode, describes how the TransducerChannel should proceed to perform data retrieval, if it is a sensor, or how the incoming data should be used, when the transducer is an actuator. The sampling mode can also set the interval, either time or any other magnitude, in which data should be retrieved/used. The second, transmission mode, determines how the information is transferred between NCAP and TIM. The mode or modes of operation that can operate a TransducerChannel are indicated in TrasducerChannel TEDS's attributes in each transducer.

The standard specifies five possible sampling modes for the operation of transducers. They are: \textit{trigger-initiated}, \textit{free-running without pre-trigger}, \textit{free-running with pre-trigger} (with or without buffers enabled), \textit{continuous sampling}, and \textit{immediate operation}. While the three possible transmission modes are: \textit{only when commanded}, \textit{streaming when a buffer is full}, and \textit{streaming at a fixed interval}.

The choice of the sampling mode \textit{continuous sampling} in combination with either the transmission mode \textit{streaming when a buffer is full} or \textit{streaming at a fixed interval} forms an operating mode known as \textit{streaming operation} by the standard. A sensor operating in this operation mode must acquire data and transmit them to NCAP when the reading set is completed, without the need to receive additional commands from NCAP. Thus, the readings taken by a sensor can be sent to NCAP autonomously and automatically, using the \textit{streaming operation} mode.


\section{Related Work}
\label{sec:relatedwork}

Song and Lee~\cite{Song:2006}~\cite{Lee:2007} describe an implementation of the proposed IEEE 1451.0 and 1451.5 standards using the Java programming language. This system consists of two wireless nodes, NCAP and WTIM, which communicate with each other using the standard interfaces through 802.11 wireless communication modules. Three examples of implementing these interfaces are discussed in these papers. The first example focuses on wireless node announcement and discovery using the publisher-subscriber model. The second example focuses on request-response of sensor data using the client-server model. And, finally, the third example focuses on request-response of sensor TEDS using the client-server model. In these works, when NCAP needs to collect data from the WTIM, it must take the initiative by sending a request, causing the mote sends a response back to it. Our work differentiates from these because WTIM is able to start the transmission of information without a previous request sent by NCAP, saving the network bandwidth.

Gilsinn and Lee~\cite{Gilsinn:2001} discuss the IEEE 1451 interface for smart sensors, and possible solutions for creating a wireless interface for the standard. Most sensors require an energy source, such as an electric power supply or battery, to power the sensing element and associated electronics. Thus, the authors comment that low-power wireless sensors would be useful in locations where maintenance is performed regularly and batteries could be changed as part of that maintenance. In addition, another way to energize the sensors would be getting energy from their surrounding, thus a power conversion device would be designed to take energy from heat, light, sound, vibration, or any other source of energy available from the environment. Our paper proposes to continue using the batteries normally, but saving its energy, keeping the sensor in a sleep state most of its time.


\section{Transducer Interface Module \\Initiated Message}
\label{sec:timim}

Due to problems in WSN like the amount of energy available, some applications choose to keep the sensor nodes asleep during most of its operation, reconnecting them from time to time and making the proper reads, processing and communicating with other nodes. Among the operation modes available on IEEE 1451.0, the one that best fits this scenario is called \textit{streaming operation}, as discussed in Section~\ref{sec:ieee1451family}, in \textit{Operation Modes}.

Furthermore, IEEE 1451.0 standard describes a structure called ``TIM Initiated Message'', however, it only demonstrates its use to send the status from TIMs to NCAP, such as to indicate that some TEDS has changed or if a command was rejected. Thus, the standard does not describe how we should proceed to send data collected by the sensor. By discovering a way for this transfer be made, TIM will be able to take the initiative to send collected data by its TransducerChannels to NCAP on which it is registered.

In this paper, we adopt the ``TIM Initiated Message'' structure, filling the existing fields with the values as instructed by the ``read TransducerChannel data-set segment'' command, described by the standard. In this way, the application must wait for samples obtained by the TransducerChannel, which is working on \textit{streaming operation} mode.

The message's structure is shown in Figure~\ref{MessageStructure}. The first two octets are formed by the TransducerChannel address which is sending the message. The next two octets specify the message's command type, where the most significant byte indicates the command class to be used and the least significant represents the command function. This work proposes to fill these fields with the values 3 and 1, indicating a ``transducer operating state'' command and ``read TransducerChannel data-set segment'' function, respectively. The third part also consists of two bytes and indicates the number of octets transmitted in the message, in other words, how many octets are expected in the data field. Finally, there are octets containing the reading set obtained by the sensor.

\fig{.35}{MessageStructure}{TIM Initiated Message format.}

The various TEDS contain information related to the TIM and they represent the best place to describe wheth\-er a sensor is working on polling or TIM-IM mode. An important TEDS is the TransducerChannel TEDS, which contains information such as the physical unit used to define the information being measured (such as meter, kilogram, second, kelvin, etc.), the number of data samples transmitted by the sensor, the sampling and transmission modes supported by the TransducerChannel, and so on.

In order to allow the use of messages initiated by TIM correctly, we propose to extend the table 58 of IEEE 1451.0~\cite{IEEE1451.0:2007}, which describes the data transmission modes supported by a TransducerChannel. This information is contained in TransducerChannel TEDS and the new table, with three new entries, is shown in the Table~\ref{tab:DataTransmissionAttribute}, which represents a copy of the table presented in the standard, except for the additions proposed in this paper. According to the amendments, a sensor can describe that its TransducerChannel works exclusively in TIM Initiated Message mode, allowing the sensor to save energy, keeping it in a sleep state most of its time. Then, the value 1 represents a TransducerChannel working on polling mode, values 2, 3, and 4, running on polling and TIM-IM modes, and values 5, 6, and 7, only TIM-IM mode.

\begin{table}[htb] % [htb]-> here, top, bottom
   \centering   % tabela centralizada
   \small       % tamanho da fonte 
   %\setlength{\arrayrulewidth}{2\arrayrulewidth}  % espessura da linha
   %\setlength{\belowcaptionskip}{10pt}  % espa\c{c}o entre caption e tabela
   \caption{\b Data transmission attribute.}
   \begin{tabular}{|c|l|} % c=center, l=left, r=right 
      \hline
      \multicolumn{1}{|c|}{\textbf{Value}} & \multicolumn{1}{|c|}{\textbf{Description}} \\
      \hline \hline
      0 & Reserved. \\
      \hline
      1 & This TransducerChannel is only capable of being \\
	& operated in the only when commanded mode (see \\
	& 5.10.2.1). \\
      \hline
      2 & This TransducerChannel is capable of being operated \\
	& in the Streaming when a buffer is full (see 5.10.2.2) \\
	& or only when commanded modes. \\
      \hline
      3 & This TransducerChannel is capable of being operated \\
	& in the Streaming at a fixed interval (see 5.10.2.3) \\
	& or only when commanded modes. \\
      \hline
      4 & This TransducerChannel is capable of being operated \\
	& in the only when commanded, Streaming when a \\
	& buffer is full or Streaming at a fixed interval modes. \\
      \hline
      5 & This TransducerChannel is capable of being operated \\
	& in the Streaming when a buffer is full (see 5.10.2.2) \\
	& mode. \\
      \hline
      6 & This TransducerChannel is capable of being operated \\
	& in the Streaming at a fixed interval (see 5.10.2.3) \\
	& mode. \\
      \hline
      7 & This TransducerChannel is capable of being operated \\
	& in the Streaming when a buffer is full or Streaming \\
	& at a fixed interval (see 5.10.2.3) modes. \\
      \hline
      8-255 & Reserved. \\
      \hline
   \end{tabular}
   \label{tab:DataTransmissionAttribute}
\end{table}

%\begin{table}[htb] % [htb]-> here, top, bottom
%   \centering   % tabela centralizada
%   %\large       % tamanho da fonte 
%   \setlength{\arrayrulewidth}{2\arrayrulewidth}  % espessura da linha
%   %\setlength{\belowcaptionskip}{10pt}  % espa\c{c}o entre caption e tabela
%   \caption{\b Data transmission attribute.}
%   \begin{tabular}{|c|l|} % c=center, l=left, r=right 
%      \hline
%      \multicolumn{1}{|c|}{\textbf{Value}} & \multicolumn{1}{|c|}{\textbf{Description}} \\
%      \hline \hline
%      0 & Reserved. \\
%      \hline
%      1 & This TransducerChannel is only capable of \\
%	& being operated in the only when \\
%	& commanded mode (see 5.10.2.1). \\
%      \hline
%      2 & This TransducerChannel is capable of being \\
%	& operated in the Streaming when a buffer is \\
%	& full (see 5.10.2.2) or only when commanded \\
%	& modes. \\
%      \hline
%      3 & This TransducerChannel is capable of being \\
%	& operated in the Streaming at a fixed \\
%	& interval (see 5.10.2.3) or only when \\
%	& commanded modes. \\
%      \hline
%      4 & This TransducerChannel is capable of being \\
%	& operated in the only when commanded, \\
%	& Streaming when a buffer is full or \\
%	& Streaming at a fixed interval modes. \\
%      \hline
%      5 & This TransducerChannel is capable of being \\
%	& operated in the Streaming when a buffer is \\
%	& full (see 5.10.2.2) mode. \\
%      \hline
%      6 & This TransducerChannel is capable of being \\
%	& operated in the Streaming at a fixed \\
%	& interval (see 5.10.2.3) mode. \\
%      \hline
%      7 & This TransducerChannel is capable of being \\
%	& operated in the Streaming when a buffer is \\
%	& full or Streaming at a fixed interval (see \\
%	& 5.10.2.3) modes. \\
%      \hline
%      8-255 & Reserved. \\
%      \hline
%   \end{tabular}
%   \label{tab:DataTransmissionAttribute}
%\end{table}

Figure~\ref{PollingSequenceDiagram} presents the sequence diagram of IEEE 1451 working in polling mode and Figure~\ref{TIM-IMSequenceDiagram} shows the diagram when using TIM Initiated Message method. Briefly, once a WTIM has registered to NCAP and the last one has ordered WTIM's TEDS as needed, the following steps of TIM-IM are:
\begin{enumerate}
 \item NCAP sends an ``operate'' command to put the TIM's TransducerChannel in operation;
 \item TransducerChannel comes into operation mode, disconnecting from NCAP, if possible;
 \item TransducerChannel begins to make sensor readings at regular intervals until the data set is complete, putting the WTIM in sleep mode between these intervals;
 \item WTIM connects again, waits an ``operate'' command, and the data set is sent to NCAP, using the structure of a message initiated by TIM and the fields filled according to a reading command format as described in this paper;
 \item WTIM disconnects again, resuming the operations from step 3.
\end{enumerate}

\fig{.7}{PollingSequenceDiagram}{Polling sequence diagram.}

\fig{.71}{TIM-IMSequenceDiagram}{TIM Initiated Message sequence diagram.}

According to Figure~\ref{TIM-IMSequenceDiagram}, some exchanges of messages between NCAP and TIM can be removed to optimize the system, reducing the consume of network bandwidth and energy. Then, we propose an optimized TIM-IM approach, shown in Figure~\ref{TIM-IM-OptSequenceDiagram}. Since NCAP knows that TIM works in TIM-IM mode, NCAP will not send any data request. Then, the messages connect, operate, and disconnect have been removed, although TIM will be asleep during the sensing time and will not be able to respond to messages from NCAP. This optimized approach can be used in situations where it is useful to save the network bandwidth, but NCAP and TIM must agree in advance to use this mode.

\fig{.7}{TIM-IM-OptSequenceDiagram}{TIM Initiated Message optimized sequence diagram.}


\section{Results}
\label{sec:results}

We validated the proposed strategy to build WSN IEEE 1451-compliant deploying it in a mote platform called EPOSMote II~\cite{Lisha:2010}. Figure~\ref{EPOSMote} shows the development kit which is slightly larger than a R\$1 coin. EPOSMote II consists of a temperature sensor, making temperature measurements from -40$^o$C to 125$^o$C. EPOSMote II was chosen because it focuses on modularization and have interchangeable modules for each function (processing/communication, sensing and power supply), facilitating the inclusion of IEEE 1451 standard.

\fig{0.09}{EPOSMote}{EPOSMote II SDK side-by-side with a R\$1 coin. On the left the sensing module. On the right the main module.}

We used EPOS (Embedded Parallel Operating System)~\cite{Frohlich:2001} as our software platform, which is a component-based framework for generating dedicated runtime support environments, allowing programmers to develop platform-independent applications. The EPOS Project aims at automating the development of embedded systems, then, developers can concentrate on what really matters: their applications~\cite{Marcondes:2006}.

EPOS has a small footprint, a complete communication stack, and support for sensor networks. The EPOS's runtime support environment for sensor network applications includes, besides the basic functions of an operating system running with limited resources, mechanisms for efficient power management, field reprogramming, uniform abstraction of heterogeneous sensor devices and configurable communication service through C-MAC (Configurable Media Access Control) protocol, thus fulfilling the specific requirements found in applications for wireless sensor network~\cite{Frohlich:2008}. In addition, EPOS implements TCP/IP (Transmission Control Protocol/Internet Protocol) protocols, which are used in this work for communication between NCAP and TIM, thereby ensuring the reliability of the information. Finally, C-MAC avoids idle listening implementing low power listening, where it periodically turns on the radio to check for channel activity, and if activity is detected, the radio is kept on to receive a packet, otherwise it is immediately turned off for some time~\cite{Steiner:2010}. For all these reasons, EPOS was chosen for use in this work.

%The NCAP consists of a personal computer running the Linux operating system, and implemented using the C++ language. One of the characteristics required by the IEEE 1451.0 is that it must be possible to disconnect or connect a new TIM to the system, without any damage is suffered by the NCAP. This feature is referred to as Hot-Swap by the standard, and is implemented by this NCAP. Whenever a WTIM is turned on, it is automatically recognized and incorporated into the system and when it shutdown, no suffering is caused to the NCAP.

Figure~\ref{MessageStructureFilled} shows the TIM-IM structure filled. As this test uses only one TransducerChannel, the value of the first field is equal to 1. Then there are two octets specifying the message's command type, filled with 3 and 1, indicating a ``transducer operating state'' command and ``read TransducerChannel data-set segment'' function. The data sets are composed of 10 temperature readings, each one containing a floating point number of 32 bits (4 bytes). Thus, for the length field is assigned the value 40. Finally, there are the 40 octets containing the readings sequence obtained by the temperature sensor.

\fig{0.7}{MessageStructureFilled}{TIM Initiated Message format filled.}

The purpose of this evaluation is to determine the overhead of traditional operating mode (i.e. polling) versus TIM-IM, in accordance with the standard. The test scenario is presented in Figure~\ref{TestScenario} and the energy evaluation results are shown in Figure~\ref{EnergyConsumption}.

\fig{0.9}{TestScenario}{IEEE 1451 test scenario}

\fig{0.7}{EnergyConsumption}{Energy consumption: Polling X TIM-IM.}

In the first seconds, the three cases have the same behavior, because it is the time for the sensor to self-identify and answer to the TEDS requests initiated by NCAP. After that, polling method, which implements low power listening with a timeout of 500 ms and a sleep period of 1000 ms (EPOS' default values), continues to consume a high amount of energy because it keeps the radio on during part of its time, waiting for messages. In both TIM-IM method, the sensor can turn off the radio while collecting data, turning on from time to time to send the information. TIM-IM optimized mode saves a little more energy because it does not send packets to connect and disconnect from TCP, each time it will send the sensed data.

In order not to favor any of the three cases, TransducerChannel collects a temperature sample every 10 seconds in all cases and, in TIM-IM mode, it sends autonomously when its buffer with 10 entries is full, i.e., every 100 seconds. The polling method works similarly, but NCAP is responsible for sending a request every 100 seconds to TIM. The tests were performed having the same distance between NCAP and WTIM. EPOSMote II theoretical operating current is shown below:

\begin{itemize}
 \item 29 mA: radio in TX mode
 \item 22 mA: radio in RX mode
 \item 3.3 mA: radio off, CPU running
 \item 0.85 mA: radio off, CPU idle
\end{itemize}

The results show that after 1 hour running, TIM-IM method consumed less than half the amount of sensor's energy (129,83~J in TIM-IM optimized, 156,13~J in TIM-IM, and 316,96~J in polling). It means a significant reduction in power consumption using TIM-IM, hence increasing the sensor battery's useful life. Using more sophisticated techniques, such as sending data only when a temperature sample was changed compared to the previous data set, easily done in software, in situations where there is not much variation in the sensed data, a higher gain would be achieved.

Another problem related to wireless sensors is that they are usually resource-constrained embedded systems. Then, the programs must be small enough to fit them. In order to analyze the memory footprint of our implementation, we used the arm-size tool, from GNU Binutils version 2.20. The results are shown in Table~\ref{tab:CodeSize}. The first column, \textit{EPOS + WTIM}, shows the size of the EPOS operating system along with the WTIM's implementation of IEEE 1451. The last column, \textit{WTIM}, presents the size of WTIM only, without EPOS.

\begin{table}[htb] % [htb]-> here, top, bottom
  \centering   % tabela centralizada
  \setlength{\arrayrulewidth}{2\arrayrulewidth}  % espessura da linha
  %\setlength{\belowcaptionskip}{10pt}  % espa\c{c}o entre caption e tabela
  \caption{Memory footprint.}
  \begin{tabular}{|c|c|c|c|} % c=center, l=left, r=right 
    \hline
    \multicolumn{1}{|c|}{\textbf{Section}} & \multicolumn{1}{|c|}{\textbf{EPOS + WTIM}} & \multicolumn{1}{|c|}{\textbf{WTIM}} \\%& \multicolumn{1}{|c|}{\textbf{TCP/IP}}\\
    \hline \hline
    .text & 57096 bytes & 8904 bytes \\%& 18808 bytes \\
    \hline
    .data & 221 bytes & 4 bytes \\%& 108 bytes \\
    \hline
    .bss  & 5268 bytes & 8 bytes \\%& 14 bytes \\
    \hline
    TOTAL & 62585 bytes & 8916 bytes \\%& 18930 bytes \\
    \hline
  \end{tabular}
  \label{tab:CodeSize}
\end{table}


\section{Conclusion}
\label{sec:conclusion}

WSN usually have major restrictions when it comes to the amount of energy available, since they depend on limited energy sources and, additionally, must remain operational for a long period of time. Therefore, some applications choose to keep the sensor nodes in a state of dormancy, reconnecting them from time to time to perform the appropriate readings, process the data and communicate with other nodes~\cite{Mainwaring:2002}.

This operation mode shows a trend where the motes are responsible for taking the initiative to communicate with the network gateway to which they belong, while this action is usually taken by NCAP in IEEE 1451~\cite{Lee:2007}. Therefore, this paper aims to develop a solution for using IEEE 1451 standard in wireless sensor networks where sensor nodes start the communication through the use of messages initiated by TIM, while maintaining the ability to add different types of motes due to the existence of standardization.

As a result, we adopted the structure ``TIM Initiated Message'' described by the standard (IEEE 1451.0~\cite{IEEE1451.0:2007}), filling the existing fields with the values as instructed by the command ``read TransducerChannel data-set segment''. Con\-se\-quent\-ly, once placed the TransducerChannel into operation, the application must wait for samples obtained by the sensor and sent by WTIM to NCAP autonomously.

We validated the proposed solution by building a WSN IEEE 1451-compliant, using EPOSMote II as sensor nodes. Our approach significantly increased the sensor battery's useful life. The results show that after 1 hour running, TIM-IM method consumed less than half the amount of sensor's energy compared with the polling method.


\bibliographystyle{abbrv}
\bibliography{artigo_ieee1451.bib}


\end{document}
