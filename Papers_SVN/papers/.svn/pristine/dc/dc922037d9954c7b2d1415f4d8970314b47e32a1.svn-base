Feedback from the Reviewers
A. Contribution and Clarity:
    importance of scope ------------ [4 - Significant]
    original result ---------------- [3 - Minor]
    application oriented ----------- [3 - Minor]
    clear and concise -------------- [3 - Minor]

B. Recommendations to TPC ---------- [4 - Should be included]

C. Suggested form of presentation -- [O - Oral presentation]

-------------------------------------------------------------------------------

Comments:
+ good overview of HAL concepts
+ EPOS is good *eductational* exercise, but
- market motivation weak, why should people require 
portability of embedded software ?
- conclusion: so what ?
- Figures are not well explained in the text


A. Contribution and Clarity:
    importance of scope ------------ [4 - Significant]
    original result ---------------- [3 - Minor]
    application oriented ----------- [4 - Significant]
    clear and concise -------------- [3 - Minor]

B. Recommendations to TPC ---------- [2 - Last resort]

C. Suggested form of presentation -- [O - Oral presentation]

-------------------------------------------------------------------------------

Comments:
The paper is well written and addresses an important 
scope, portability of embedded applications. It's however, 
not clear what work or contribution to Epos that the paper 
reports.  Two case studies are described but it lacks 
reporting of experiences or conclusions from the studies.


A. Contribution and Clarity:
    importance of scope ------------ [4 - Significant]
    original result ---------------- [2 - Questionable]
    application oriented ----------- [4 - Significant]
    clear and concise -------------- [4 - Significant]

B. Recommendations to TPC ---------- [3 - Fair]

C. Suggested form of presentation -- [O - Oral presentation]

-------------------------------------------------------------------------------

Comments:
Nice and well written paper. Nevertheless, IMHO some
important parts are missing and should be included for a
final paper.

1. A clear and concise explanation of the development work
flow (development process) when building up applications
that are based on EPOS. What has to be done to create an
application (from scratch) and when hardware mediators are
already ready. Are hardware mediators and their parameters
automatic chosen in the latter case? Do you use a deployment
database for already used hardware platforms?

2. Your system abstractions contains a "Communicator".
Please go into detail about its functionality and how it can
be abstracted -- is there a work in progress for networked
embedded systems (wired/wireless)?

3. There is no real evaluation (and conclusion) of your case
study. Besides, case study 1 uses the abstraction of a
"Serial Communicator", not mentioned in the previous
section. Case study 2 has something like an abstraction
layer to Ethernet. Again, no comments are given in the
Section "Designing Portable Hardware/Software Interface"

4. Last but not least, how systems using EPOS are started
(go into detail concerning the boot and stup process).


A. Contribution and Clarity:
    importance of scope ------------ [4 - Significant]
    original result ---------------- [4 - Significant]
    application oriented ----------- [5 - Exceptional]
    clear and concise -------------- [3 - Minor]

B. Recommendations to TPC ---------- [4 - Should be included]

C. Suggested form of presentation -- [O - Oral presentation]

-------------------------------------------------------------------------------

Comments:
This paper describes an interesting approach to OS
portability. Especially the  two case studies demonstrate
the flexibility of the design. However, there are some
issues that should be clarified in my opinion:

1) The paper should be reviewed to correct typos (e.g.,
Abstract: "This may happens ..."; Section 3.1: "This occurs
meta programmed structures are resolved in compile-time.";
Section 3.1: "... where an Thread are created ...")

2) Section 2: Virtual Machines: In fact there are small Java
based virtual machines that run on 8-bit processors.

3) Section 2, End - Section 3 Beginning: The paragraphs
about HALs are a little bit confusing. Can the OS presented
be seen as a HAL approach? Please clarify.

4) Section 3.3: How are hardware interrupts handled? Are
there priorities? What happens when two or more interrupts
occur at the same time? What happens, if hardware does not
provide support for atomic operations, interrupts are
disabled to emulate this atomicity and interrupts occur at
that time?

5) An explanation of the development work flow would be
interesting. How is an application compiled? How are the
parameters of the hardware mediators adjusted?

6) How do hardware mediators interact with each other and
how do the system abstractions interact with the hardware
mediators? Is communication interrupt (i.e. callback) driven?

7) Does the OS provide security measures? This would be
especially interesting for security relevant systems like
the access control case study.

8) Section 4.2: Real-time requirements: Does the system
support measures to guarantee requirements like jitter,
maximum execution time, predictable scheduling, ...? Are
hard real time systems possible?

9) What about further work? Are extensions planned?

I think the paper would benefit from a more detailed
explanation (make use of 8 pages) of the mentioned points.