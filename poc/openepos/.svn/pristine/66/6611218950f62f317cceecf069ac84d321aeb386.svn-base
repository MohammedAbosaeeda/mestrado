/* Stuff to suport a specific application - "autogenerated" by the OIL compiler ;) */
#include <epos2osek/configurations.hh>
#include <epos2osek_defs.h>

/* Application source: josek_testcase_simple_test.cc */

// Application tasks
int func_taskZero(void);
int func_taskOne(void);
int func_taskTwo(void);

#define taskZero 0
#define taskOne 1
#define taskTwo 2

/* BasicTask constructor parameters:
 *  @entry : function pointer
 *  @taskIdentity : TaskType
 *  @taskState : TaskStateType
 *  @taskPriority : SomeTaskPriorities
 */
BasicTask * appTasks[3];

BasicTask ** CreateAllTasks(int & numberOfTasks) {
    /* AUTOSTART = TRUE; */
    appTasks[0] = new BasicTask(func_taskZero, 0, OSEK_READY, OSEK_NORMAL);
    /* AUTOSTART = FALSE; */
    appTasks[1] = new BasicTask(func_taskOne, 1, OSEK_SUSPENDED, OSEK_NORMAL);
    /* AUTOSTART = FALSE; */
    appTasks[2] = new BasicTask(func_taskTwo, 2, OSEK_SUSPENDED, OSEK_NORMAL);
    numberOfTasks = 3;
    return appTasks;
}

/* ------------------------------------------------------------------------- */

/* Application ------------------------------------------------------------- */
/* This is the josek_testcase_simple application.
   It is pratically equals to "testcase01_simple application.c",
   a application from Josek OS regression tests.
*/

/* Expected execution:
	TaskZero
	TaskOne
	TaskZero
	TaskTwo
*/

#include <epos2osek.h>

int main() {
    print("At main function\n");
    StartOS(OSDEFAULTAPPMODE);
    return 0;
}

void StartupHook() {
    print("At StartupHook\n");
}

TASK(taskZero) {
    static int i = 0;
    i++;
    print("Task0.\n");
    if (i == 1) {
		ActivateTask(taskOne);
	}
	
    TerminateTask();
}

TASK(taskOne) {
    print("Task1.\n");
    
    ActivateTask(taskZero);
    
    print("terminating taskOne e calling taskTwo\n");
    ChainTask(taskTwo);
    print("this cannot be printed\n");
}

TASK(taskTwo) {
    print("Task2.\n");
    TerminateTask();
}

/* ------------------------------------------------------------------------- */
