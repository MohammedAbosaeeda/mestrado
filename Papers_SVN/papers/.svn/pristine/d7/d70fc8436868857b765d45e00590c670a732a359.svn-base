\subsection{Memory management on EPOS}

The \textit{Heap} abstraction is the higher level abstraction responsible
for memory management on EPOS. It keeps a list of free memory blocks and
handles allocation and deallocation requests. Its interface is described in
the UML diagram in figure \ref{fig_spm_epos_heap}.

\fig{.40}{fig_spm_epos_heap}{UML diagram of the \textit{Heap} abstraction}

Two Heap instances are created on EPOS during the system initialization.
One is used to implement the \textit{malloc} and \textit{new operator}, that
are both used to handle memory allocation request from the application. The
other is used to implement the \textit{kmalloc}, which is used to handle
OS memory allocation requests(e.g memory for the threads stacks).

\subsection{Implementation on EPOS}

In order to managed the SPM on EPOS, we created a new application heap.
During system initialization, we initialize this new heap with the base
address and size of the SPM defined on the platform's memory mapping. Memory
allocation requests to the SPM are handled using the new heap. The \textit{malloc}
and \textit{free} functions of EPOS are used to implement the \textit{new}
and \textit{delete} operators. These functions ware modified to implement the
algorithms described in the previous section and to decide if the allocation
request will be forwarded to the original heap or to the new SPM heap, based on
the annotations received from the \textit{new} operator.

This implementation approach give a hint about how stack variables allocation
to the SPM could be handled in future work. Currently, the threads stacks are
allocated using an heap dedicated to the OS. By using the same approach and
dividing the SPM between two heaps (one for OS and one for the application) may
lead to an unacceptable fragmentation. One possible solution is to modify EPOS
so it can use an unified heap for both application and data, and then use the
current approach with the possibility of giving allocation hints during thread
creation. Another way would be to insert an workaround to allocate an thread
stack using the modified \textit{malloc} instead of \textit{kmalloc}.