/*! @class System::AVR_UART
    @ingroup med_uart
    @brief AVR UART class definition.

    This class is the definition of the AVR UART common characteristics.
    <!--************************************************************************************************-->
    @fn System::AVR_UART::AVR_UART()
    <!--************************************************************************************************-->
    @fn System::AVR_UART::AVR_UART(unsigned int unit)
    UART Constructor. Creates an UART object using <i>unit</i> AVR UART. Some AVR MCUs have more than one UART, <i>unit</i> defines wich UART to use.
    @param unit Number of the AVR UART to be used
    <!--************************************************************************************************-->
    @fn System::AVR_UART::AVR_UART(unsigned int baud, unsigned int data_bits, unsigned int parity, unsigned int stop_bits, unsigned int unit)
    UART Constructor. Creates an UART object with the settings specified in the parameters.
    @param baud UART baudrate
    @param data_bits Number of data bits (5-9)
    @param parity UART parity
    @param stop_bits Number of stop bits (1-2)
    @param unit Number of the AVR UART to be used
    <!--************************************************************************************************-->
    @fn System::AVR_UART::~AVR_UART()
    <!--************************************************************************************************-->
    @fn void System::AVR_UART::config(unsigned int baud, unsigned int data_bits, unsigned int parity, unsigned int stop_bits)
    Configures the UART with the given parameters
    @param baud UART baudrate
    @param data_bits Number of data bits (5-9)
    @param parity UART parity
    @param stop_bits Number of stop bits (1-2)
    @param unit Number of the AVR UART to be used
    <!--************************************************************************************************-->
    @fn void System::AVR_UART::config(unsigned int * baud, unsigned int * data_bits, unsigned int * parity, unsigned int * stop_bits)
    Gets UART configuration
    @param baud Pointer to UART baudrate
    @param data_bits Pointer to Number of data bits (5-9)
    @param parity Pointer to UART parity
    @param stop_bits Pointer to Number of stop bits (1-2)
    <!--************************************************************************************************-->
    @fn Reg8 System::AVR_UART::rxd()
    Returns value of RX UART register. The RX register contains UART last received data.
    <!--************************************************************************************************-->
    @fn void System::AVR_UART::txd(Reg8 c)
    Sets value of TX UART register. The TX register contains the next value to be transmitted.
    @param c Data to be transmitted
    <!--************************************************************************************************-->
    @fn void System::AVR_UART::reset()
    Reset UART communication. Clear UART flags and configures it with previous configuration.
    <!--************************************************************************************************-->
    @fn void System::AVR_UART::loopback(bool flag)
    This method is empty
    <!--************************************************************************************************-->
    @fn void System::AVR_UART::int_enable(bool receive, bool send, bool line, bool modem)
    Enable UART interrupts.
    @param receive Enable UART receive interrupt
    @param send Enable UART send interrupt
    @param line Overrides RxD AVR pin with UART functionality, see AVR Manual.
    @param modem Overrides TxD AVR pin with UART functionality, see AVR Manual.
    <!--************************************************************************************************-->
    @fn void System::AVR_UART::dtr()
    This method is empty
    <!--************************************************************************************************-->
    @fn void System::AVR_UART::rts()
    This method is empty
    <!--************************************************************************************************-->
    @fn bool System::AVR_UART::cts()
    Always returns true
    <!--************************************************************************************************-->
    @fn bool System::AVR_UART::dsr()
    Always returns true
    <!--************************************************************************************************-->
    @fn bool System::AVR_UART::dcd()
    Always returns true
    <!--************************************************************************************************-->
    @fn bool System::AVR_UART::ri()
    Always returns false
    <!--************************************************************************************************-->
    @fn bool System::AVR_UART::overrun_error()
    Returns true if overrun error detected
    <!--************************************************************************************************-->
    @fn bool System::AVR_UART::parity_error()
    Returns true if parity error detected
    <!--************************************************************************************************-->
    @fn bool System::AVR_UART::framing_error()
    Returns true if framing error detected
    <!--************************************************************************************************-->
    @fn char System::AVR_UART::power()
    Returns the UART power state
    <!--************************************************************************************************-->
    @fn void System::AVR_UART::power(char ps)
    Sets UART power state
    <!--************************************************************************************************-->
    @fn Reg8 System::AVR_UART::udr()
    Returns UART data register value
    <!--************************************************************************************************-->
    @fn void System::AVR_UART::udr(Reg8 value)
    Sets UART data register value
    @param value The new data register value
    <!--************************************************************************************************-->
    @fn Reg8 System::AVR_UART::ucsra()
    @fn void System::AVR_UART::ucsra(Reg8 value)
    @fn Reg8 System::AVR_UART::ucsrb()
    @fn void System::AVR_UART::ucsrb(Reg8 value)
    @fn Reg8 System::AVR_UART::ubrrl()
    @fn void System::AVR_UART::ubrrl(Reg8 value)
    @fn Reg8 System::AVR_UART::ubrrh()
    @fn void System::AVR_UART::ubrrh(Reg8 value)
    @fn Reg8 System::AVR_UART::ucsrc()
    @fn void System::AVR_UART::ucsrc(Reg8 value)
    @fn Reg16 System::AVR_UART::ubrrhl()
    @fn void System::AVR_UART::ubrrhl(Reg16 value)

*/

