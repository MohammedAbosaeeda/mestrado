//+ CH_EO_C_os_cc_includes

//? PC_framebuffer
#include <segment.h>
#include <address_space.h>
#include <mmu.h>
#include <pci.h>
//?

__USING_SYS

//+ CH_EO_C_os_cc_prototypes

//+ CH_EO_C_os_cc_tasks

//+ CH_EO_C_os_cc_resources

//+ CH_EO_C_os_cc_alarmsData


//?	PC_framebuffer
void open_framebuff() {
	PC_PCI pci;
	bool gc_found = false;
	PC_PCI::Header gc_header;
	int mem_region;
	for(int bus = 0; bus <= Traits<PC_PCI>::MAX_BUS && !gc_found; bus++) {
		for(int dev_fn = 0; dev_fn <= Traits<PC_PCI>::MAX_DEV_FN && !gc_found; dev_fn++) {
	    	PC_PCI::Header hdr;
	    	pci.header(PC_PCI::Locator(bus, dev_fn), &hdr);
			if(hdr) {
				if(hdr.class_id==768) {
					if(hdr.vendor_id==4115 && hdr.device_id==184) {
						gc_found=true;
						gc_header=hdr;
						mem_region = 0;
					} else if(hdr.vendor_id==5549 && hdr.device_id==1029) {
						gc_found=true;
						gc_header=hdr;
						mem_region = 1;
					}
				}
			}
		}
	}

	if(gc_found) {
		unsigned int phy_addr = gc_header.region[mem_region].phy_addr;
		Segment* vs = new Segment(phy_addr, 4*1024*1024, MMU::Flags::APP);
		Address_Space* self = new Address_Space(Address_Space::SELF);
		self->attach(*vs, 0xe0000000);
	} else {
		db<OSEK_Task>(WRN) << "No supported graphic device found!\n";
	}
}
//?


int main() {
//?	PC_framebuffer
	open_framebuff();
//?
//+ CH_EO_C_os_cc_mainFunc
}

//+ CH_EO_C_os_cc_alarmsFuncDefs


// extern "C" StatusType extC_activate(TaskType task);
extern "C" void extC_activate(TaskType task);
extern "C" void extC_chain(TaskType task);
extern "C" void extC_terminate();
extern "C" void extC_schedule();
extern "C" void extC_getTaskID(TaskRefType taskRef);
extern "C" void extC_getTaskState(TaskType taskID, TaskStateRefType state);
extern "C" void extC_enableAllInterrupts();
extern "C" void extC_disableAllInterrupts();
extern "C" void extC_resumeAllInterrupts();
extern "C" void extC_suspendAllInterrupts();
extern "C" void extC_resumeOSInterrupts();
extern "C" void extC_suspendOSInterrupts();
extern "C" void extC_getResource(ResourceType resource);
extern "C" void extC_releaseResource(ResourceType resource);
extern "C" StatusType extC_setEvent(TaskType TaskId, EventMaskType mask);
extern "C" StatusType extC_getEvent(TaskType TaskId, EventMaskRefType maskRef);
extern "C" StatusType extC_clearEvent(EventMaskType mask);
extern "C" StatusType extC_waitEvent(EventMaskType mask);
extern "C" void extC_getAlarmBase(AlarmType alarmId, AlarmBaseRefType info);
extern "C" void extC_getAlarm(AlarmType alarmId, TickRefType tick);
extern "C" StatusType extC_setRelAlarm(AlarmType alarmId, TickType increment, TickType cycle);
extern "C" StatusType extC_setAbsAlarm(AlarmType alarmId, TickType start, TickType cycle);
extern "C" StatusType extC_cancelAlarm(AlarmType alarmId);
extern "C" void extC_startOS(AppModeType mode);
extern "C" void extC_shutdownOS(StatusType error);
extern "C" void extC_setAppMode(AppModeType mode);

void extC_activate(TaskType task) {
	OSEK_Task::tasks[task]->activate(true);
}

void extC_chain(TaskType task) {
	OSEK_Task::tasks[task]->chain();
}

void extC_terminate() {
	OSEK_Task::terminate();
}

void extC_schedule() {
	OSEK_Task::schedule();
}

void extC_getTaskID(TaskRefType taskRef) {
	OSEK_Task::getTaskID(taskRef);
}

void extC_getTaskState(TaskType taskID, TaskStateRefType state) { 
	OSEK_Task::getTaskState(taskID, state);
}

void extC_enableAllInterrupts() {
	OSEK_Task::enableAllInterrupts();
}

void extC_disableAllInterrupts() {
	OSEK_Task::disableAllInterrupts();
}

void extC_resumeAllInterrupts() {
	OSEK_Task::resumeAllInterrupts();
}

void extC_suspendAllInterrupts() {
	OSEK_Task::suspendAllInterrupts();
}

void extC_resumeOSInterrupts() {
	OSEK_Task::resumeOSInterrupts();
}

void extC_suspendOSInterrupts() {
	OSEK_Task::suspendOSInterrupts();
}

void extC_getResource(ResourceType resource) { 
	OSEK_Task::getResource(resource);
}

void extC_releaseResource(ResourceType resource) { 
	OSEK_Task::releaseResource(resource);
}

StatusType extC_setEvent(TaskType TaskId, EventMaskType mask) { 
	return OSEK_Task::setEvent(TaskId, mask);
}

StatusType extC_getEvent(TaskType TaskId, EventMaskRefType maskRef) { 
	return OSEK_Task::getEvent(TaskId, maskRef);
}

StatusType extC_clearEvent(EventMaskType mask) { 
	return OSEK_Task::clearEvent(mask);
}

StatusType extC_waitEvent(EventMaskType mask) { 
	return OSEK_Task::waitEvent(mask);
}

void extC_getAlarmBase(AlarmType alarmId, AlarmBaseRefType info) { 
	return OSEK_Task::getAlarmBase(alarmId, info);
}

void extC_getAlarm(AlarmType alarmId, TickRefType tick) { 
	return OSEK_Task::getAlarm(alarmId, tick);
}

StatusType extC_setRelAlarm(AlarmType alarmId,
                           TickType increment, 
                           TickType cycle) { 
	return OSEK_Task::setRelAlarm(alarmId, increment, cycle);
}

void extC_startOS(AppModeType mode) { 
	OSEK_Task::startOS(mode);
}

void extC_shutdownOS(StatusType error) { 
	OSEK_Task::shutdownOS(error);
}

void extC_setAppMode(AppModeType mode) { 
	OSEK_Task::setAppMode(mode);
}


extern "C" int write(int fd, const char *buf, int count);
int write(int fd, const char *buf, int count) {
	OStream cout; cout << buf;
}


extern "C" int print(const char *buf);
int print(const char *buf) {
	OStream cout; cout << buf;
}
