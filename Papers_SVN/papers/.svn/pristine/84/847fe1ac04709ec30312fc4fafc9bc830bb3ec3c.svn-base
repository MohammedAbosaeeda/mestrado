%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Challenges on the Development of Power-Aware
%   Components\label{sec:challenges}}

% Something done. Something easily feasible. Something not so easy,
% but not impossible.

% Some challenges were identified on the development process of
% power-aware components in \textsc{Epos} and, in this section, we
% intend to classify and discuss them. Although most of these
% challenges have been solved, some of them still play the role of
% dangerous pitfalls in our system, since traditional solutions for
% them go against some of the primordial design decisions in our power
% management strategy.


%\subsection{Consistent Operating Mode
%  Migration\label{sec:consistency}}

% Consistence: migrating to other operating modes cannot compromise
% the system consistence.

% One of the first challenges identified on the development of
% power-aware components was the need for consistent operating mode
% propagation. This propagation must guarantee that no data will be
% lost and no unfinished actions will be interrupted. By letting each
% component handle its responsibilities (e. g., a
% \texttt{Communicator} flushing all its buffers and waiting for all
% acknowledgment signals) before propagating the power state
% propagation (e. g. shutting down \texttt{Alarm} and
% \texttt{Channel}), it is possible to guarantee consistent operating
% mode propagation of an entire subsystem.

%\subsection{Dependable Software Components\label{sec:dependable}}

% Dependability: absence of energy-aware capabilities in hardware
% components cannot prevent the system to work properly, although will
% prevent the system from spending less energy.

% \footnote{I don't like the ``dependable'' term here, although it can
%   be justified by the fact that we need to make application porting
%   ``secure'' regardless of the hardware capability of handling power
%   consumption. I don't have enough background to support QoS
%   terminology. I'm accepting suggestions.}

% Some power management strategies rely on hardware resources to guide
% its decisions, thus making hardware variability a prominent
% challenge. As an example we can consider event-driven
% energy-accounting~\cite{Bellosa:2001}, which uses event counters
% equipped in some components (such as the XScale processor) to feed
% schedulers with hardware usage information. If the application
% programmer wants the system scheduler to be configured to make power
% management through event accounting in a hardware without counters,
% the system must ensure the correctness of the scheduler behavior by
% alerting the user (warning about a possible error) or by
% implementing event counters in software. In most situations,
% software implementations for these counters are prohibitive because
% of the huge processing overhead it may generate. In Epos this
% challenge were solved through the use of the system component
% description language allied to the system configurability. Epos
% generation tools are able to identify components' \emph{features}
% and \emph{dependencies} at compilation time. Software components
% which ``depend'' on certain hardware ``features'' (such as
% event-accounting registers) can be appropriately configured by
% applying aspects or changing configurable features they should have.

% \footnote{Another challenge must be included and text must be
%   enhanced}


% Concurrence: concurrent access of shared resources (mainly in
% hardware components) cannot affect the system operation.

% \subsection{Power Consumption Handling of Shared
%   Components\label{sec:sharing}}

%\textsc{ho ho ho}


