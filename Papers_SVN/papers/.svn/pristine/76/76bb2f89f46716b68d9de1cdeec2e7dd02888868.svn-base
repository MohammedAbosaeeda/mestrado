\section{Related Work}
\label{sc:relacionados}


%\textsc{Grace-OS}~\cite{Yuan:2004} é um sistema operacional eficiente em termos de energia para aplicações móveis de multimídia. Esse sistema usa técnicas de adaptações multi-camadas para garantir \qos{} em sistemas com \emph{software} e \emph{hardware} adaptativos. \textsc{Grace-OS} combina escalonamento de tempo real com mecanismos de DVS para dinamicamente gerenciar o consumo de energia. Ele foi implementado sobre o sistema operacional \textsc{Linux} e suporta apenas tarefas \emph{soft real-time}. \textsc{GRUB-PA}~\cite{Scordino:2004} é, de certa forma, semelhante ao \textsc{Grace-OS}. A principal diferença é que \textsc{GRUB-PA} suporta tanto tarefas \emph{soft real-time} quanto tarefas \emph{hard real-time}.

\textsc{Grace-OS}~\cite{Yuan:2004} is an energy-efficient operating system for
mobile multimedia applications. This system uses a cross-layer adaptation
technique to guarantee \qos{} on systems with adaptive software and hardware.
It combines real-time scheduling with DVS mechanisms to dynamically manage
energy consumption. It was implemented over the \textsc{Linux} operating
system and it only supports soft real-time tasks.
\textsc{GRUB-PA}~\cite{Scordino:2004} is somehow similar to \textsc{Grace-OS}.
The main difference is \textsc{GRUB-PA} supports both soft and hard real-time
tasks.

%Niu~\cite{Niu:2005} propôs minimizar a anergia consumida para sistemas \emph{soft real-time} enquanto garante requisitos de \qos{}. Esse objetivo é alcançado através de um algoritmo de escalonamento híbrido (estático/dinâmico) que utiliza \textsc{DVS} e através de técnicas de particionamento do conjunto de tarefas em tarefas obrigatórias e em tarefas opcionais. Nesse trabalho, os requisitos de \qos{} são qualificados pela restrição \textit{(m,k)}, a qual especifica que tarefas devem atender no mínimo \textit{m} \emph{deadlines} em qualquer \textit{k} liberações de tarefas consecutivas. Em um trabalho semelhante, Harada~\cite{Harada:2006} propôs resolver o compromisso entre a maximização dos níveis de \qos{} e a minimização do consumo de energia. Nesse trabalho, cada tarefa é dividida em parte obrigatória e em parte opcional, e é realizada a alocação de ciclos e freqüência do processador com garantias de \qos{}.

Niu~\cite{Niu:2005} proposed to minimize energy consumed by soft real-time
systems while guaranteeing \qos{} requirements. This goal is achieved by a hybrid
static/dynamic scheduling algorithm that it uses DVS mechanisms and it
partitions the set of tasks in mandatory and optional tasks. In this work, the
\qos{} requirements are qualified by \textit{(m,k)} constraints which it
specifies that tasks must meet at least \textit{m} deadlines in any \textit{k} 
consecutive task releases. In a similar work, Harada~\cite{Harada:2006} proposed
to resolve the trade-off between QoS maximization and energy consumption
minimization. It uses an allocation of processor cycles and frequency with
\qos{} guarantees and it divides each task into mandatory and optional parts.

%Outras pesquisas exploram um balanceamento entre \qos{} das aplicações e consumo de energia através de adaptações nas aplicações visando atender o tempo especificado pelo usuário. Um sistema que utiliza essa técnica é \textsc{Odyssey}~\cite{Flinn:1999}. \textsc{Odyssey} realiza o monitoramento da energia fornecida e da energia necessária para executar as tarefas. Com essas informações o monitor é capaz de selecionar o estado correto entre economia de energia e qualidade da aplicação. Esse trabalho também demonstra como as aplicações podem dinamicamente alterar seus comportamentos (``fidelidade'' dos dados) com o objetivo de economizar energia.

Other projects explore trade-off between application's \qos{} and energy
consumption through adaptations in the applications aiming to meet the time
specified by application. \textsc{Odyssey}~\cite{Flinn:1999} uses that idea.
It monitors the energy budget and with this information it can select the 
correct state between energy saving and quality of application. This work 
also demonstrates how the applications can dynamically change their behavior 
(``fidelity'' of the data) with the goal of saving energy.

%\textsc{ECOSystem}~\cite{Zeng:2002} é outro sistema operacional que suporta aplicações adaptativas. Esse sistema é baseado em uma ``moeda'' corrente que as aplicações utilizam para ``pagar'' (alocar) e utilizar recursos do sistema (CPU, disco, rede), chamada \textit{currentcy}. O sistema distribui \textit{currentcies} periodicamente para as tarefas de acordo com uma equação que define uma velocidade de descarga que a bateria pode assumir para forçar o sistema a durar um período de tempo definido. Isso faz com que as aplicações adaptem as execuções de acordo com seus \textit{currentcies}. Esse modelo unifica o cálculo de energia sobre os diferentes dispositivos de \emph{hardware} e proporciona uma satisfatória alocação de energia entre as aplicações.

\textsc{ECOSystem}~\cite{Zeng:2002} is another operating system that supports
application adaptation. This system is based in a ``currency'' that the
applications use to allocate (``to pay'') system resources 
(e.g., access to memory,
network or disks), called \textit{currentcy}. The system distributes
\textit{currentcies} periodically to tasks accordingly to an equation that
defines the discharge rate that the system battery can assume to force the
system to last for a defined period of time. This allows applications to adapt
their execution based on their \textit{currentcy} balance. This model unifies
the calculation of energy on the various hardware devices and it provides a
satisfactory energy allocation among the applications.

