Cluster (Keso) {

	Network (robertino_can) {
		Protocol="keso/driver/can/CanPacketStream";
		DriverInterface="keso/driver/can/CanPort";
		Baudrate = 125000;
	}

	System (master) {
		#Modules = "serialport:avr:can:robertino";
		Modules = "serialport:avr:can:can_emu:robertino";

		Target = "linux_josek";

		OsekOS (KesoOS) {
			# Enable extended error status reporting
			# Possible values: STANDARD, EXTENDED
			STATUS = "EXTENDED";
			
			# STARTUPHOOK = true {
		# 		HookClass = "test/HelloWorld";
		# 		HookMethod = "startup()V";
		# 	}
 
			ERRORHOOK = false {}
			SHUTDOWNHOOK = false {}
			PRETASKHOOK = false {}
			POSTTASKHOOK = false {}
	
			USEGETSERVICEID = "FALSE";
			USEPARAMETERACCESS = "FALSE";
			
			# Use RES_SCHEDULER resource within application (boolean)
			USERESSCHEDULER = "FALSE";
			
			# (PO) PREISRHOOK and POSTISRHOOK routines
			PREISRHOOK = false {}
			POSTISRHOOK = false {}
		}

		Domain (domain0) {
			# (RestrictedDomainScope, IdleRoundRobin)
			Heap = CoffeeBreak {
				# (KESO) Size of the domain's heap
				HeapSizeKB=64;
				SlotSize=8;
	
				# (KESO) Name of the synchronization group (optional, IdleRoundRobin only)
				Group = "Default";
				GCTMode="EnforceOnDemand";
			}

			Task (task1) {
				MainClass="robertino/Main";
			}

			Import (drive0) {
				Access="robertino_can";
				Driver="keso/driver/emulation/CanDriver";
			}

			Import (drive1) {
				Access="robertino_can";
				Driver="keso/driver/emulation/CanDriver";
			}

			Import (drive2) {
				Access="robertino_can";
				Driver="keso/driver/emulation/CanDriver";
			}
		}
	}

	System (drive0) {
		# configuration for the mdsa unit found in the robertino
		Modules = "serialport:avr:can:robertino";

		Target = "AVR";
		ProcessorType = "atmega8535";
		Frequency = 8000000;

		Domain (domain0) {
			Heap = RestrictedDomainScope {
				HeapSize=75;
			}

			Task (task1) {
				MainClass="robertino/mdsa/MDSA0Task";
			}

			Service (drive0) {
				ServiceClass="robertino/mdsa/MDSA";
				ServiceInterface="robertino/mdsa/MDSAService";

				Access="robertino_can";
				Drivers="keso/driver/can/i82527/ATMega8535CanDriver";
				WriteTimeout=500000; 
				AllocTimeout=-1;
			}

			ISR(SIG_OVERFLOW0) {
				HandlerClass="robertino/mdsa/MotorDriver";
				HandlerMethod="control()V";
			}

			ISR(SIG_INT0) {
				HandlerClass="keso/driver/can/i82527/ATMega8535CanDriver";
				HandlerMethod="canInterrupt()V";
			}

		}
	}

	System (drive1) {
		# configuration for the mdsa unit found in the robertino
		Modules = "serialport:avr:can:robertino";

		Target = "AVR";
		ProcessorType = "atmega8535";
		Frequency = 8000000;

		Domain (domain1) {
			Heap = RestrictedDomainScope {
				HeapSize=75;
			}

			Task (task1) {
				MainClass="robertino/mdsa/MDSA1Task";
			}

			Service (drive1) {
				ServiceClass="robertino/mdsa/MDSA";
				ServiceInterface="robertino/mdsa/MDSAService";

				Access="robertino_can";
				Drivers="keso/driver/can/i82527/ATMega8535CanDriver";
				WriteTimeout=500000;
				AllocTimeout=-1; 
			}

			ISR(SIG_OVERFLOW0) {
				HandlerClass="robertino/mdsa/MotorDriver";
				HandlerMethod="control()V";
			}

			ISR(SIG_INT0) {
				HandlerClass="keso/driver/can/i82527/ATMega8535CanDriver";
				HandlerMethod="canInterrupt()V";
			}

		}
	}

	System (drive2) {
		# configuration for the mdsa unit found in the robertino
		Modules = "serialport:avr:can:robertino";

		Target = "AVR";
		ProcessorType = "atmega8535";
		Frequency = 8000000;

		Domain (domain2) {
			Heap = RestrictedDomainScope {
				HeapSize=75;
			}

			Task (task1) {
				MainClass="robertino/mdsa/MDSA2Task";
			}

			Service (drive2) {
				ServiceClass="robertino/mdsa/MDSA";
				ServiceInterface="robertino/mdsa/MDSAService";

				Access="robertino_can";
				Drivers="keso/driver/can/i82527/ATMega8535CanDriver";
				WriteTimeout=500000;
				AllocTimeout=-1; 
			}

			ISR(SIG_OVERFLOW0) {
				HandlerClass="robertino/mdsa/MotorDriver";
				HandlerMethod="control()V";
			}

			ISR(SIG_INT0) {
				HandlerClass="keso/driver/can/i82527/ATMega8535CanDriver";
				HandlerMethod="canInterrupt()V";
			}

		}
	}
}
