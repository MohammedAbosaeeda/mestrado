World(SerialWorld) {
	System (tricore) {
		# configuration for the serial port driver
		Target = "tricore";
		ProcessorType = "tc1796";

		Modules = "serialport:tricore:test_serial";
	
		OsekOS (KesoOS) {
			# Enable extended error status reporting
			# Possible values: STANDARD, EXTENDED
			STATUS = "EXTENDED";
			
			STARTUPHOOK = false {} 
			ERRORHOOK = false {}
			SHUTDOWNHOOK = false {}
			PRETASKHOOK = false {}
			POSTTASKHOOK = false {}
	
			USEGETSERVICEID = "FALSE";
			USEPARAMETERACCESS = "FALSE";
			
			# Use RES_SCHEDULER resource within application (boolean)
			USERESSCHEDULER = "FALSE";
			
			# (PO) Target Microcontroller (TC1796, TC1795B, TC10GP)
			MICROCONTROLLER = "TC1796";
	
			# (PO) Choose a timer for the realtime clock feature
			# (GPTU{0,1}_T{0,1}, STM_T{0,1})
			TRICORE_RT_CLOCK = "NOT_USED";
	
			# (PO) Number of Context Save Areas used by the application
			TRICORE_NUM_CSA = "200";
			
			# (PO) OSEK conformance class. (BCC1,BCC2,ECC1,ECC2,AUTO)
			CC = "AUTO";
			
			# (PO) Overall Scheduling policy (NON,FULL,MIXED,AUTO)
			SCHEDULE = "AUTO";
			
			# (PO) size of tracebuffer, 0 disables tracing
			# TRACEBUFFER = "100";
	
			# (PO) Use user defined main function (boolean)
			USERMAIN = "FALSE";
	
			# (PO) Enable support for Stackchecking
			STACKCHECK = "TRUE";
	
			# (PO) Additional RT checks (boolean)
			# checking initialization of variables, checks if TerminateTask() called at
			# the end of each Task etc.
			EXTRA_RUNTIME_CHECKS = "FALSE";
	
			
			# (PO) Allow ORTI aware debuggers to trace syscalls (boolean)
			SERVICETRACE = "FALSE";
			
			# (PO) Allow ORTI aware debuggers to access last !=E_OK error code returned
			USELASTERROR = "FALSE";
		
			# (PO) PREISRHOOK and POSTISRHOOK routines
			PREISRHOOK = false {}
			POSTISRHOOK = false {}
		}
		
		Domain (dom1) {
			# (KESO) Type of the domain's heap
			# (RestrictedDomainScope, IdleRoundRobin)
			Heap = IdleRoundRobin {
				# (KESO) Size of the domain's heap
				HeapSize=1024;
	
				# (KESO) Size of one slot on the heap (IdleRoundRobin only)
				SlotSize=8;
	
				# (KESO) Name of the synchronization group (optional, IdleRoundRobin only)
				Group = "Default";
			}
	
			Task (task1) {
				# (KESO) Choose MainClass and MainMethod of this task
				# (i.e. where it is started)
				MainClass="test/HelloSerial";
				MainMethod="launch()V";
	
				# Specifiy if tasks is automatically set to ready on startup
				Autostart = true {
					# specifies in which Appmodes the task is autostarted.
					# applies only if Autostart is enabled
					Appmode = "OSDEFAULTAPPMODE";
				}
	
				# Priority >=0, the higher the number the higher is the priority
				Priority = "3";
				
				# Preemptability of the Task (NON, FULL)
				# If NON, no internal resources may be assigned to this task
				Schedule = "full";
	
				# Max number of recorded activation requests for this task
				Activation = "1";
	
				# (PO) Used for optimization. Specifies if the Schedule() call is
				# used by this task. (YES, NO)
				CallScheduler = "NO";
	
				# (PO) BASIC or EXTENDED TASK? (BASIC have no WAITING state)
				Type = "basic";
	
				# (PO) STACKSIZE in bytes required for this task. System will add
				# additional space for calling system functions
				# Should include space required by Pre/PostTaskHooks if used
				STACKSIZE = "100";
	
				# (PO) Number of Context Save Areas used by this task
				# TRICORE_NUM_CSA = "20";
			}
	
			# Declares an ISR routine
			# Both cat1 and cat2 ISRs must be declared
			ISR (isr_asc0_tx) {
				# CATEGORY of the ISR. Cat1 ISRs bypass the OSEK kernel with minimal
				# overhead. The may not use any system services.
				# Cat2 ISRs get their own stackframe and may call most OSEK services.
				CATEGORY = "2";
	
				# The Tricore Service Request Register the ISR will be attached to (PO)
				TRICORE_VECTOR = "ASC0_TSRC";
	
				# Relative IRQLevel of this ISR (PO)
				TRICORE_IRQLEVEL = "10";
	
				# # of context save areas required by this ISR (PO)
				TRICORE_NUM_CSA = "10";
	
				# Specifies how many bytes of stack are required for this ISR (PO)
				STACKSIZE = "64";
	
				# Class and Methodsignature of the Handlerroutine
				HandlerClass = "keso/driver/tricore/tc1796b/ASC0Polling";
				HandlerMethod = "txIRQHandler()V";
			}

			ISR (isr_asc0_tbuf) {
				CATEGORY = "2";
				TRICORE_VECTOR = "ASC0_TBSRC";
				TRICORE_IRQLEVEL = "11";
				TRICORE_NUM_CSA = "10";
				STACKSIZE = "64";
				HandlerClass = "keso/driver/tricore/tc1796b/ASC0Polling";
				HandlerMethod = "tbufIRQHandler()V";
			}

			ISR (isr_asc0_rx) {
				CATEGORY = "2";
				TRICORE_VECTOR = "ASC0_RSRC";
				TRICORE_IRQLEVEL = "12";
				TRICORE_NUM_CSA = "10";
				STACKSIZE = "64";
				HandlerClass = "keso/driver/tricore/tc1796b/ASC0Polling";
				HandlerMethod = "rxIRQHandler()V";
			}
	
			ISR (isr_asc0_err) {
				CATEGORY = "2";
				TRICORE_VECTOR = "ASC0_ESRC";
				TRICORE_IRQLEVEL = "13";
				TRICORE_NUM_CSA = "10";
				STACKSIZE = "64";
				HandlerClass = "keso/driver/tricore/tc1796b/ASC0Polling";
				HandlerMethod = "errIRQHandler()V";
			}
		}
	}
}
