/*! @class System::MMU_Common
    @ingroup med_mmu

    @brief MMU_Common implements a metaprogrammed class to abstract a
    configurable 2-level, 1-level and 0-level paging systems:

    @li <b>2-level</b>: The paging system is comprised by two levels
    of page tables. The first level is a table which contains
    references for the second level of tables. The second level table
    contains references for memory Frames.
    @li <b>1-level</b>: The paging system is comprised only by one
    level of tables. The first (and unique) level is a table which
    contains references for memory Frames.
    @li <b>0-level</b>: The paging system actually do not exist in this
    configuration, thus allowing architectures without MMU's to
    operate properly.

    These levels are achieved by configuring the logical address
    layout by setting the following class parameters:

    @li <b>DIRECTORY_BITS</b>: This parameter indicates the number of
    references the page directory (first-level page table) will
    have. For example, if it is set to 10 bits, each page directory
    will have 1024 references for second-level page tables.
    @li <b>PAGE_BITS</b>: This parameter indicates the number of
    references each second-level page table will have. For example, if
    it is set to 10 bits, each page table will have 1024
    references for memory Frames.
    @li <b>OFFSET_BITS</b>: this parameter will set the size of memory
    frames. For example, if it is set to 12, each memory frame will
    have 4096 bytes.

    The sum of these tree parameters must always be equal to the
    architecture addressing size. For example, the IA32 processor use
    32-bit addresses. A usual configuration in 2-level paging for this
    architecture is <10,10,12>.

    To use 1-level paging, PAGE_BITS must be zero (e.g., <20,0,12>).

    To use 0-level paging (for architectures without MMU), all bits
    must be set to zero (<0,0,0>).

    <!-- *******************************Functions******************************* -->
    @fn static unsigned int System::MMU_Common::pages(unsigned int bytes)
    @brief Method to calculate the number of pages needed to hold the
    amount of data informed by <b>bytes</b>.

    @param bytes
    Amount of data.

    @return
    Amount of pages.

    <!-- *********************************************************************** -->
    @fn static unsigned int System::MMU_Common::page_tables(unsigned int pages)
    @brief Method to calculate the number of page_tables needed to
    hold the amount of pages informed by <b>pages</b>.

    @param pages
    Amount of pages.

    @return
    Amount of page tables.

    <!-- *********************************************************************** -->
    @fn static unsigned int System::MMU_Common::offset(Log_Addr addr)
    @brief Method to calculate the offset of a given address.

    @param addr
    A logical address.

    @return
    The offset of the given address (less significant bits, defined by
    OFFSET_BITS class parameter).

    <!-- *********************************************************************** -->
    @fn static unsigned int System::MMU_Common::indexes(Log_Addr addr)
    @brief Method to calculate the indexes of a given address.

    @param addr
    A logical address.

    @return
    The indexes of the given address (more significant bits, defined
    by DIRECTORY_BITS and PAGE_BITS).

    <!-- *********************************************************************** -->
    @fn static unsigned int System::MMU_Common::page(Log_Addr addr)
    @brief Method to calculate the index for the second-level page table.

    @param addr
    A logical address.

    @return
    The index for the second-level page table.

    <!-- *********************************************************************** -->
    @fn static unsigned int System::MMU_Common::directory(Log_Addr addr)
    @brief Method to calculate the index for the first-level page
    table (page directory).

    @param addr
    A logical address.

    @return
    The index for the first-level page table.

    <!-- *********************************************************************** -->
    @fn static Log_Addr System::MMU_Common::align32(Log_Addr addr)
    @brief Method to aling an address to 32 bits (4 bytes). Rounding
    is always done to a higher address.

    @param addr
    A logical address.

    @return
    A logical address.

    <!-- *********************************************************************** -->
    @fn static Log_Addr System::MMU_Common::align64(Log_Addr addr)
    @brief Method to aling an address to 64 bits (8 bytes). Rounding
    is always done to a higher address.

    @param addr
    A logical address.

    @return
    A logical address.

    <!-- *********************************************************************** -->
    @fn static Log_Addr System::MMU_Common::align128(Log_Addr addr)
    @brief Method to aling an address to 128 bits (16 bytes). Rounding
    is always done to a higher address.

    @param addr
    A logical address.

    @return
    A logical address.

    <!-- *********************************************************************** -->
    @fn static Log_Addr System::MMU_Common::align_page(Log_Addr addr)
    @brief Method to align a given logical address to the first
    logical address of the page which contains it.

    @param addr
    A logical Address.

    @return
    A logical Address.

    <!-- *********************************************************************** -->
    @fn static Log_Addr System::MMU_Common::align_directory(Log_Addr addr)
    @brief Method to align a given logical address to the first
    logical address of the directory which contains it.

    @param addr
    A logical address.

    @return
    A logical address.

    <!-- ******************************Inner Types****************************** -->

    @class System::MMU_Common::Flags
    @ingroup med_mmu

    @brief Class to abstract configuration flags for memory segments.

    A operator overhiding for the unsigned int cast operator allows
    easy interoperability among the types Flags and unsgined int. An
    enumerator in this class provides the layout for these flags.

    <!-- *********************************************************************** -->
    @fn System::MMU_Common::Flags::Flags()
    @brief Default constructor. Flags aren't set.

    <!-- *********************************************************************** -->
    @fn System::MMU_Common::Flags::Flags(const Flags & f)
    @brief Constructor to set Flags from another Flags (Copy
    Constructor).

    @param f
    Flags to copy to the new instance.

    <!-- *********************************************************************** -->
    @fn System::MMU_Common::Flags::Flags(unsigned int f)
    @brief Constructor to set Flags from an unsigned int.

    @param f
    Flags to be set.

    <!-- *********************************************************************** -->
    @fn System::MMU_Common::Flags::operator unsigned int() const
    @brief Cast operator to allow easy comparation and attribution
    among Flags and unsigned int.

    @return
    unsgined int

    <!-- *********************************************************************** -->
    @fn Debug & System::MMU_Common::Flags::operator<< (Debug & db, Flags f)
    @brief <b>\<\<</b>Operator to allow easy debug of flags using an
    OStream component.

    The following example should write to the system display
    something like "0x00000003" on a 32-bit architecture:

    <tt>
    OStream cout;<br>
    Flags flags(Flags::SYS);

    cout << flags;
    </tt>

*/
