/*! @class System::Segment
    @ingroup abs_segment

    @brief The Segment abstraction is used allocate a chunk of physical
    memory by accessing the MMU mediator.
  
    The Segment abstraction is an implementation for the
    Dynamic_Segment component of the Segment family.
    It may be used to allocate chunks of physical memory (System::MMU::Chunk).
    Segments may be used to map memory in Address_Space. To allocate
    physical memory chunks an application or abstraction can
    instantiate a segment with a size and, optionally, a set of flags
    to configure it.
    A Segment may also be used to map I/O ranges in the address
    space. In this case, the abstraction must be instantiated with a
    physical address, the size for the I/O range and, optionally, a
    set of flags to configure it.

    <!-- *********************************************************************** -->

    @fn System::Segment::Segment(unsigned int bytes, Flags flags = Flags::APP)
    @brief Creates a Segment by forwarding the parameters to instantiate a System::MMU::Chunk

    @param bytes
    Segment size in bytes.

    @param flags
    Configuration flags for this chunk of memory. These flags are
    defined by System::MMU_Common. Every segment are configured with
    application flags by default.

    <!-- *********************************************************************** -->

    @fn System::Segment::Segment(Phy_Addr phy_addr, unsigned int bytes, Flags flags = Flags::APP)
    @brief Creates an I/O Segment by forwarding the parameters to
    instantiate a System::MMU:Chunk with the
    System::MMU_Common::Flags::IO bit set.

    @param phy_addr
    The physical start address of the IO Region to be mapped.

    @param bytes
    Segment size in bytes.

    @param flags
    Configuration flags for this chunk of memory. These flags are
    defined by System::MMU_Common. Every segment are configured with
    application flags by default.

    <!-- *********************************************************************** -->

    @fn System::Segment::~Segment()
    @brief Destroys the segment by calling MMU::Chunk::~Chunk.

    <!-- *********************************************************************** -->

    @fn unsigned int System::Segment::size() const
    @brief Method to get the size of a segment by calling MMU::Chunk::size().

    @return
    This function returns the size of the segment in bytes.

    <!-- *********************************************************************** -->

    @fn Phy_Addr System::Segment::phy_address() const
    @brief Method to get the Physical Address of a segment by calling MMU::Chunk::phy_address().

    @return
    This function returns the physical address of the segment if it is
    contiguous. If it isn't contiguous, it returns false.

    @note
    Every Segment is a physical chunk of memory, thus it only holds
    its physical address. Logical address are set by the
    System::Address_Space component.

    <!-- *********************************************************************** -->

    @fn int System::Segment::resize(int amount)
    @brief Method to resize a segment by calling MMU::Chunk::resize(int).

    @param amount
    Amount is the amount of memory in bytes to be added to the segment.

    @return
    This function returns the amount of memory allocated to resize the
    segment. If resize fails, it returns zero.

    @note
    Resize depends on the implementation of the MMU mediator. Usually
    its is only possible when Paging is avaliable.

*/
