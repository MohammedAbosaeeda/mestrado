/* Generated By:JavaCC: Do not edit this line. KesoDataManagerReader.java */
package keso.editor.data.datamanager.reader;

import java.io.FileInputStream;
import java.io.FileNotFoundException;

import keso.editor.data.datamanager.*;

/**
 * @author  Wilhelm Haas
 */
public class KesoDataManagerReader implements KesoDataManagerReaderConstants {
        public static void parseFile(String filename) throws Exception {
                KesoDataManagerReader parser = null;

                try {
                        parser = new KesoDataManagerReader(new FileInputStream(filename));
                } 
                catch (FileNotFoundException ex) {
                	throw new Exception(ex.toString());
                }
                catch (Exception ex) {
                        ex.printStackTrace();
                        throw new Exception(ex.toString());
                }

                try {
                        parser.start();
                } catch (Exception ex) {
                        throw new Exception(ex.toString());
                }
        }

  final public void start() throws ParseException {
        Token identifier;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINECOMMENT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINECOMMENT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(LINECOMMENT);
      }
      identifier = jj_consume_token(IDENTIFIER);
      jj_consume_token(CANHAVE);
                        KesoDataManager.addCanHave(identifier.image, parseCanHave());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITHRESTRICTION:
        jj_consume_token(WITHRESTRICTION);
                                KesoDataManager.addRestriction(identifier.image, parseRestrictions());
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    }
    jj_consume_token(0);
  }

  final public KesoCanHave parseCanHave() throws ParseException {
        Token have;
        KesoCanHave canhave = new KesoCanHave();
    have = jj_consume_token(IDENTIFIER);
                canhave.add(have.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      have = jj_consume_token(IDENTIFIER);
                        canhave.add(have.image);
    }
                {if (true) return canhave;}
    throw new Error("Missing return statement in function");
  }

  final public IKesoDataRestriction parseRestrictions() throws ParseException {
        IKesoDataRestriction restriction = null;
        IKesoDataRestriction first_restriction = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      restriction = parseUnaryRestriction();
                                {if (true) return restriction;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
                                first_restriction = parseRestrictions();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
                                                restriction = parseAndRestrictions();
        break;
      case OR:
        jj_consume_token(OR);
                                                restriction = parseOrRestrictions();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                if (restriction == null) {
                                        restriction = first_restriction;
                                } else {
                                        ((IKesoDataRestrictionContainer) restriction).add(0, first_restriction);
                                }
      jj_consume_token(RPAREN);
                        {if (true) return restriction;}
                {if (true) return restriction;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AndKesoDataRestriction parseAndRestrictions() throws ParseException {
        AndKesoDataRestriction restriction = new AndKesoDataRestriction();
                restriction.add(parseRestrictions());
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
                        restriction.add(parseRestrictions());
    }
                {if (true) return restriction;}
    throw new Error("Missing return statement in function");
  }

  final public OrKesoDataRestriction parseOrRestrictions() throws ParseException {
        OrKesoDataRestriction restriction = new OrKesoDataRestriction();
                restriction.add(parseRestrictions());
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      jj_consume_token(OR);
                        restriction.add(parseRestrictions());
    }
                {if (true) return restriction;}
    throw new Error("Missing return statement in function");
  }

  final public IKesoDataRestriction parseUnaryRestriction() throws ParseException {
        Token name;
        Token min;
        Token max;
        UnaryKesoDataRestriction unary;
    name = jj_consume_token(IDENTIFIER);
                unary = new UnaryKesoDataRestriction(name.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      min = jj_consume_token(NUMBER);
                                unary.setMin(Integer.parseInt(min.image));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        max = jj_consume_token(NUMBER);
                                        unary.setMax(Integer.parseInt(max.image));
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                {if (true) return unary;}
    throw new Error("Missing return statement in function");
  }

  public KesoDataManagerReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token;
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x420,0x20,0x200,0x400000,0x180,0x4400,0x100,0x80,0x400000,0x80000,};
   }

  public KesoDataManagerReader(java.io.InputStream stream) {
     this(stream, null);
  }
  public KesoDataManagerReader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KesoDataManagerReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public KesoDataManagerReader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KesoDataManagerReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public KesoDataManagerReader(KesoDataManagerReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  public void ReInit(KesoDataManagerReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[25];
    for (int i = 0; i < 25; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
