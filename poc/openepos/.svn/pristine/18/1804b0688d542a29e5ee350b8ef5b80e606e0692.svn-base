// EPOS-- MIPS CPU Mediator Implementation

#include <system/config.h>

__BEGIN_SYS

void MIPS32::Context::save(Context * volatile * o) volatile
{
    // this should have been generated by GCC
    ASM
	(
		"	.set noreorder				\n"
		"	.set noat					\n"
		"	add		$26, $4, $0			\n"
		//"	lw		$26,   0($4)		\n"
		"	sw		$31, 0($26)			\n"
		"	sw		$1,  4($26)			\n"
		"	sw		$2,  8($26)			\n"
		"	sw		$3,  12($26)		\n"
		"	sw		$4,  16($26)		\n"
		"	sw		$5,  20($26)		\n"
		"	sw		$6,  24($26)		\n"
		"	sw		$7,  28($26)		\n"
		"	sw		$8,  32($26)		\n"
		"	sw		$9,  36($26)		\n"
		"	sw		$10, 40($26)		\n"
		"	sw		$11, 44($26)		\n"
		"	sw		$12, 48($26)		\n"
		"	sw		$13, 52($26)		\n"
		"	sw		$14, 56($26)		\n"
		"	sw		$15, 60($26)		\n"
		"	sw		$16, 64($26)		\n"
		"	sw		$17, 68($26)		\n"
		"	sw		$18, 72($26)		\n"
		"	sw		$19, 76($26)		\n"
		"	sw		$20, 80($26)		\n"
		"	sw		$21, 84($26)		\n"
		"	sw		$22, 88($26)		\n"
		"	sw		$23, 92($26)		\n"
		"	sw		$24, 96($26)		\n"
		"	sw		$25, 100($26)		\n"
		//$26 and $27 not in context
		"	sw		$28, 104($26)		\n"
		"	sw		$29, 108($26)		\n"
		"	sw		$30, 112($26)		\n"
		"	sw		$31, 116($26)		\n"
		//"	mfc0  $27, $14        #C0_EPC=14 (Exception PC)	\n"
		//"	addi  $27, $27, -4    #Backup one opcode	\n"
		//"	sw    $27, 128($26)    #pc	\n"
		"	sw    $31, 128($26)    #pc	\n"
		"	mfhi  $27	\n"
		"	sw    $27, 120($26)    #hi	\n"
		"	mflo  $27	\n"
		"	sw    $27, 124($26)    #lo	\n"
		"	add		$26, $0, $0			\n"
		"	add		$27, $0, $0			\n"
	);
}

void MIPS32::Context::load(Context * volatile * o) const volatile
{
	//$4 é o primeiro argumento...
    ASM
	(
		"	.set noreorder				\n"
		"	.set noat					\n"
		"	add		$26, $4, $0			\n"
		//"	lw		$26,   0($4)		\n"
		"	lw		$31, 0($26)			\n"
		"	lw		$1,  4($26)			\n"
		"	lw		$2,  8($26)			\n"
		"	lw		$3,  12($26)		\n"
		"	lw		$4,  16($26)		\n"
		"	lw		$5,  20($26)		\n"
		"	lw		$6,  24($26)		\n"
		"	lw		$7,  28($26)		\n"
		"	lw		$8,  32($26)		\n"
		"	lw		$9,  36($26)		\n"
		"	lw		$10, 40($26)		\n"
		"	lw		$11, 44($26)		\n"
		"	lw		$12, 48($26)		\n"
		"	lw		$13, 52($26)		\n"
		"	lw		$14, 56($26)		\n"
		"	lw		$15, 60($26)		\n"
		"	lw		$16, 64($26)		\n"
		"	lw		$17, 68($26)		\n"
		"	lw		$18, 72($26)		\n"
		"	lw		$19, 76($26)		\n"
		"	lw		$20, 80($26)		\n"
		"	lw		$21, 84($26)		\n"
		"	lw		$22, 88($26)		\n"
		"	lw		$23, 92($26)		\n"
		"	lw		$24, 96($26)		\n"
		"	lw		$25, 100($26)		\n"
		"	lw		$28, 104($26)		\n"
		"	lw		$29, 108($26)		\n"
		"	lw		$30, 112($26)		\n"
		"	lw		$31, 116($26)		\n"
		"	lw		$27, 120($26)    #hi	\n"
		"	mthi	$27	\n"
		"	lw		$27, 124($26)    #lo	\n"
		"	mtlo	$27	\n"	
		"	lw		$26, 0($26)    #pc	\n"
		"	ori		$27, $0, 0x1    #re-enable interrupts	\n"
		"	jr		$26	\n"
		"	mtc0	$27, $12        #STATUS=1; enable interrupts	\n"
	//: "=r"(o)
	);
}

void MIPS32::switch_context(Context * volatile o, Context * volatile n) 
{
    ASM("	.set noreorder						\n"
		"	.set noat						\n"
		//"	lw		$26,   0($4)				\n"
		"	add		$26, $4, $0			\n"
		"	sw		$31, 0($26)			\n"	//nesse caso pc será o ra
		"	sw		$1,  4($26)			\n"
		"	sw		$2,  8($26)			\n"
		"	sw		$3,  12($26)		\n"
		"	sw		$4,  16($26)		\n"
		"	sw		$5,  20($26)		\n"
		"	sw		$6,  24($26)		\n"
		"	sw		$7,  28($26)		\n"
		"	sw		$8,  32($26)		\n"
		"	sw		$9,  36($26)		\n"
		"	sw		$10, 40($26)		\n"
		"	sw		$11, 44($26)		\n"
		"	sw		$12, 48($26)		\n"
		"	sw		$13, 52($26)		\n"
		"	sw		$14, 56($26)		\n"
		"	sw		$15, 60($26)		\n"
		"	sw		$16, 64($26)		\n"
		"	sw		$17, 68($26)		\n"
		"	sw		$18, 72($26)		\n"
		"	sw		$19, 76($26)		\n"
		"	sw		$20, 80($26)		\n"
		"	sw		$21, 84($26)		\n"
		"	sw		$22, 88($26)		\n"
		"	sw		$23, 92($26)		\n"
		"	sw		$24, 96($26)		\n"
		"	sw		$25, 100($26)		\n"
	//$26 and $27 not in context
		"	sw		$28, 104($26)		\n"
		"	sw		$29, 108($26)		\n"
		"	sw		$30, 112($26)		\n"
		"	sw		$31, 116($26)		\n"
		//"	mfc0	$27, $14        #C0_EPC=14 (Exception PC)	\n"
		//"	addi	$27, $27, -4    #Backup one opcode	\n"
		//"	sw		$27, 128($26)    #pc	\n"
		"	sw		$31, 128($26)    #pc	\n"
		"	mfhi	$27	\n"
		"	sw		$27, 120($26)    #hi	\n"
		"	mflo	$27	\n"
		"	sw		$27, 124($26)    #lo	\n"
	//"	mfc0	$27, $12					\n"
	//"	nop							\n"
	//"	sw		$27, 120($26)				\n"
	//"	nop							\n"
		"	addu	$26,  $5,  $0					\n"
		"	lw		$31, 0($26)			\n"
		"	lw		$1,  4($26)			\n"
		"	lw		$2,  8($26)			\n"
		"	lw		$3,  12($26)		\n"
		"	lw		$4,  16($26)		\n"
		"	lw		$5,  20($26)		\n"
		"	lw		$6,  24($26)		\n"
		"	lw		$7,  28($26)		\n"
		"	lw		$8,  32($26)		\n"
		"	lw		$9,  36($26)		\n"
		"	lw		$10, 40($26)		\n"
		"	lw		$11, 44($26)		\n"
		"	lw		$12, 48($26)		\n"
		"	lw		$13, 52($26)		\n"
		"	lw		$14, 56($26)		\n"
		"	lw		$15, 60($26)		\n"
		"	lw		$16, 64($26)		\n"
		"	lw		$17, 68($26)		\n"
		"	lw		$18, 72($26)		\n"
		"	lw		$19, 76($26)		\n"
		"	lw		$20, 80($26)		\n"
		"	lw		$21, 84($26)		\n"
		"	lw		$22, 88($26)		\n"
		"	lw		$23, 92($26)		\n"
		"	lw		$24, 96($26)		\n"
		"	lw		$25, 100($26)		\n"
		"	lw		$28, 104($26)		\n"
		"	lw		$29, 108($26)		\n"
		"	lw		$30, 112($26)		\n"
		"	lw		$31, 116($26)		\n"
		"	lw		$27, 120($26)    #hi	\n"
		"	mthi	$27	\n"
		"	lw		$27, 124($26)    #lo	\n"
		"	mtlo	$27	\n"	
		"	lw		$26, 0($26)    #pc	\n"
		"	ori		$27, $0, 0x1    #re-enable interrupts	\n"
		"	jr		$26	\n"
		"	mtc0	$27, $12        #STATUS=1; enable interrupts	\n"
		"	jr		$31					\n"
		"	nop							\n"
		"	.set reorder				\n"
		"	.set at						\n");
}




void MIPS32::show_stuff(char * bi)
{
	for(int i = 0; i < 512; i++)
	{
		if ((i % 16) == 0) {
			printhex4(i);
			kout << " ";
		}
		kout << " ";
		char ch = bi[i];
		printhex2(ch);
		if ((i % 16) == 15) {
			int j;
			kout << " ";
			for (j = i-15; j <= i; j++) {
				ch = bi[j];
				if (ch < 32 || ch >= 127)
					ch = '.';
				printchar(ch);
			}
			kout << "\n";
		}
	}
}

__END_SYS

