package keso.editor.output;

import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.Iterator;

import keso.editor.KGE;
import keso.editor.data.IKesoData;
import keso.editor.property.IntegerKesoProperty;
import keso.editor.property.IKesoProperty;
import keso.editor.property.complexproperty.IKesoComplexProperty;

public class ConfigurationKesoOutput extends KesoOutput {

	public ConfigurationKesoOutput() {
		super();
	}

	public ConfigurationKesoOutput(String filename) {
		super(filename);
		// TODO Auto-generated constructor stub
	}

	public void output() {
		if (this.getFilename() != null) {
			try {
				FileOutputStream fos = new FileOutputStream(this.getFilename());
				PrintStream pfos = new PrintStream(fos);
				StringBuffer bf = new StringBuffer();
				this.output(bf, this.getData(), "");
				pfos.print(bf.toString());
				pfos.close();
				fos.close();
			} catch(Exception e) {
				
			}
		}
	}
	
	public String toString() {
		String output = "";
		if (this.getData() != null) {
			StringBuffer bf = new StringBuffer();
			this.output(bf, this.getData(), "");
			output = bf.toString();
		}
		return output;
	}
	
	private void output(StringBuffer pfos, IKesoData data, String prefix) {
		pfos.append(prefix + data.getIdentifier());
		if (!data.getIdentifier().equals(KGE.PUBLICDOMAIN)) {
			pfos.append("(" + data.getName() + ")");
		}
		pfos.append(" {\n");
		
		if (data.getChildren().size() == 0 && data.getPropertyContainer().getProperties().size() == 0) {
			pfos.append(prefix + "\t# Autogenerated comment\n");
		}
		
		for (Iterator i = data.getChildren().iterator(); i.hasNext(); ) {
			IKesoData child = (IKesoData) i.next();
			this.output(pfos, child, prefix + "\t");
		}
		
		//if (!data.getIdentifier().equals(KGE.WORLD)) {
			for (Iterator i = data.getPropertyContainer().getProperties().iterator(); i.hasNext(); ) {
				IKesoProperty childproperty = (IKesoProperty) i.next();
				this.outputProperty(pfos, childproperty, prefix + "\t");
			}
		//}
		pfos.append(prefix + "}\n");
	}
	
	private void outputProperty(StringBuffer pfos, IKesoProperty property, String prefix) {
		if (property.getIdentifier().equals(KGE.PROPERTY_INTEGER)) {
			outputIntegerProperty(pfos, property, prefix);
		} else if (property.getIdentifier().equals(KGE.PROPERTY_STRING)) {
			outputStringProperty(pfos, property, prefix);
		} else if (property.getIdentifier().equals(KGE.PROPERTY_INTEGERARRAY)) {
			outputIntegerArrayProperty(pfos, property, prefix);
		} else if (property.getIdentifier().equals(KGE.PROPERTY_COMPLEXBOOLEAN)) {
			outputComplexBooleanProperty(pfos, property, prefix);
		} else if (property.getIdentifier().equals(KGE.PROPERTY_COMPLEXUNQUOTEDSTRING)) {
			outputComplexUnquoatedStringProperty(pfos, property, prefix);
		}
	}

	private void outputComplexUnquoatedStringProperty(StringBuffer pfos, IKesoProperty property, String prefix) {
		pfos.append(prefix + property.getName() + " = " + property.getValue() + " {\n");
		for (Iterator i = ((IKesoComplexProperty) property).getProperties().iterator(); i.hasNext(); ) {
			IKesoProperty childproperty = (IKesoProperty) i.next();
			this.outputProperty(pfos, childproperty, prefix + "\t");
		}
		pfos.append(prefix + "}\n");
	}

	private void outputComplexBooleanProperty(StringBuffer pfos, IKesoProperty property, String prefix) {
		pfos.append(prefix + property.getName() + " = " + property.getValue() + " {\n");
		for (Iterator i = ((IKesoComplexProperty) property).getProperties().iterator(); i.hasNext(); ) {
			IKesoProperty childproperty = (IKesoProperty) i.next();
			this.outputProperty(pfos, childproperty, prefix + "\t");
		}
		pfos.append(prefix + "}\n");
	}

	private void outputIntegerArrayProperty(StringBuffer pfos, IKesoProperty property, String prefix) {
		pfos.append(prefix + property.getName() + " = {" + property.getValue() + "};\n");
	}

	private void outputStringProperty(StringBuffer pfos, IKesoProperty property, String prefix) {
		pfos.append(prefix + property.getName() + " = \"" + property.getValue() + "\";\n");
	}

	private void outputIntegerProperty(StringBuffer pfos, IKesoProperty property, String prefix) {
		pfos.append(prefix + property.getName() + " = " + ((IntegerKesoProperty) property).getInteger() + ";\n");
	}

}
