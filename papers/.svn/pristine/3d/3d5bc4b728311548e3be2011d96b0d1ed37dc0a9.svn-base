\section{Evaluation}
\label{sec:evaluation}

Tests were performed with the chosen application running under EPOS 1.1 and compiled with GNU 4.5.2 for IA32 architecture. The integrated environment is composed by GDB 7.2 and QEMU 0.14.0. For evaluation were collected data from totally random and partially random tests of DMEC application. 

Totally random test is the one that has no prior information on the application. That is, any configuration within \texttt{traits} can change, including parameters that not influence the application. Figure~\ref{fig:comp_report_total} presents a piece of report with some generated configuration.

\fig{comp_report_total}{Totally random generated configurations}{scale=.4}

In this case, test performed hundred tries, generating 85 different configurations in which 23\% of them could be correctly compiled, but less than 5\% of configurations were relevant to DMEC. Figure~\ref{fig:total_random} presents the ratio of the different configurations generated, those that have been compiled and those that were actually relevant.

\fig{total_random}{Totally random configurations versus their relevance}{scale=.6}
%100 testes, 78 negativas, 22 positivas - 66 dif neg, 19 dif pos - 5 pos dmec e 21 neg dmec

The execution of this versions showed that application did not change significantly, since most part of exchanged parameters not influence the application.

On the other hand, a partially random test has some tips about application, such as relevant settings and valid configurations. In other words, the script changes only parameters that directly influences the application. This second test was concentrated in only one configuration, the number of \texttt{Workers}. Thus it was possible to focus on just one parameter to try to find the best option for the application. Figure~\ref{fig:comp_report_partial} presents a report with all tries.

\fig{comp_report_partial}{Partially random generated configurations}{scale=.43}

The test got 69 different configurations (same number of tries) and all of them could be correctly compiled and only 8 could be executed, in other words, less than 10\% of tries could be used as configuration. Figure~\ref{fig:partial_random} presents the ratio of the different configurations versus its relevance.

\fig{partial_random}{Partially random configurations versus their relevance}{scale=.6}

Also, to use the integrated debug environment it was necessary to build the code with a special setup, in which it is possible to generate information about the application to be tested. 

Without this information the original DMEC image consumes more than 50kB, but with the generation of debug symbols the new image consumes about 70 kB and increases in 80\% the cost in terms of memory to debug DMEC application.

