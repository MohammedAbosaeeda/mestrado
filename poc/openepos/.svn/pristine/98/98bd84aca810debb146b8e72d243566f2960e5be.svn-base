#include <thread.h>
#include <osek_os.h>
#include <osek_task.h>

__USING_SYS
__BEGIN_SYS

void Thread::osek_reset() {
//? debug
	db<Thread>(WRN) << "   Thread::osek_reset of " << this << "\n";
//?
	prevent_scheduling();
	_context = CPU::init_stack(_stack, _stack_size, &implicit_exit, _entry);
	allow_scheduling();
}

void Thread::osek_suspend() {
//? debug
	db<Thread>(WRN) << "   Thread::osek_suspend(this=" << this << ")\n";
//?
	prevent_scheduling();
	_state = SUSPENDED;
	_suspended.insert(&_link);
	if(this != _running) _ready.remove(this);
	allow_scheduling();
}

void Thread::osek_resume() {
//?	debug
	db<Thread>(WRN) << "   Thread::osek_resume(this=" << this << ")\n";
	db<Thread>(WRN) << "      Ready queue before: "; osek_printQueue(_ready);
//?
	prevent_scheduling();
	if(_state != SUSPENDED) {
//?	debug
		db<Thread>(WRN) << "      _state != SUSPENDED  => nothing to do\n";
//?
		allow_scheduling();
		return;
    }

	if(_suspended.remove(this)) {
		_state = READY;
		_ready.insert(&_link);
//?	debug
		db<Thread>(WRN) << "      thread set into status READY queue\n";
//?
	} else // the thread has terminated while suspended (e.g. by delete)
//?	debug
		db<Thread>(WRN) << "Thread::resume called with defunct thread!\n";
	db<Thread>(WRN) << "      Ready queue after: "; osek_printQueue(_ready);
//?
	allow_scheduling();
}

void Thread::osek_reschedule() {
//?	debug
	db<Thread>(WRN) << "   Thread::osek_reschedule()\n";
	db<Thread>(WRN) << "      Ready queue: "; osek_printQueue(_ready);
	db<Thread>(WRN) << "      _ready.size() = " << _ready.size() << "\n";
//?
	prevent_scheduling();
	Queue::Element * e = _ready.head();
//?	debug
	db<Thread>(WRN) << "      _ready.head()->object() = " << e->object() << "\n";
	if(e) db<Thread>(WRN) << "      _ready.head()->rank() = " << e->rank() << "\n";
//?
	if(e && (e->rank() < _running->_link.rank() || _running->_state == SUSPENDED)) {
		if(!(_running->_state == SUSPENDED)) {
			_running->_state = READY;
			(static_cast<OSEK_Task*>(_running))->taskState = READY;
			_ready.insert_priv(&_running->_link);
//?	debug
			db<Thread>(WRN) << "      putting old task into READY queue/state\n";
//?
		}
		Thread* first = _ready.remove()->object();
//?	debug
		db<Thread>(WRN) << "      first:  " << first << "\n";
//?
		if(first->mustReset) {
			first->osek_reset();
			first->mustReset = false;
		}
		osek_switch_to(first);
	} else if(_running->mustReset) {
		_running->mustReset = false;
//+ CH_EO_C_thread_osek_cc_postTaskHook
//+ CH_EO_C_thread_osek_cc_preTaskHook
		CPU::selfrestart(_running->_stack, _running->_stack_size, _running->_entry);
	}
//?	debug
	db<Thread>(WRN) << "      without context switch\n";
//?
}

void Thread::osek_switch_to(Thread * n) {
    // scheduling must be disabled at this point!
	Thread * o = _running;
//?	debug
	db<Thread>(TRC) << "Thread::osek_switch_to(o=" << o << ",n=" << n << ")\n";
//?
//+ CH_EO_C_thread_osek_cc_postTaskHook
	n->_state = RUNNING;
	(static_cast<OSEK_Task*>(_running))->taskState = RUNNING;
	_running = n;
//+ CH_EO_C_thread_osek_cc_preTaskHook

	if(n == _idle)
		db<Thread>(TRC) << "Thread::idle()\n";

//?	debug
	db<Thread>(WRN) << "   Thread::osek_switch_to: will switch from " << o 
	                << " to " << n << "\n";
//?
	CPU::switch_context(&o->_context, n->_context);
	allow_scheduling();
}

void Thread::osek_wait() {
//?	debug
	db<Thread>(WRN) << "   Thread::osek_wait()\n";
//?
	prevent_scheduling();
	_state = SUSPENDED;
	_suspended.insert(&_link);
//?	debug
	db<Thread>(WRN) << "      Task " << Thread::self() << " suspended\n";
//?
	allow_scheduling();
}

bool Thread::osek_idleRunning() {
	if(_running == _idle) return true;
	else return false;
}

void Thread::osek_printQueue(Queue q) { 
	Queue::Element* e;
	for(e = q.head(); e; e = e->next()) 
		db<Thread>(WRN) << e->object() << " ";
	db<Thread>(WRN) << "\n";
}

__END_SYS
