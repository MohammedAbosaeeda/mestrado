/*! @class System::List_Common  
    @ingroup utils

    @brief The List_Common class contains the implementation of the various list types that EPOS supports.

    <!-- *********************************************************************** -->

    @class System::List_Common::Element
    @ingroup utils
	@brief Element.

    <!-- *********************************************************************** -->

    @class System::List_Common::Element< T, false, false, false >
    @ingroup utils

	@brief Element for singly linked list

	@fn System::List_Common::Element::Element(const T * o) 
	@param o Object that will be associated with the element.
	
	@fn T * System::List_Common::Element::object()
	@brief Returns a pointer to the associated object.

	@fn Element * System::List_Common::Element::next()
	@brief Returns the next element of the list.

	@fn void System::List_Common::Element::next(Element * e)
	@brief Set the next element to 'e'.


<!-- *********************************************************************** -->
    @class System::List_Common::Element<T, false, false, true>
	@brief Element for singly linked, grouping list.

	@fn System::List_Common::Element::Element(const T * o, int s)
	@param o Object that will be associated with the element.
	@param s The size of the element.
	
	@fn T * System::List_Common::Element::object()
	@brief Returns a pointer to the associated object.

	@fn Element * System::List_Common::Element::next()
	@brief Returns the next element of the list.

	@fn unsigned int System::List_Common::Element::size()
	@brief Returns the size of the element.

	@fn void System::List_Common::Element::next(Element * e)
	@brief Set the next element to 'e'.
	
	@fn void System::List_Common::Element::size(unsigned int l)
	@brief Sets the size of element.

	@fn void System::List_Common::Element::shrink(unsigned int n)
	@brief Shrinks the size of the element by 'n'.
	
	@fn void System::List_Common::Element::expand(unsigned int n)
    	@brief Expands the size of the element by 'n'


<!-- *********************************************************************** -->
    @class System::List_Common::Element< T, true, false, false >
	@brief Element for doubly linked list

	@fn System::List_Common::Element::Element(const T * o)
	@param o Object that will be associated with the element.
	
	@fn T * System::List_Common::Element::object()
	@brief Returns a pointer to the associated object.

	@fn Element * System::List_Common::Element::prev()
	@brief Returns the previous element of the list.

	@fn Element * System::List_Common::Element::next()
	@brief Returns the next element of the list.

	@fn void System::List_Common::Element::prev(Element * e)
	@brief Set the previous element to 'e'.

	@fn void System::List_Common::Element::next(Element * e)
	@brief Set the next element to 'e'.
	

<!-- *********************************************************************** -->
    @class System::List_Common::Element<T, true, true, false>
	@brief Element for ordered list

	@fn System::List_Common::Element::Element(const T * o, int r = 0)
	@param o Object that will be associated with the element.
	@param r Rank to be associated with the element, to be used when ordering.
	
	@fn T * System::List_Common::Element::object()
	@brief Returns a pointer to the associated object.

	@fn Element * System::List_Common::Element::prev()
	@brief Returns the previous element of the list.

	@fn Element * System::List_Common::Element::next()
	@brief Returns the next element of the list.

	@fn int System::List_Common::Element::rank()
	@brief Returns the rank of the element.

	@fn void System::List_Common::Element::prev(Element * e)
	@brief Set the previous element to 'e'.

	@fn void System::List_Common::Element::next(Element * e)
	@brief Set the next element to 'e'.

	@fn void System::List_Common::Element::rank(int r)
	@brief Set the rank of the element.


<!-- *********************************************************************** -->
    @class System::List_Common::Element<T, true, false, true>
	@brief Element for grouping list

	@fn System::List_Common::Element::Element(const T * o, int s)
	@param o Object that will be associated with the element.
	@param s The size of the element.
	
	@fn T * System::List_Common::Element::object()
	@brief Returns a pointer to the associated object.

	@fn Element * System::List_Common::Element::prev()
	@brief Returns the previous element of the list.

	@fn Element * System::List_Common::Element::next()
	@brief Returns the next element of the list.

	@fn unsigned int System::List_Common::Element::size()
	@brief Returns the size of the element.

	@fn void System::List_Common::Element::prev(Element * e)
	@brief Set the previous element to 'e'.

	@fn void System::List_Common::Element::next(Element * e)
	@brief Set the next element to 'e'.

	@fn void System::List_Common::Element::size(unsigned int l)
	@brief Sets the size of element.

	@fn void System::List_Common::Element::shrink(unsigned int n)
	@brief Shrinks the size of the element by 'n'.
	
	@fn void System::List_Common::Element::expand(unsigned int n)
    	@brief Expands the size of the element by 'n'


<!-- *********************************************************************** -->
    @class System::List_Common::Element<T, true, true, true>
	@brief Element for ordered grouping list

	@fn System::List_Common::Element::Element(const T * o, int s)
	@param o Object that will be associated with the element.
	@param s The size of the element.
	
	@fn T * System::List_Common::Element::object()
	@brief Returns a pointer to the associated object.

	@fn Element * System::List_Common::Element::prev()
	@brief Returns the previous element of the list.

	@fn Element * System::List_Common::Element::next()
	@brief Returns the next element of the list.

	@fn int System::List_Common::Element::rank()
	@brief Returns the rank of the element.

	@fn unsigned int System::List_Common::Element::size()
	@brief Returns the size of the element.

	@fn void System::List_Common::Element::prev(Element * e)
	@brief Set the previous element to 'e'.

	@fn void System::List_Common::Element::next(Element * e)
	@brief Set the next element to 'e'.

	@fn void System::List_Common::Element::rank(int r)
	@brief Set the rank of the element.

	@fn void System::List_Common::Element::size(unsigned int l)
	@brief Sets the size of element.

	@fn void System::List_Common::Element::shrink(unsigned int n)
	@brief Shrinks the size of the element by 'n'.
	
	@fn void System::List_Common::Element::expand(unsigned int n)
    	@brief Expands the size of the element by 'n'



<!-- *********************************************************************** -->
    @class System::List_Common::Algorithm<El, false, false, false, false>
	@brief Algorithm for singly linked list

	@fn System::List_Common::Algorithm::Algorithm()
	
	@fn bool System::List_Common::Algorithm::empty() const
	@brief Tests if the list is empty.

	@fn unsigned int System::List_Common::Algorithm::size() const 
	@brief Returns the size of the list.

	@fn Element * System::List_Common::Algorithm::head()
	@brief Returns the head's element of the list

	@fn Element * System::List_Common::Algorithm::tail()
	@brief Returns the tail's element of the list

	@fn void System::List_Common::Algorithm::insert(Element * e)
	@brief Inserts the element in the list's tail. It's like the 'insert_tail' function.

	@fn void System::List_Common::Algorithm::insert_head(Element * e)
	@brief Inserts the element in the list's head.

	@fn void System::List_Common::Algorithm::insert_tail(Element * e)
	@brief Inserts the element in the list's tail.

	@fn Element * System::List_Common::Algorithm::remove()
	@brief Removes and return the element in the list's head. It's like the 'remove_head' function.

	@fn Element * System::List_Common::Algorithm::remove(Element * e)
	@brief **** Finds, removes and return the element 'e' in the list.

	@fn Element * System::List_Common::Algorithm::remove_head()
	@brief Removes and return the element in the list's head.

	@fn Element * System::List_Common::Algorithm::remove_tail()
	@brief Removes and return the element in the list's tail.

	@fn Element * System::List_Common::Algorithm::remove(const Object_Type * obj)
	@brief Removes and returns the element that links the object 'obj'.

	@fn Element * System::List_Common::Algorithm::search(const Object_Type * obj)
	@brief Searches and returns the element that links to the object 'obj'.



<!-- *********************************************************************** -->
    @class System::List_Common::Algorithm<El, false, false, false, true>
	@brief Algorithm for singly linked, grouping list

	@fn System::List_Common::Algorithm::Algorithm()
	
	@fn unsigned int System::List_Common::Algorithm::grouped_size() const
	@brief Returns the value of '_grouped_size' variable.

	@fn Element * System::List_Common::Algorithm::search_size(unsigned int s)
	@brief Returns the element that has size larger than 's'.

	@fn Element * System::List_Common::Algorithm::search_left(const Object_Type * obj) 
	@brief Returns the element to the left of the element that holds object 'obj'.
	
	@fn void System::List_Common::Algorithm::insert_merging(Element * e, Element ** m1, Element ** m2)
	@brief Insters element 'e' between elements 'm1' and 'm2', merging them into a single element whose size is the addition sizes of the three.

	@fn Element * System::List_Common::Algorithm::search_decrementing(unsigned int s)
	@brief Searches and returns an element whose size larger than 's' and decrements 's' from its size.

<!-- *********************************************************************** -->
    @class System::List_Common::Algorithm<El, true, false, false, false>
	@brief Algorithm for doubly linked list

	@fn System::List_Common::Algorithm::Algorithm()
	
	@fn bool System::List_Common::Algorithm::empty() const
	@brief Tests if the list is empty.

	@fn unsigned int System::List_Common::Algorithm::size() const 
	@brief Returns the size of the list.

	@fn Element * System::List_Common::Algorithm::head()
	@brief Returns the head's element of the list

	@fn Element * System::List_Common::Algorithm::tail()
	@brief Returns the tail's element of the list

	@fn void System::List_Common::Algorithm::insert(Element * e)
	@brief Inserts the element in the list's tail. It's like the 'insert_tail' function.

	@fn void System::List_Common::Algorithm::insert_head(Element * e)
	@brief Inserts the element in the list's head.

	@fn void System::List_Common::Algorithm::insert_tail(Element * e)
	@brief Inserts the element in the list's tail.

	@fn Element * System::List_Common::Algorithm::remove()
	@brief Removes and return the element in the list's head. It's like the 'remove_head' function.

	@fn Element * System::List_Common::Algorithm::remove(Element * e)
	@brief Removes and return the element 'e' in the list.

	@fn Element * System::List_Common::Algorithm::remove_head()
	@brief Removes and return the element in the list's head.

	@fn Element * System::List_Common::Algorithm::remove_tail()
	@brief Removes and return the element in the list's tail.

	@fn Element * System::List_Common::Algorithm::remove(const Object_Type * obj)
	@brief Removes and returns the element that links to the object 'obj'.

	@fn Element * System::List_Common::Algorithm::search(const Object_Type * obj)
	@brief Searches and returns the element that links to the object 'obj'.




<!-- *********************************************************************** -->
    @class System::List_Common::Algorithm<El, true, true, relative, false>
	@brief Algorithm for (relative) ordered list

	@fn System::List_Common::Algorithm::Algorithm()
	
	@fn bool System::List_Common::Algorithm::empty() const
	@brief Tests if the list is empty.

	@fn Element * System::List_Common::Algorithm::head()
	@brief Returns the head's element of the list

	@fn Element * System::List_Common::Algorithm::remove_head()
	@brief Removes and return the element in the list's head.

	@fn void System::List_Common::Algorithm::insert(Element * e)
	@brief Inserts element in the appropriate ranking position and attributes the correct relative ranking value to it.

	@fn Element * System::List_Common::Algorithm::remove()
	@brief Removes and return the element in the list's head. It's like the 'remove_head' function.

	@fn Element * System::List_Common::Algorithm::remove(Element * e)
	@brief Removes and return the element 'e' in the list.

	@fn Element * System::List_Common::Algorithm::remove(const Object_Type * obj)
	@brief Removes and returns the element that contains the object 'obj'.

	@fn Element * System::List_Common::Algorithm::search_rank(int rank)
	@brief Returns the element with rank equal to the parameter 'rank'.



<!-- *********************************************************************** -->
    @class System::List_Common::Algorithm<El, true, false, false, true>
	@brief Algorithm for grouping list

	@fn System::List_Common::Algorithm::Algorithm()
	
	@fn unsigned int System::List_Common::Algorithm::grouped_size() const
	@brief Returns the value of '_grouped_size' variable.

	@fn Element * System::List_Common::Algorithm::search_size(unsigned int s)
	@brief Returns the element that has size 's'.

	@fn Element * System::List_Common::Algorithm::search_left(const Object_Type * obj) 
	@brief Returns the element to the left of the element that holds object 'obj'.
	
	@fn void System::List_Common::Algorithm::insert_merging(Element * e, Element ** m1, Element ** m2)
        @brief Insters element 'e' between elements 'm1' and 'm2', merging them into a single element whose size is the addition sizes of the three.

	@fn Element * System::List_Common::Algorithm::search_decrementing(unsigned int s)
	@brief Searches and returns an element whose size larger than 's' and decrements 's' from its size.

<!-- *********************************************************************** -->
    @class System::Simple_List< T, grouping > 
	@brief The 'Simple_List' is a list that has elements for singly linked list can or not be a grouping list. For more information, see System::List_Common::Algorithm.

<!-- *********************************************************************** -->
    @class System::Simple_Grouping_List< T >  
	@brief The 'Simple_Grouping_List' is a list that has elements for singly linked, grouping list. For more information, see System::List_Common::Algorithm.


<!-- *********************************************************************** -->
    @class System::List< T, ordered, relative, grouping >
	@brief 

<!-- *********************************************************************** -->  
    @class System::Ordered_List< T, relative >  
	@brief 'Ordered_List' is a ordered list. For more information, see System::List_Common::Algorithm.

<!-- *********************************************************************** -->
    @class System::Relative_List< T >  
	@brief 'Relative_List' is a (relative) ordered list. For more information, see System::List_Common::Algorithm.

<!-- *********************************************************************** -->
    @class System::Grouping_List< T >
	@brief "Grouping_list" is a grouping, doubly linked list. For more information, see System::List_Common::Algorithm.



*/
