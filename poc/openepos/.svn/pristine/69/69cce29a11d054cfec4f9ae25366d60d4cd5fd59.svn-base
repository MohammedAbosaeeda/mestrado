/*! @class System::Thread
    @ingroup abs_thread

    @brief The Thread abstraction implementation

    Threads "executes a task", thus they correspond to the active part
    of a process. The resources of a task, including its data segment,
    are shared by all of its threads, but each thread has its own
    local data segment (stack) and execution context. A Thread
    constitutes the unit of execution of an application.

    <img src='img/a.png'>

    <!-- *************************************************************** -->
    @fn System::Thread::Thread(int (*entry)(), const State & state, const Priority & priority, unsigned int stack_size)
    @brief Creates a Thread.

	@param entry
	Function to be executed without parameter.

	@param state
	Thread state

	@param priority
	Thread priority

	@param stack_size
	Stack size

    @note Stack initialization is done at CPU Mediator since different 
    architectures could define different stack manipulation.

    <!-- *************************************************************** -->
    @fn System::Thread::Thread(int (* entry)(T1 a1), T1 a1, const State & state, const Priority & priority, unsigned int stack_size)
    @brief Creates an Thread.

	@param entry
	Function to be executed with one parameter (T1 a1)

	@param a1
	First Function Parameter

	@param state
	Thread state

	@param priority
	Thread priority

	@param stack_size
	Stack size

    @note Stack initialization is done at CPU Mediator since different 
    architectures could define different stack manipulation.

    <!-- *************************************************************** -->
    @fn System::Thread::Thread(int (* entry)(T1 a1, T2 a2), T1 a1, T2 a2, const State & state, const Priority & priority, unsigned int stack_size)
    @brief Creates an Thread.

	@param entry
	Function to be executed with two parameter (T1 a1, T2 a2)

	@param a1
	First Function Parameter
	
	@param a2
	Second Function Parameter

	@param state
	Thread state

	@param priority
	Thread priority

	@param stack_size
	Stack size

    @note Stack initialization is done at CPU Mediator since different 
    architectures could define different stack manipulation.

    <!-- *************************************************************** -->
    @fn System::Thread::Thread(int (* entry)(T1 a1, T2 a2, T3 a3), T1 a1, T2 a2, T3 a3, const State & state, const Priority & priority, unsigned int stack_size)
    @brief Creates an Thread.

	@param entry
	Function to be executed with three parameter (T1 a1, T2 a2, T3 a3)

	@param a1
	First Function Parameter
	
	@param a2
	Second Function Parameter
	
	@param a3
	Third Function Parameter

	@param state
	Thread state

	@param priority
	Thread priority

	@param stack_size
	Stack size

    @note Stack initialization is done at CPU Mediator since different 
    architectures could define different stack manipulation.

    <!-- *************************************************************** -->
    @fn volatile const State & System::Thread::state() const

	@return
	Returns Thread state

    <!-- *************************************************************** -->
    @fn Priority System::Thread::priority() const
	
	@return
	Returns Thread Priority

    <!-- *************************************************************** -->
    @fn void System::Thread::priority(const Priority & p)
	@brief Method to set the Thread Priority

    <!-- *************************************************************** -->
    @fn int System::Thread::join()
    @brief Waits until Threads finishes.
    This method blocks the caller Thread until this Thread finished your
    execution.

    <!-- *************************************************************** -->
    @fn void System::Thread::pass()
    @brief Thread receives the CPU
    @note Caller's Thread goes to the READY Queue.
    <!-- *************************************************************** -->
    @fn void System::Thread::suspend()
    @brief Thread goes to Suspended Queue
    <!-- *************************************************************** -->
    @fn void System::Thread::resume()
    @brief Brings Thread back to READY Queue
    <!-- *************************************************************** -->
    @fn static Thread * volatile & System::Thread::self()
    @return
	Returns the running Thread
    <!-- *************************************************************** -->
    @fn static void System::Thread::yield()
    @brief Running Thread leaves CPU control.
    <!-- *************************************************************** -->
    @fn static void System::Thread::sleep(Queue * q)
    @brief Sleeps the current running Thread

    The current running thread goes to the waiting state and are inserted
    in the parameter queue.
    <!-- *************************************************************** -->
    @fn static void System::Thread::wakeup(Queue * q)
    @brief Wakeup the first Thread on Queue

    The first element of Queue is removed and inserted in the Ready Queue.
    <!-- *************************************************************** -->
    @fn static void System::Thread::wakeup_all(Queue * q)
    @brief Wakeup all Threads on Queue

    All elements of Queue are removed and inserted in the Ready Queue.
    <!-- *************************************************************** -->
    @fn static void System::Thread::exit(int status)
    @brief Finishes the Thread execution

    <!-- *************************************************************** -->
    @fn static void System::Thread::init();
    @brief Thread Initialization routine

    This method creates the system first Thread, idle thread and enables the
    scheduler if Trait<Thread>::active_scheduler is true.

    <!-- Private methods -->
    <!-- *************************************************************** -->
    @fn void System::Thread::init_thread(Log_Addr entry, unsigned int stack_size, State state, Priority priority)
    @brief Common contructors code

    <!-- *************************************************************** -->
    @fn static Thread * volatile  & System::Thread::running()
    @return
	Returns the current runnning Thread

    <!-- *************************************************************** -->
    @fn static void System::Thread::running(Thread * r)
    @brief Set the current runnning Thread

    <!-- *************************************************************** -->
    @fn static void System::Thread::prevent_scheduling()
    @brief Switchs off Scheduling
    If Traits<Thread>::active_scheduler is true, the Scheduller is switched off

    <!-- *************************************************************** -->
    @fn static void System::Thread::allow_scheduling()
    @brief Switchs on Scheduling
    If Traits<Thread>::active_scheduler is true, the Scheduller is switched on

    <!-- *************************************************************** -->
    @fn static void System::Thread::reschedule(); // this is the master alarm handler
    @brief Performs Thread re-scheduling

    Executes the scheduler algorithm.
    @note This method is set as master alarm handler with the Traits<Thread>::QUANTUM period.

    <!-- *************************************************************** -->
    @fn static void System::Thread::implicit_exit()
    @brief Since Thread function believes it's a normal function that will be 
    invoked with a call, this method will be the return address of
    Thread.

    <!-- *************************************************************** -->
    @fn static void System::Thread::switch_to(Thread * n)
    @brief Performs Context Switching between Threads.

    <!-- *************************************************************** -->
    @fn static int System::Thread::idle()
    @brief Idle thread function
    This is the Thread that must be executed when no other Thread are ready to
    own the CPU.

    <!-- *************************************************************** -->

*/
