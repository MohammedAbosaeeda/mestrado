% \newpage
\section{Discussão}
% {{{
% Ideia de fazer uma seção de discussão depois da apresentação das aplicações
% e das medidas.
%
% Dá pra falar nesta seção:
% - Da exportação de abstrações EPOS (além dos mediadores),
% como por exemplo o alarme.
% - Da portabilidade HW/SW conseguida com os componentes híbridos.
% - Dá para plotar os gráficos de overhead de chamada a metodos nativos e
% concluir que ele independe de aplicaçao.
% É dependente apenas de número de parametros, se tem retorno ou não etc.
% Dá para fazer primeiro para KESO, mas também para os outros...

% - Da portabilidade HW/SW conseguida com os componentes híbridos.
% \begin{itemize}
% \item
% }}}
A partir da análise dos casos de estudos foram feitas as seguintes observações
acerca do método proposto nesta dissertação.

\textbf{Adaptadores de código nativo para abstrações de \textit{SO}}

O programa \emph{sensor} da Figura \ref{progjava:sensor_app} demostra que
utilizando o método proposto é possível desenvolver adaptadores de código
nativo não apenas para mediadores de hardware como também para abstrações de
\textit{SO}.
No programa, observa-se um adaptador de código nativo para a abstração de alarme
(\emph{Alarm}), a qual é construída utilizando-se o mediador de
hardware para o \textit{timer} da plataforma.

\textbf{Portabilidade software/hardware}
Currently DMEC is implemented by software components, where Coordinator and
Workers are threads running on distinct cores of a multicore processor. In spite
of that, DMEC can be implemented by hardware components preserving the same
interfaces available in the software version. We can achieve this by using the
concept of EPOS hybrid components [Marcondes and Fröhlich 2009]. In that case
our Java wrappers also remain the same. In a hardware implementation scenario
Coordinator and Workers are IPs of a Multiprocessor System-on-Chip (MPSoC) and
the communication between them is performed by the on-chip interconnection, such
the ones described by [Javaid et al. 2010], [Popovici and Jerraya 2009].



Além de portabilidade entre plataformas de hardware distintas, existe
portabilidade entre software e hardware.
Portabilidade entre software e hardware significa que um mesmo adaptador de
código nativo pode ser utilizado tanto em uma implementação de software quanto
em uma implementação em hardware do componente sendo abstraído.
Isto é possível com a utilização do conceito de \emph{componentes híbridos}
realizados pelo EPOS, aonde um componente preserva a mesma interface tanto em
sua implementação em software quanto em sua implementação em hardware
\cite{Marcondes:IESS:2009}.
O DMEC, por exemplo, atualmente é implementado por componentes de software,
aonde os módulos \emph{Coordinator} e \emph{Workers} são \textit{threads}
executando em núcleos distintos de um processador multinúcleo.
Apesar disso, utilizando-se o conceito de componentes híbridos, o DMEC pode ser
implementado por componentes de hardware preservando as mesmas interfaces
disponíveis na versão em software.
Neste caso, os adaptadores de código nativo desenvolvidos também permanecem os
mesmos.
Em um cenário de implementação em hardware \emph{Coordinator} e \emph{Worker}
são IPs (do inglês \emph{Intelectual Properties}) de um multiprocessador em chip
(do inglês \emph{Multiprocessor System-on-Chip} - MPSoC) e a comunicação entre
eles é realizada por um sistema de interconexão em chip, como por exemplo os
descritos
por \cite{Javaid:2010:OSL:1878961.1878978} e
\cite{Popovici:2009:FAC:1509633.1509681}.

% ------------------------------------------------------------------------------

