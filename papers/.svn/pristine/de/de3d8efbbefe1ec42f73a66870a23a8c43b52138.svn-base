% ------------------------------------------------------------------------------
\section{Strategies for ME Optimization} \label{sota}
% TODO: Go back to here to customize this section.
% Currently it is to centered on ME optimization. 
% It does not mention interfaces, etc.

% + Related Work
% This section make an overview of the strategies to optimize the time performance of ME:
% algorithmic optimizations (fast-search algorithms, macroblock subsampling,
% sample truncation, multi-resolution ME, subsampled motion-field estimation),
%  parallelization of algorithms (our case), and
% hardware implementations of algorithms.
%
% Focus on works related to ME parallelization / distribution.
% Maybe compare to the work of Ronaldo's student: Ricardo Kintschner also about
% ME optimization on Cell (Webmedia2011).
% Look for other works directly comparable.
%
% Also: ?[and reviews techniques about designing for interfaces]?
% 

% TODO Maybe move this to SOTA
% The \emph{Block-Matching Algorithm} (BMA), which searches for similar blocks and
% generates the motion vectors, is mainly responsible for ME being so time
% consuming.
% Therefore one strategy for optimizing BMA is the \emph{fast-search}, which looks
% only in specific points of the search window, while a similar block is being
% searched.
% Another strategy is to perform ME hierarchically, computing motion vectors for a
% specific frame region, and refining them in each level, which is known as
% \emph{multi-resolution} motion estimation.
% Other strategies look into finding parallelism in BMAs, in order to run ME
% stages simultaneously.
% For all strategies there are also hardware implementations, based on optimized
% functional units (such as vector operations) or based on replication of
% functional units, to explore parallelism.
% Block-Matching Algorithms using fast-search improve time performance of ME, but
% they can find suboptimal motion vectors because they do not search in all
% positions of the search window. Multi-resolution ME works with different
% resolutions of one frame, successively refining the found motion vectors.
% This increases the ME time if the search is performed sequentially as in
% \cite{ChiaChunLin:FastAlgPlusArch:2006} or demands for replicated hardware
% functional units, as in \cite{ChiaChunLin:PMRME:2007}.
% Similarly, parallel and hardware implementations come at the cost of replicated
% or dedicated functional units.

% There are two major goals in motion estimation optimization: to improve the 
% compression rate and to reduce the total encoding time. 
% Improving the compression rate is achieved by finding the best possible motion
% vectors, which means motion vectors that will generate the smallest residual
% difference during the motion compensation (MC). Reducing the total encoding
% time is achieved by finding the motion vectors in the smallest possible period 
% of time. 
% Several tools in H.264 are used to find the best possible motion vectors; 
% besides looking in all positions of a search window (i.e. full-search), it is 
% possible to search in several reference frames (backwards or forwards), and it 
% is possible to perform block-matching using sub-pel precision 
% (half and quarter of a pel) \cite{citeulike:1269699}. 
% Finding the best motion vectors, very often, goes against finding the motion 
% vectors more quickly. 
% In this work we focus on motion estimation optimizations which aim to reduce the
% total encoding time, therefore we are not going into the details of techniques 
% for finding the best motion vectors possible, but they can be found in 
% \cite{YuWenHuang:Complex:2006}, \cite{YepingSu:MF:2006}, \cite{Ma:MF:2009}, 
% and \cite{XiangLi:MF:2004}. 
% It is important to notice that all techniques for ME optimization must take into
% consideration keeping the video quality of the generated bitstream.

% P2
% Como otimizar a ME - estratégias.
There are several strategies to optimize the execution time of ME:
fast-search algorithms, macroblock subsampling, sample truncation, 
multi-resolution ME, subsampled motion-field estimation, 
and parallel and hardware implementations of algorithms.

% P3 ... Pn-1
% Um paragrafo para cada estratégia dizendo:
% + how these solutions match/ contribute to Goals { g1, g2, .., gn} and Features {f1 , f2 , ..., fn}
% + And what set of features F is still missing? (GAP)
%
% P3 - fast-search
\emph{Fast-search algorithms} are block-matching algorithms that look only in 
specific positions of the search window \cite{SunNingning:TSS:2009, LaiManPo:4SS:1996,
ShipingZhu:DS:2009, Tourapis:PMVFAST:2001, HoiMingWong:EPMVFAST:2005, LiangGeeChen:TDL:1991}.
The search window defines the region of the reference frame that is scanned for a macroblock
partition similar to the current one. 
Only the motion vectors that correspond to the match with the lowest \emph{motion cost} 
are chosen. 
The main drawback of this approach is that, since some positions of the search 
window are discarded, it is possible to find suboptimal motion vectors.

% P4 macroblock subsampling and sample truncation
Two other strategies to optimize ME during block-matching are macroblock 
subsampling and sample truncation. 
Macroblock subsampling takes into consideration only a macroblock partition 
(i.e. some samples of a macroblock) while the matching for a 
position of the search window is being performed. 
Sample truncation is performed by ignoring the least significant bits of a 
sample. 
These strategies have been used separately in \cite{liu:sub:1993} (subsampling)
and in \cite{DBLP:journals/tcsv/HeTCL00}, and \cite{ChiaChunLin:PMRME:2007} 
(truncation). 

% P5 multi-resolution ME
\emph{Multi-resolution motion estimation} is the strategy in which the motion 
vectors are computed for distinct resolutions of the same frame. 
Motion vectors computed in a more coarse level can be successively refined until
the finest level (higher resolution). 
If the search is performed sequentially as in 
\cite{ChiaChunLin:FastAlgPlusArch:2006}, the time of ME can be increased due to
the dependencies between distinct levels. 
On the other hand, if the search is executed in parallel for each resolution 
level, as in \cite{ChiaChunLin:PMRME:2007}, hardware functional units need to be
replicated. 
A similar technique is \emph{subsampled motion-field estimation} 
\cite{liu:sub:1993}, which is based on the assumption that motion vectors of neighboring 
blocks tends to be similar. Thus, for each block, only a set of motion 
vectors (a motion-field) is computed, while the others are interpolated.

% P7 | P6 parallel and hardware implementations of algorithms
Other strategies for optimizing motion estimation are based on finding 
parallelism in ME stages, especially in the block-matching algorithms, in order
to execute them simultaneously. 
These parallel strategies commonly have been the base for dedicated hardware implementations. 
The \emph{Sum of Absolute Differences} (SAD) is a metric of error used in 
block-matching algorithms. This technique is frequently parallelized using functional 
units in hardware \cite{ChiaChunLin:PMRME:2007}, 
and \cite{HoyoungChang:HW:2009}. 
Hardware implementations of shared buffers for frame data are also
common \cite{HoyoungChang:HW:2009}, \cite{HaibingYin:HW:2010}.

% ------------------------------------------------------------------------------
