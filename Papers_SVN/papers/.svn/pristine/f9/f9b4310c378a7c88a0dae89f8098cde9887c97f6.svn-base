\documentclass[conference]{IEEEtran}
\pdfpagewidth=8.5in
\pdfpageheight=11in

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[english]{babel}
\usepackage{microtype}
\usepackage{balance}
\usepackage{listings}
\usepackage{float}
\usepackage{color,graphicx}
\usepackage[figuresright]{rotating}
\usepackage[tableposition=top]{caption}
\usepackage{listings}
\usepackage{color}
\definecolor{gray}{rgb}{0.4,0.4,0.4}
\definecolor{darkblue}{rgb}{0.0,0.0,0.6}
\definecolor{cyan}{rgb}{0.0,0.6,0.6}

\lstset{
  basicstyle=\ttfamily,
  columns=fullflexible,
  showstringspaces=false,
  commentstyle=\color{gray}\upshape
}

\lstdefinelanguage{XML}
{
  morestring=[b]",
  morestring=[s]{>}{<},
  morecomment=[s]{<?}{?>},
  stringstyle=\color{black},
  identifierstyle=\color{darkblue},
  keywordstyle=\color{cyan},
  morekeywords={xmlns,version,type}% list your attributes here
}


\newcommand{\fig}[4][thb]{
  \begin{figure}[#1] {\centering{\includegraphics[#4]{fig/#2}}\par}
    \caption{#3\label{fig:#2}}
  \end{figure}
}

\begin{document}

\title{AEP - Automatic Exchange of Embedded System Software Parameters.}

\author{
	\IEEEauthorblockN{Rita de Cássia Cazu Soldi and Antônio Augusto Medeiros Fröhlich}
	\IEEEauthorblockA{Federal University of Santa Catarina (UFSC)\\
					  Laboratory for Software and Hardware Integration (LISHA)\\
					  Florianópolis, SC, Brazil\\
					  {rita, guto}@lisha.ufsc.br}
}
\maketitle

\begin{abstract}
The process of debugging  embedded system software is a nontrivial task that consumes a lot of time, once it needs a thorough inspection of the entire source code to make sure that there is no behavior beyond expectations.

Coding and testing embedded systems is even more defiant, since developers need to find out how to optimize the use of the scarce resources since the test itself will compete with the application under test by the scarce system resources. Also, both run in proper platforms, that depends on operating systems, architecture, vendors, debugging tool, etc. This makes embedded systems more susceptible to errors as well as specification failures.

This paper presents AEP, a tool to help developers in the process of debugging embedded systems. The main idea of this tool is emulating various possible system configuration to try to find errors in the application.  An XML file contains all required information to perform automated compilation, emulation and debugging , and there is no need of human interference.

The evaluation of AEP was in terms of memory consumption and time to perform debugging. The obtained results indicate that even with no previous information this tool can produce helpful answers for developers to find and fix bugs.

\end{abstract}

\section{Introduction}
An embedded system can be presented as a combination of software and hardware designed to perform a specific task.  Applications involving environmental monitoring and analysis, intelligent cities, and precision farming are only a sample of a set of possible applications.

These systems were designed to monitor and process data related to the physical environment in which they were coupled. Then, the purpose of these systems was extrapolated to interact with the actors of the modification of this environment, humans. Now, embedded systems are widely attached to numerous electronic devices, and their activities are becoming more popular and intrinsic to human’s daily life~\cite{carro2003sistemas}.

When the interaction between embedded systems and humans was not the main focus, the price for a failure in these systems was more focused on the financial loss such as loss of market share, client information, people time, etc.~\cite{tassey2002economic}. Material losses are inconvenient, but endanger human life is an unacceptable risk. With a focus on direct interaction with humans, we must make sure that the behavior of the systems is in accordance with the specification.

Software testing is the process of analyzing a software item to detect the differences between existing and required conditions (that is, bugs) and to evaluate the features of the software item~\cite{standard:ieee1008:1987}. The test area has evolved considerably, but testing is still one of the most time-consuming development process. Mainly because, it requires a thorough inspection of the source code to find out if the software specification is fully satisfied, and this is a non-trivial process~\cite{parnin2011automated}.

Since the test is not part of the software behavior, it should never interfere in the flow of activities of the software under test. In general-purpose systems, it is usually possible to achieve this premise  without much effort, but some special computer systems have some restrictions, such as low memory, low processing power, limited battery time or a deadline to perform a certain activity. In this case, the developer will still need to find strategies to the test in itself does not compete for resources application.







Most debug tools are partially automated, and demand interaction with the developer to make decisions during testing \cite{campos2012gzoltar, tracingDiagnose}. This type of tool saves some development time, but not as much when compared to total automation tools. The automation of the entire testing process without any human intervention is still a challenge to researchers, although there are some studies that can automate part of the process with data taken directly from the application \cite{Larson:2013:MDAT,JSWjsw0803603616}.

In this paper, we propose the automatic exchange of configuration parameters (AEP) as an automation of one part of the debugging process for embedded systems' application. The AEP conains a shell script responsible for exchanging configuration parameters according to an XML specification file, without any human interaction during debug processes. This proposal also presents an introduction to the problem of setting up a stable environment for testing embedded systems. In summary, we make the following contributions:

\begin{itemize}

\item \textbf{Automated debug a real world embedded system application.} In this case study developers can run a script to automatic find errors and use a report to fix the code or find better parameter values.

\item \textbf{Environment for debugging embedded applications, fully configurable according to specific hardware/software requirements.} It is shown how to create an environment for development and test embedded applications using GDB to cross debug the code and QEMU to simulate its execution.

\end{itemize}





\bibliographystyle{abbrv}
\bibliography{references}

\end{document}