/* Generated By:JavaCC: Do not edit this line. ConfigReader.java */
package josek.parser;

import java.io.InputStream;
import java.io.FileInputStream;
import java.io.IOException;
import josek.*;

public class ConfigReader implements ConfigReaderConstants {
        public static Configuration parseDefinition(String filename) {
                Configuration config = new Configuration();
                ConfigReader parser = null;

                try {
                        parser = new ConfigReader(new FileInputStream(filename));
                } catch (IOException ex) {
                        ex.printStackTrace();
                        throw new RuntimeException(ex.toString());
                }

                try {
                         parser.parseConfiguration(config.getRoot());
                } catch (ParseException ex) {
                        throw new RuntimeException(ex.toString());
                }

                return config;
        }

  final public void parsePrimitiveAttribute(Attribute parent) throws ParseException {
        Token mName;
        String lValue;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINECOMMENT:
      jj_consume_token(LINECOMMENT);
      break;
    case OBJECTDEFINITION:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        mName = jj_consume_token(IDENTIFIER);
        break;
      case OBJECTDEFINITION:
        mName = jj_consume_token(OBJECTDEFINITION);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                lValue = mName.image;
      jj_consume_token(ASSIGNMENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        parseStringAttribute(parent, lValue);
        break;
      case LBRACE:
        parseArrayAttribute(parent, lValue);
        break;
      case INTEGER_LITERAL:
        parseIntAttribute(parent, lValue);
        break;
      case HEXINTEGER_LITERAL:
        parseHexAttribute(parent, lValue);
        break;
      case BOOL_TRUE:
      case BOOL_FALSE:
        parseBoolAttribute(parent, lValue);
        break;
      case FLOATING_POINT_LITERAL:
        parseFloatAttribute(parent, lValue);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parseComplexAttribute(Attribute parent) throws ParseException {
        Token mName;
        Token mValue;
        String lValue;
        String rValue;
        Attribute newAttribute;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINECOMMENT:
      jj_consume_token(LINECOMMENT);
      break;
    case IDENTIFIER:
      mName = jj_consume_token(IDENTIFIER);
                                lValue = mName.image;
      jj_consume_token(ASSIGNMENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        mValue = jj_consume_token(IDENTIFIER);
                                        rValue = mValue.image;
                                        newAttribute = new PrimitiveStringAttribute(parent, lValue, rValue);
        break;
      case BOOL_FALSE:
        mValue = jj_consume_token(BOOL_FALSE);
                                        rValue = mValue.image;
                                        newAttribute = new PrimitiveBoolAttribute(parent, lValue, false);
        break;
      case BOOL_TRUE:
        mValue = jj_consume_token(BOOL_TRUE);
                                        rValue = mValue.image;
                                        newAttribute = new PrimitiveBoolAttribute(parent, lValue, true);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LBRACE);
      label_1:
      while (true) {
        parsePrimitiveAttribute(newAttribute);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OBJECTDEFINITION:
        case LINECOMMENT:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(RBRACE);
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parseIntAttribute(Attribute parent, String lValue) throws ParseException {
        Token rValue;
    rValue = jj_consume_token(INTEGER_LITERAL);
                new PrimitiveIntAttribute(parent, lValue, Integer.parseInt(rValue.image));
  }

  final public void parseHexAttribute(Attribute parent, String lValue) throws ParseException {
        Token rValue;
    rValue = jj_consume_token(HEXINTEGER_LITERAL);
                Integer i = Integer.decode(rValue.image);
                new PrimitiveIntAttribute(parent, lValue, i.intValue());
  }

  final public void parseStringAttribute(Attribute parent, String lValue) throws ParseException {
        Token rValue;
    rValue = jj_consume_token(IDENTIFIER);
                new PrimitiveStringAttribute(parent, lValue, rValue.image);
  }

  final public void parseBoolAttribute(Attribute parent, String lValue) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL_TRUE:
      jj_consume_token(BOOL_TRUE);
                        new PrimitiveBoolAttribute(parent, lValue, true);
      break;
    case BOOL_FALSE:
      jj_consume_token(BOOL_FALSE);
                         new PrimitiveBoolAttribute(parent, lValue, false);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parseFloatAttribute(Attribute parent, String lValue) throws ParseException {
        Token rValue;
    rValue = jj_consume_token(FLOATING_POINT_LITERAL);
                new PrimitiveFloatAttribute(parent, lValue, Float.parseFloat(rValue.image));
  }

  final public void parseArrayAttribute(Attribute parent, String lValue) throws ParseException {
//	ArrayAttr array = null;
        Token mValue;
        Token mToken;
    mToken = jj_consume_token(LBRACE);
//		array = new ArrayAttr(parent, lValue, mToken.beginLine);
                System.out.println("Array Start");
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      mValue = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(COMMA);

    }
    mValue = jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(RBRACE);

  }

  final public void parseConfiguration(Attribute parent) throws ParseException {
        Attribute object;
        Token mToken;
        Token mName;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINECOMMENT:
        jj_consume_token(LINECOMMENT);
        break;
      case CPU:
        mToken = jj_consume_token(CPU);
        mName = jj_consume_token(IDENTIFIER);
        jj_consume_token(LBRACE);
                object = new PrimitiveStringAttribute(parent, mToken.image, mName.image);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OBJECTDEFINITION:
          case LINECOMMENT:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_4;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LINECOMMENT:
            jj_consume_token(LINECOMMENT);
            break;
          case OBJECTDEFINITION:
            parseObjectDefinition(object);
            break;
          default:
            jj_la1[8] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(RBRACE);
        jj_consume_token(SEMICOLON);
        break;
      case INCLUDE:
        parseInclude(parent);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CPU:
      case LINECOMMENT:
      case INCLUDE:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
    }
                {if (true) return;}
  }

  final public void parseObjectDefinition(Attribute parent) throws ParseException {
        Attribute object;
        Token mToken;
        Token mName;
    mToken = jj_consume_token(OBJECTDEFINITION);
    mName = jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
                object = new PrimitiveStringAttribute(parent, mToken.image, mName.image);
    label_5:
    while (true) {
      if (jj_2_2(4)) {
        parsePrimitiveAttribute(object);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINECOMMENT:
        case IDENTIFIER:
          parseComplexAttribute(object);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OBJECTDEFINITION:
      case LINECOMMENT:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(RBRACE);
    jj_consume_token(SEMICOLON);
                {if (true) return;}
  }

  final public void parseInclude(Attribute parent) throws ParseException {
        Token mName;
    if (jj_2_3(2)) {
      jj_consume_token(INCLUDE);
      jj_consume_token(LSHARP);
      mName = jj_consume_token(FILENAME);
      jj_consume_token(RSHARP);
                                                         new PrimitiveIncludeAttribute(parent, mName.image, true);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        jj_consume_token(INCLUDE);
        jj_consume_token(QMARK);
        mName = jj_consume_token(FILENAME);
        jj_consume_token(QMARK);
                                                         new PrimitiveIncludeAttribute(parent, mName.image, false);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    }
    if (jj_scan_token(ASSIGNMENT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    }
    }
    }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(INCLUDE)) return true;
    if (jj_scan_token(LSHARP)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(BOOL_FALSE)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(BOOL_TRUE)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(HEXINTEGER_LITERAL)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ConfigReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800040,0x4b4c000,0xc00040,0xb00000,0xc00040,0xc00000,0x300000,0x400040,0x400040,0x400020,0x400020,0xc00000,0xc00040,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x20,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ConfigReader(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ConfigReader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ConfigReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ConfigReader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConfigReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ConfigReader(ConfigReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ConfigReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
